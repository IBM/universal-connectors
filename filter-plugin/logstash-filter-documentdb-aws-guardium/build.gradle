import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a ***REMOVED***mple Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1.1/userguide/building_java_projects.html
 */
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'eclipse'
mainClassName= 'com.ibm.guardium.documentdb.DocumentdbGuardiumFilter'
apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"


// ===========================================================================
// plugin info
// ===========================================================================
group                      'com.ibm.guardium.documentdb' // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "DocumentDB-Guardium filter plugin"
pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
pluginInfo.longDescription = "This gem is a Logstash MongoDB filter plugin required to be installed as part of IBM Security Guardium, Guardium Univer***REMOVED***l connector configuration. This gem is not a stand-alone program."
pluginInfo.authors         = ['IBM', '', '']
pluginInfo.email           = ['']
pluginInfo.homepage        = "http://www.elastic.co/guide/en/logstash/current/index.html"
pluginInfo.pluginType      = "filter"
pluginInfo.pluginClass     = "DocumentdbGuardiumFilter"
pluginInfo.pluginName      = "documentdb_guardium_filter" // must match the @LogstashPlugin annotation in the main plugin class
// ===========================================================================

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}


apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    classifier = null
}
dependencies {
    compile group: 'commons-validator', name: 'commons-validator', version: '1.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
   // implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.8'
   // implementation 'org.apache.commons:commons-lang3:3.7'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'com.google.code.gson:gson:2.8.9'
     // Use JUnit Jupiter for testing.


     testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
     testImplementation 'junit:junit:4.12'
     testImplementation 'org.jruby:jruby-complete:9.2.7.0'
     testImplementation group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'
     implementation fileTree(dir: LOGSTASH_CORE_PATH, include: "build/libs/logstash-core-*.*.*.jar")
     implementation fileTree(dir: GUARDIUM_UNIVERSALCONNECTOR_COMMONS_PATH, include: "common-*.*.*.jar")

    // This dependency is exported to consumers, that is to ***REMOVED***y found on their compile classpath.
   // api 'org.apache.commons:commons-math3:3.6.1'



    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
     implementation 'com.google.guava:guava:30.1-jre'
}

clean {
    delete "${projectDir}/Gemfile"
    delete "${projectDir}/" + pluginInfo.pluginFullName() + ".gemspec"
    delete "${projectDir}/lib/"
    delete "${projectDir}/vendor/"
    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-?.?.?.gem").each { filename ->
        delete filename
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.register("vendor"){
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        validatePluginJar(projectJarFile, project.group)
    }
}

tasks.register("generateRubySupportFiles") {
    doLast {
        generateRubySupportFilesForPlugin(project.description, project.group, version)
    }
}

tasks.register("removeObsoleteJars") {
    doLast {
        new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
            delete f
        }
    }
}

tasks.register("gem"){
    dependsOn = [downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles]
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}



tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
// test Execution
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
/*
//configure plugin setting
jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
//configure task execution
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

//config volatile rule
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}
// test task
test {
    jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
    }
}
// task extension default value
test {
    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}
//generate code coverage
application {
    mainClass = 'org.gradle.MyMain'
}

jacoco {
    applyTo run
}

tasks.register('applicationCodeCoverageReport', JacocoReport) {
    executionData run
    sourceSets sourceSets.main
}
*/
jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacoco")
}
