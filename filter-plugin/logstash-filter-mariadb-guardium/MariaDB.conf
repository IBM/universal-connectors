input 
{
  beats 
  {
  port => 8541
  type => "mariadb"
  }
}
filter{
if [type] == "mariadb" and "MariaDB_On_Premise" in [tags][0]{
mutate {
add_field => {"server_Ip" => "%{[host][ip][0]}"}
}
mutate {add_field => { "TZ" => "%{[event][timezone]}" }}

# In case of duplicate records enable add_id feature in Filebeat configuration and uncomment below mentioned lines replacing event_id and _id.

#mutate {
# replace => { "event_id" => "%{[@metadata][_id]}"}
# replace => { "_id" => "%{[@metadata][_id]}"}
#}
# Ignoring system logs, user can follow the readme instruction to ignore any logs using filebeat configration as per requirements. 
if "select 1" in [mes***REMOVED***ge] or "SET autocommit" in [mes***REMOVED***ge] or "select @@version_comment" in [mes***REMOVED***ge] or "SHOW COLLATION" in [mes***REMOVED***ge] or "SELECT @@tx_isolation" in [mes***REMOVED***ge] or "select @@lower_case_table_names" in [mes***REMOVED***ge] or "SET GLOBAL" in [mes***REMOVED***ge] or "SHOW GLOBAL" in [mes***REMOVED***ge] or "COMMIT" in [mes***REMOVED***ge] or "ROLLBACK" in [mes***REMOVED***ge] or "SELECT count(*)" in [mes***REMOVED***ge] or "SELECT CONCAT" in [mes***REMOVED***ge] or "FLUSH PRIVILEGES" in [mes***REMOVED***ge] or "set @@SQL_SELECT_LIMIT" in [mes***REMOVED***ge] or "SELECT TABLE_SCHEMA TABLE_CAT" in [mes***REMOVED***ge] or "@@max_allowed_packet" in [mes***REMOVED***ge]{
drop{}
}
grok { match => { "TZ" => "(?<minutes>[^:]*):(?<seconds>[^,]*)" } }
grok { match => { "minutes" => "(?<offset_diff>[^[0-9]]*)%{GREEDYDATA:actual_minutes}" } }ruby { code => "event.set('minutes1', event.get('actual_minutes').to_i * 60)" }
ruby { code => "event.set('offset1', event.get('minutes1') +  event.get('seconds').to_i)" }mutate { add_field => { "totalOffset" => "%{offset_diff}%{offset1}" } }
grok
{
match => {"mes***REMOVED***ge" => "(?<timestamp>[^[A-Z][a-z]]*),(?<serverhost>[^\s]*),(?<username>[^\s]*),(?<hostname>[^\s]*),(?<connectionid>[^\s]*),(?<queryid>[^\s]*),(?<operation>[^\s]*),(?<database>[^\s]*),(?:%{GREEDYDATA:object}),(?<retcode>[^\s]*)"}
}
# This is to ignore system logs which are having correct format but database name is missing.
# create database command is exception thats why excluded from this condition.
if "QUERY" == [operation] and "0" == [retcode] and ![database] and "create database" not in [mes***REMOVED***ge]{
drop{}
}
# The "FAILED_CONNECT" system generated logs is appearing multiple time, which doesn't have any relation with authentication log.
# so ignoring it.
if "FAILED_CONNECT" == [operation] and "0" == [queryid] and ![username]{
drop{}
}
mariadb_guardium_filter{}
}
}
output{
stdout{ codec => rubydebug }
}