input{

generator {
  mes***REMOVED***ge => "1629192925919, 172.31.20.251:47148, ip-172-31-29-87.ap-south-1.compute.internal/172.31.29.87:8182, HTTP_POST, [unknown], [unknown], "HttpObjectAggregator$AggregatedFullHttpRequest(decodeResult: success, version: HTTP/1.1, content: CompositeByteBuf(ridx: 0, widx: 68, cap: 68, components=1)) POST /sparql HTTP/1.1 Host: database2-neptune.cluster-cllxmp6vknzx.ap-south-1.neptune.amazonaws.com:8182 Accept-Encoding: identity Accept: application/sparql-results+json content-type: application/x-www-form-urlencoded Content-Length: 68 User-Agent: python-urllib3/1.26.5", query=%0ASELECT+%2A+WHERE+%7B%0A++++%3Fs+%3Fp+%3Fo%0A%7D+LIMIT+40%0A"
  
  count => 1
  add_field => {"account_id" => "<ACCOUNT_ID>" }
         }
    }

filter{
       mutate {
		  add_field => { "serverHostnamePrefix" => "%{[account_id]}_%{[cloudwatch_logs][log_stream]}"}
		  add_field => { "dbnamePrefix" => "%{[account_id]}:%{[cloudwatch_logs][log_stream]}" }
		  }
		  
        grok{ 
            match => {"mes***REMOVED***ge" => [ 

            "(?<timestamp>[\d]{13}), (?<clienthost>[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[\d]{4,5}), (?<serverhost>[a-z0-9\.-]*/?[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[\d]{4,5}), %{WORD:connectiontype}, (?<callerIAM>[^\s]*), (?<authcontext>[^\s]*), \"(?<httpheaders>.*?)\", \"%{GREEDYDATA:payload}\"",

            "(?<timestamp>[\d]{13}), (?<clienthost>[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[\d]{4,5}), (?<serverhost>[a-z0-9\.-]*/?[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[\d]{4,5}), %{WORD:connectiontype}, (?<callerIAM>[^\s]*), (?<authcontext>[^\s]*), \"(?<httpheaders>.*?)\", %{GREEDYDATA:payload}",

            "(?<timestamp>[\d]{13}), (?<clienthost>[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[\d]{4,5}), (?<serverhost>[a-z0-9\.-]*/?[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[\d]{4,5}), %{WORD:connectiontype}, (?<callerIAM>[^\s]*), (?<authcontext>[^\s]*), (?<httpheaders>.*?), \"%{GREEDYDATA:payload}\"" ] } }
        
        if "/status" in [mes***REMOVED***ge] or "/gremlin/profile" in [mes***REMOVED***ge] or "/gremlin/explain" in [mes***REMOVED***ge] or [payload] == "/gremlin" or "explain=dynamic" in [payload]
			{
			drop{}
			} 
        
        neptune_guardium_filter{}
    
    }

output {
stdout { codec => rubydebug }
      }
