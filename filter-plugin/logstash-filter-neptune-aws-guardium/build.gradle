import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply plugin: 'jacoco'
apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"

// ===========================================================================
// plugin info
// ===========================================================================
group                      'com.ibm.neptune.connector' // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "Neptune-Guardium filter plugin"
pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
pluginInfo.longDescription = "This gem is a Logstash Neptune filter plugin required to be installed as part of IBM Security Guardium, Guardium Univer***REMOVED***l connector configuration. This gem is not a stand-alone program."
pluginInfo.authors         = ['IBM', '']
pluginInfo.email           = ['']
pluginInfo.homepage        = "http://www.elastic.co/guide/en/logstash/current/index.html"
pluginInfo.pluginType      = "filter"
pluginInfo.pluginClass     = "NeptuneGuardiumFilter"
pluginInfo.pluginName      = "neptune_guardium_filter" // must match the @LogstashPlugin annotation in the main plugin class
// ===========================================================================


sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
  }
}

repositories {
    mavenCentral()
}

apply plugin: "com.github.johnrengelman.shadow"

shadowJar {
    classifier = null
}

dependencies {
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.5.1'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.2'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.8'
	implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
	implementation group: 'org.apache.tinkerpop', name: 'tinkergraph-gremlin', version: '3.5.2'
    implementation group: 'org.eclipse.rdf4j', name: 'rdf4j-queryparser-sparql', version: '3.7.7'
	

    implementation fileTree(dir: LOGSTASH_CORE_PATH, include: "build/libs/logstash-core-*.*.*.jar")
    implementation fileTree(dir: GUARDIUM_UNIVERSALCONNECTOR_COMMONS_PATH, include: "common-*.*.*.jar")
 
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation 'org.jruby:jruby-complete:9.2.19.0'
    
    testImplementation fileTree(dir: GUARDIUM_UNIVERSALCONNECTOR_COMMONS_PATH, include: "guardium-univer***REMOVED***lconnector-commons-master-?.?.?.jar")
    
   
   
   
    
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


clean {
    delete "${projectDir}/Gemfile"
    delete "${projectDir}/" + pluginInfo.pluginFullName() + ".gemspec"
    delete "${projectDir}/lib/"
    delete "${projectDir}/vendor/"
    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-?.?.?.gem").each { filename ->
        delete filename
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task vendor(dependsOn: shadowJar) {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        validatePluginJar(projectJarFile, project.group)
    }
}

task generateRubySupportFiles() {
    doLast {
        generateRubySupportFilesForPlugin(project.description, project.group, version)
    }
}

task removeObsoleteJars() {
    doLast {
        new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
            delete f
        }
    }
}

task gem(dependsOn: [downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles]) {
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}
jacocoTestReport {
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }
    
     afterEvaluate { // (optional) : to exclude classes / packages from coverage
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(
                dir: it,
                exclude: [ 'com/ibm/neptune/connector/constant', 'com/ibm/neptune/connector/config', 'com/ibm/neptune/connector/util'])
        })
    }
}
test.finalizedBy jacocoTestReport

