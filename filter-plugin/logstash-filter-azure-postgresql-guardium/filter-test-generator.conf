input {
   generator {
        count => 1
         lines => [
         '{"records": [{"time":"2024-03-01T13:59:49.3960000Z","properties":{"timestamp":"2024-03-01 13:59:49.395 UTC","processId":10614,"errorLevel":"LOG","sqlerrcode":"00000","message":"2024-03-01 13:59:49 UTC:122.169.72.218(64783):postgresdevdb@postgres:[10614]:DBeaver 23.3.5 - SQLEditor <Script.sql>:00000LOG:  00000: AUDIT: SESSION,71,1,WRITE,DELETE,,,Delete from Testing0103_1930 where DayId=10,<not logged>"},"resourceId":"\/SUBSCRIPTIONS\/529F8E5C-A47B-4FAE-A775-A6D685A89809\/RESOURCEGROUPS\/GUARDIUMDEV\/PROVIDERS\/MICROSOFT.DBFORPOSTGRESQL\/FLEXIBLESERVERS\/POSTGRESDEVDB","location":"eastus","category":"PostgreSQLLogs","operationName":"LogEvent"}]}',
         '{"records": [{"LogicalServerName": "mypssqlserver","SubscriptionId": "ae9b474e-c278-4d98-85ba-e3a7f057870b", "ResourceGroup": "myresourcegroup", "time": "2022-03-08T14:18:02Z","resourceId": "/SUBSCRIPTIONS/AE9B474E-C278-4D98-85BA-E3A7F057870B/RESOURCEGROUPS/MYRESOURCEGROUP/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/SERVERS/MYPSSQLSERVER", "category": "PostgreSQLLogs", "operationName": "LogEvent", "properties": {"prefix": "2022-03-08 14:18:02 UTC:183.87.60.14(43986):postgres@postgres:[5560]:psql:00000","message": "AUDIT: SESSION,13,1,WRITE,INSERT,,,INSERT INTO employee4 values (101, emp1, 3);,<none>","detail": "","errorLevel": "LOG","domain": "postgres-11","schemaName": "","tableName": "","columnName": "","datatypeName": ""}}]}',
         '{"records": [{"time":"2024-03-01T15:01:31.4180000Z","properties":{"timestamp":"2024-03-01 15:01:31.418 UTC","processId":409,"errorLevel":"LOG","sqlerrcode":"00000","message":"2024-03-01 15:01:31 UTC::@:[409]::00000LOG:  00000: AUDIT: SESSION,2145,1,READ,SELECT,,,SELECT 1,<not logged>"},"resourceId":"\/SUBSCRIPTIONS\/529F8E5C-A47B-4FAE-A775-A6D685A89809\/RESOURCEGROUPS\/GUARDIUMDEV\/PROVIDERS\/MICROSOFT.DBFORPOSTGRESQL\/FLEXIBLESERVERS\/POSTGRESDEVDB","location":"eastus","category":"PostgreSQLLogs","operationName":"LogEvent"}]}',
         '{"records": [{"time":"2024-03-01T13:59:49.3960000Z","properties": {"timestamp": "2024-03-28 05:15:50.503 UTC","processId": 446,"errorLevel": "LOG","sqlerrcode": "00000","message": "2024-03-28 05:15:50 UTC::@:[446]::00000LOG:  00000: AUDIT: SESSION,6873,1,WRITE,UPDATE,,,UPDATE public.lsnmover SET id = id+1, update_time=now();,<not logged>"}, "time": "2024-03-28T05:15:50.503Z", "resourceId": "\/SUBSCRIPTIONS/0D7348F2-27A0-4FD2-8A5E-D9B7DF304533/RESOURCEGROUPS/SYSTEMTESTRESOURCEGROUP/PROVIDERS/MICROSOFT.DBFORPOSTGRESQL/FLEXIBLESERVERS/210324-POSTGRESQL", "location": "eastus", "category": "PostgreSQLLogs", "operationName": "LogEvent"}]}'

         ]
		type => "azure_event_hub"
		add_field => {"enrollmentId" => "1234567"}
		}
	}


filter
{
	if [type] == "azure_event_hub"
		{
			json
				{
					source => "message"
			    }
            split
				{
					field => "records"
				}

				 if [records][properties][prefix]
                                    {
                                         mutate
                                         {
                                           add_field => {"pre_fix" => "%{[records][properties][prefix]}"}
                                         }
                                    }
                                    else
                                    {
                                         mutate
                                          {
                                            add_field => {"pre_fix" => "%{[records][properties][message]}"}
                                          }
                                    }
			mutate
				{
					add_field => {"tempmessage" => "%{[records][properties][message]}"}
					add_field => {"e_level" => "%{[records][properties][errorLevel]}"}
				}
                if [records][LogicalServerName]
                    {
                         mutate
                         {
                            add_field => {"server_instance_name" => "%{[records][LogicalServerName]}"}
                         }
                    }
                    else
                    {
                         mutate
                          {
                            add_field => {"resource" => "%{[records][resourceId]}"}
                          }
                          grok {
                                 match => { "resource" => ".*/%{GREEDYDATA:server_instance_name}" }
                                }
                    }
			grok
				{
					match => { "pre_fix" => "(?<timestamp>[^[A-Z]]*)[A-Z]{3}:(?<client_ip>[^:]*):(?<db_user>[^@]*)@(?<db_name>[^:]*):\[(?<session_id>[^\]]*)\]:(?<app_name>[^:]*):(?<sql_state>[^:]*)"}
				}
            if[timestamp] and [e_level]
			{

			if [db_name]
				{
					mutate
						{
							replace => { "db_name"=> "%{enrollmentId}:%{server_instance_name}:%{db_name}" }
						}
				}
			mutate
				{
					add_field => { "server_hostname" => "%{enrollmentId}_%{server_instance_name}" }
				}

			if [client_ip]
				{
					grok { match => {client_ip => "(?<clientIP>[^(]*)\((?<clientPort>[^)]*)"} }
				}
			if[e_level] == "LOG"
				{
					if[tempmessage] =~ "AUDIT"
					{

						if[tempmessage] =~ "FUNCTION"
							{
							grok{
									match => { "tempmessage" => "(?<audit>[^:]*):(?<session>[^:]*),%{GREEDYDATA:statement};%{GREEDYDATA:state}"}
								}
							}
						else{
							grok{
									match => { "tempmessage" => "(?<audit>[^:]*):(?<session>[^:]*),,%{GREEDYDATA:statement},%{GREEDYDATA:state}"}
								}
							}
					}
					else{
					drop {}
					}
				}
			if[e_level] == "ERROR"
				{
					if[tempmessage]
						{
							mutate
							{
								gsub => ["tempmessage","\"",""]
							}
						}
				}
			if[e_level] == "FATAL"
				{
					if[tempmessage]
						{
							mutate
							{
								gsub => ["tempmessage","\"",""]
							}
						}
				}
			if[pre_fix] =~ "azure_superuser" or [db_user] =~ "azuresu" or [statement] == "SELECT 1" or [statement] == "SELECT current_schema(),session_user" or [statement] == "UPDATE public.lsnmover SET id = id+1, update_time=now()" or [statement] =="UPDATE public.lsnmover SET id = id+1, update_time=now();" or [statement] == "SELECT version();"
				{
					drop {}
				}

			else{
					azure_postgresql_guardium_plugin_filter{}
					mutate {
                        gsub => [
                          "GuardRecord", "\\u0027", "'"
                          ]
                      }
				}
			   # Remove unnecessary fields
                prune {
                               whitelist_names => ["GuardRecord"]

                      }
		}
         else
			{
				drop{}
			}
	}
}


output {
stdout { codec => rubydebug }
}