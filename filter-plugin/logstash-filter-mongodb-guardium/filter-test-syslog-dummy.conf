input {
  generator { 
	  type => "syslog-mongodb"
	  #syslog_timestamp => "2020-01-26T10:47:41.225272-05:00"
      #"syslog_timestamp" => "Feb 18 08:53:31"
	  #"@timestamp" => 2020-02-18T13:53:31.314Z,
	  #"server_hostname" => "qa-db51"
	  #"source_program" => "mongod"
	  #syslog_pid => "pid?"
	  #syslog_message => "{ 'atype' : 'authCheck', 'ts' : { '$date' : '2020-01-26T10:47:41.225-0500' }, 'local' : { 'ip' : '(NONE)', 'port' : 0 }, 'remote' : { 'ip' : '(NONE)', 'port' : 0 }, 'users' : [], 'roles' : [], 'param' : { 'command' : 'listIndexes', 'ns' : 'config.system.sessions', 'args' : { 'listIndexes' : 'system.sessions', 'cursor' : {}, '$db' : 'config' } }, 'result' : 0 }"
	  lines => [
		  # Parsing should work, and add "Record" to event.
		  "<14>Feb 18 01:53:31 qa-db51 mongod: { 'atype' : 'authCheck', 'ts' : { '$date' : '2020-01-26T10:47:41.225-0500' }, 'local' : { 'ip' : '(NONE)', 'port' : 0 }, 'remote' : { 'ip' : '(NONE)', 'port' : 0 }, 'users' : [], 'roles' : [], 'param' : { 'command' : 'listIndexes', 'ns' : 'config.system.sessions', 'args' : { 'listIndexes' : 'system.sessions', 'cursor' : {}, '$db' : 'config' } }, 'result' : 0 }",
		  # skipped event, as parser only parses authCheck and authenticate events:
		  "<14>Feb 18 02:53:31 qa-db51 mongod: { 'atype' : 'createCollection', 'ts' : { '$date' : '2020-02-11T06:24:38.168-0400' } , 'local' : { 'ip' : '127.0.0.1', 'port' : 27017 } , 'remote' : { 'ip' : '127.0.0.1', 'port' : 48458 } , 'users' : [], 'roles' : [], 'param' : { 'ns' : 'test.collection3' } , 'result' : 0 }",
		  # skipped event, as not related to MongoDB:
		  "<14>Feb 18 03:53:32 qa-db51 ftp: message should be skipped by parser and tagged as such; not removed, as others may parse it",
		  # truncated (should show JSON parse error):
		  "<14>Feb 18 04:53:33 qa-db51 mongod: { 'atype' : 'authCheck', 'ts' : { '$date' : '2020-04-26T10:47:43.225-0500' }, 'local' : { 'ip' : '(NONE)', 'port' : 0 }, 'remote' : { 'ip' : '(NONE)', 'port' : 0 }, 'users' : [], 'roles' : [], 'param' : { 'command' : 'listIndexes', 'ns' : 'config.system.sessions', 'args' : { 'listIndexes' : 'system.sessions', 'cursor' : {}, '$db' : 'conf"
	  ]
	  # message => "2020-01-26T10:47:41.225272-05:00 qa-db51 mongod: { 'atype' : 'authCheck', 'ts' : { '$date' : '2020-01-26T10:47:41.225-0500' }, 'local' : { 'ip' : '(NONE)', 'port' : 0 }, 'remote' : { 'ip' : '(NONE)', 'port' : 0 }, 'users' : [], 'roles' : [], 'param' : { 'command' : 'listIndexes', 'ns' : 'config.system.sessions', 'args' : { 'listIndexes' : 'system.sessions', 'cursor' : {}, '$db' : 'config' } }, 'result' : 0 }" 
	  count => 1 
	  #"host" => "9.70.147.59" # sort of client IP; where syslogged from
	  #"@version" => "1",
  }
}
filter {

  if [type] == "syslog-mongodb" {
		grok { #TIMESTAMP_ISO8601
		#SYSLOGTIMESTAMP
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:server_hostname} %{SYSLOGPROG:source_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
		}
		date {
		  match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
		}
		#json { source => "syslog_message" }
		mongodb_guardium_filter {}
	} 
	
	#MongoDB Hard coded fields
	#mutate { add_field => { "db_protocol" => "MONGODB WIRE PROTOCOL" } }
	#mutate { add_field => { "server_type" => "MONGODB" } }
	
	#Fields extracted from the log
	# if [ts] { mutate { add_field => { "timestamp" => "%{[ts][$date]}" } } }
	
	# if [result] { mutate { rename => [ "result", "exception_type"] } } 

	# if [param] { #operation, database, resource_type, resource_name
		# mutate { add_field => { "resource_type" => "Collection" } } #todo- get this field from somewhere

		# if [param][command] { mutate { add_field => { "operation" => "%{[param][command]}" } } }
		# if [param][ns] { mutate { add_field => { "database" => "%{[param][ns]}" } } }
		# if [operation] == "find" and [param][args] {
		# 	mutate { add_field => { "resource_name" => "%{[param][args][find]}" } }

		# 	if [param][args][filter] { mutate { add_field => { "operation_args_filter" => "%{[param][args][filter]}" } } }
		# }
		# if [operation] == "listIndexes" {
		# 	mutate { add_field => { "resource_name" => "%{[param][args][cursor]}" } }
		# 	mutate { add_field => { "operation_args_listIndexes" => "%{[param][args][listIndexes]}" } }
		# }
		# if [operation] == "aggregate" {
		# 	mutate { add_field => { "resource_name" => "%{[param][args][aggregate]}" } }
		# }

		#if[param][args][lsid] { mutate { add_field => { "session_id" => "%{[param][args][lsid]}" } } }

	# }

	# if [remote] {
	# 	mutate { add_field => { "client_ip" => "%{[remote][ip]}" } }
	# 	mutate { add_field => { "client_port" => "%{[remote][port]}" } }
	# 	#mutate { add_field => { "client_hostname" => "" } }
	# }
	# if [local] {
	# 	mutate { add_field => { "server_ip" => "%{[local][ip]}" } }
	# 	mutate { add_field => { "server_port" => "%{[local][port]}" } }
	# }
	
	# if [users] {
	# 	mutate { add_field => { "db_user_name" => "%{[users]}" } }
	# }
	
	
	#missing fields:
	#mutate { add_field => { "exception_desc" => "" } }
	#mutate { add_field => { "source_program" => "" } }
	#mutate { add_field => { "client_os" => "" } }
	#mutate { add_field => { "server_os" => "" } }
	#mutate { add_field => { "app_user_name" => "" } }
	
	if "_mongoguardium_json_parse_error" not in [tags] {
		mutate { remove_field => [
			# "message", 
			"syslog_timestamp", 
			"source_program", "program", "syslog_pid",
			"syslog_message", 
			"server_hostname", "host" 
			]
		}
	}

}
output {
	if [GuardRecord] {
		stdout { codec => rubydebug }
	}
}