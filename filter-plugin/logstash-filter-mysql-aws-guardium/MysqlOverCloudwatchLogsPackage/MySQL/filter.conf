filter {
   if [type] == "aws_mysql" {
      #QUERIES
      mutate { gsub => ["message", "[\\]'", "'"] }

      csv {
         source => message
         separator => ","
         columns => ["dateTime","serverHostName","db_user","clientIp","connectionId","queryId","operation","dbName","originalSqlCommand","returnCode","connectionType"]
         autogenerate_column_names => false
         quote_char => "'"
      }
      if [dateTime] {
         grok { match =>{"dateTime" => "(?<yy>\d{4})(?<mm>\d{2})(?<dd>\d{2})\s%{TIME:time}" } }
      }

      if "_csvparsefailure" in [tags] {
         grok { match => {"message" => "(?<yy>\d{4})(?<mm>\d{2})(?<dd>\d{2})\s%{TIME:time}(,)(?<serverHostname>[^,]*)(,)%{USER:db_user}(,)%{IPV4:clientIp}(,)%{NUMBER:connectionId}(,)%{NUMBER:queryId}(,)%{WORD:operation}(,)([']?)([`]?)(%{WORD:dbName})?([']?)([`]?)(,)(')*([']?)(?<originalSqlCommand>.*)[']+,(?<returnCode>[0-9]+),(?<id>[0-9]+)?,(%{GREEDYDATA})?"} }
      }
      else if "MalformedCSVError" in [tags] {
         grok { match => {"message" => "(?<yy>\d{4})(?<mm>\d{2})(?<dd>\d{2})\s%{TIME:time}(,)(?<serverHostname>[^,]*)(,)%{USER:db_user}(,)%{IPV4:clientIp}(,)%{NUMBER:connectionId}(,)%{NUMBER:queryId}(,)%{WORD:operation}(,)([']?)([`]?)(%{WORD:dbName})?([']?)([`]?)(,)(')*([']?)(?<originalSqlCommand>.*)[']+,(?<returnCode>[0-9]+),(?<id>[0-9]+)?,(%{GREEDYDATA})?"} }
      }

      mutate { add_field => { "myTimestamp" => "%{yy}-%{mm}-%{dd}T%{time}Z" } }
      date {
         match => ["myTimestamp", "ISO8601"]
         target => "finalTime"
      }
      ruby { code => "event.set('[GuardRecord][time][timstamp]', event.get('finalTime').to_i * 1000)" }

      mutate {add_field => { "logGroup" => "%{[cloudwatch_logs][log_group]}" } }
      grok { match => { "logGroup" => "(?<data11>[^\/]*)\/(?<data12>[^\/]*)\/(?<data13>[^\/]*)\/(?<data14>[^\/]*)\/(?<instance>[^\/]*)\/(?<data15>[^\/]*)" } }

      if [operation] == "QUERY" and [returnCode] == "0" {
         mutate {
            gsub => ["originalSqlCommand", '\'', '\"']
            gsub => ["originalSqlCommand", "\\n", " "]
            gsub => ["originalSqlCommand", "\\t", ""]
            gsub => ["originalSqlCommand", "[\\]", ""]
         }
         mutate { add_field => { "[GuardRecord][data][originalSqlCommand]" => "%{originalSqlCommand}" } }
      }
      else if [operation] == "FAILED_CONNECT" {
         mutate {
            add_field => {
               "[GuardRecord][exception][exceptionTypeId]" => "LOGIN_FAILED"
               "[GuardRecord][exception][sqlString]" => "%{operation}"
               "[GuardRecord][exception][description]" => "The Query has failed with Error code %{returnCode}"
            }
         }
      }

      else if [returnCode] != "0" {
         mutate {
            add_field => {
               "[GuardRecord][exception][exceptionTypeId]" => "SQL_ERROR"
               "[GuardRecord][exception][sqlString]" => "%{originalSqlCommand}"
               "[GuardRecord][exception][description]" => "The Query has failed with Error code %{returnCode}"
            }
         }
      }
      else {
         mutate { add_field => { "[GuardRecord][data][originalSqlCommand]" => "%{operation}" } }
      }
      if [clientIp] {
         mutate { add_field => { "[GuardRecord][sessionLocator][clientIp]" => "%{clientIp}" } }
      }
      else {
         mutate { add_field => { "[GuardRecord][sessionLocator][clientIp]" => "0.0.0.0" } }
      }
      if [db_user] {
         mutate { add_field => { "[GuardRecord][accessor][dbUser]" => "%{db_user}" } }
      }
      else {
         mutate { add_field => { "[GuardRecord][accessor][dbUser]" => "NA" } }
      }
      mutate {
         add_field => {
            "[GuardRecord][sessionLocator][serverIp]" => "0.0.0.0"
            "[GuardRecord][sessionLocator][serverPort]" => "-1"
            "[GuardRecord][sessionLocator][clientPort]" => "-1"
            "[GuardRecord][accessor][dbProtocol]" => "MYSQL"
            "[GuardRecord][accessor][dataType]" => "TEXT"
            "[GuardRecord][accessor][language]" => "MYSQL"
            "[GuardRecord][accessor][serverType]" => "MySql"
            "[GuardRecord][accessor][serverOS]" => ""
            "[GuardRecord][accessor][clientOs]" => ""
            "[GuardRecord][accessor][clientHostName]" => ""
            "[GuardRecord][accessor][commProtocol]" => ""
            "[GuardRecord][accessor][dbProtocolVersion]" => ""
            "[GuardRecord][accessor][osUser]" => ""
            "[GuardRecord][accessor][sourceProgram]" => ""
            "[GuardRecord][accessor][client_mac]" => ""
            "[GuardRecord][accessor][serverDescription]" => ""
            "[GuardRecord][time][minOffsetFromGMT]" => "0"
            "[GuardRecord][time][minDst]" => "0"
            "[GuardRecord][sessionLocator][isIpv6]" => "false"
         }
      }
      if [instance] {
         mutate { add_field => { "instanceName" => "%{instance}" } }
      }
      else {
         mutate { add_field => { "instanceName" => "" } }
      }
      if [dbName] {
         mutate { add_field => { "[GuardRecord][dbName]" => "%{account_id}:%{instanceName}:%{dbName}" } }
         mutate { add_field => { "[GuardRecord][accessor][serviceName]" => "%{account_id}:%{instanceName}:%{dbName}" } }
      }
      else {
         mutate {add_field => { "[GuardRecord][dbName]" => "%{account_id}:%{instanceName}" } }
         mutate {add_field => { "[GuardRecord][accessor][serviceName]" => "%{account_id}:%{instanceName}" } }
      }
      mutate { add_field => { "[GuardRecord][accessor][serverHostName]" => "%{account_id}_%{instanceName} " } }

      mutate { remove_field => [ "message", "object", "@version", "cloudwatch_logs", "operation", "type", "data","account_id", "data13", "instance", "dbName", "data14", "logGroup", "data15", "data12", "yy", "mm", "dd" , "myTimestamp" , "finalTime" ,
            "@timestamp", "returnCode", "queryId", "connectionId", "event", "dateTime", "serverHostName", "connectionType", "time", "originalSqlCommand", "host" ] }

      json_encode {
         source => "[GuardRecord]"
         target => "[GuardRecord]"
      }
   }