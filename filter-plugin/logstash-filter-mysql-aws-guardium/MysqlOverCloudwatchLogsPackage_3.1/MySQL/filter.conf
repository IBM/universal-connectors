filter {
  if [type] == "aws_mysql" {
  #QUERIES
  if "QUERY" in [mes***REMOVED***ge] {
    grok {
      match => {
        "mes***REMOVED***ge" => "([0-9]+\s)%{TIME}(,)(ip-\d{1,3}-\d{1,3}-\d{1,3}-\d{1,3},)%{USER:db_user}(,)%{IPV4:clientIp}(,)%{NUMBER}(,)%{NUMBER}(,)%{WORD:operation}(,)([']?)([`]?)(%{WORD:dbName})?([']?)([`]?)(,)(')*([']?)(?<originalSqlCommand>.*)([']+,[0-9]+)"
      }
    }
  }
  #CONNECT / DISCONNECT
  else if "DISCONNECT" in [mes***REMOVED***ge] or "CONNECT" in [mes***REMOVED***ge] {
    grok {
      match => {
        "mes***REMOVED***ge" => "([0-9]+\s)%{TIME}(,)(ip-\d{1,3}-\d{1,3}-\d{1,3}-\d{1,3},)(%{USER:db_user})?(,)%{IPV4:clientIp}(,)%{NUMBER}(,)%{NUMBER}(,)%{WORD:operation}(,)([']?)([`]?)(%{WORD:dbName})?([']?)([`]?)(,,0)(,)?([^,]*)"
      }
    }
  }
  # "Access denied"
  else {
    grok {
      match => {
        "mes***REMOVED***ge" => "%{TIMESTAMP_ISO8601}(\s)+(?<data>%{NUMBER}(\s)([^\s]+)(\s)+([^']*)(')%{WORD:db_user}%{GREEDYDATA})"
      }
    }
  }

  mutate {
    add_field => {
      "sessionLocator" => {}
      "time" => {}
      "accessor" => {}
      "data" => {}
      "ExceptionRecord" => {}
      "GuardRecord" => {}
      "serverIp" => "0.0.0.0"
      "serverPort" => "-1"
      "clientPort" => "3306"
    }
  }
  mutate {
    rename => {
      "serverIp" => "[GuardRecord][sessionLocator][serverIp]"
      "serverPort" => "[GuardRecord][sessionLocator][serverPort]"
      "clientPort" => "[GuardRecord][sessionLocator][clientPort]"
      "clientIp" => "[GuardRecord][sessionLocator][clientIp]"
      "@timestamp" => "[GuardRecord][time][timestamp]"
      "db_user" => "[GuardRecord][accessor][dbUser]"
      "dbName" => "[GuardRecord][dbName]"
    }
    add_field => {
      "[GuardRecord][sessionId]" => "%{[cloudwatch_logs][event_id]}"
      "[GuardRecord][accessor][dbProtocol]" => "MySQL native audit"
      "[GuardRecord][accessor][dataType]" => "TEXT"
      "[GuardRecord][accessor][language]" => "MYSQL"
      "[GuardRecord][accessor][serverType]" => "MySql"
      "[GuardRecord][accessor][serverOS]" => ""
      "[GuardRecord][accessor][clientOs]" => ""
      "[GuardRecord][accessor][clientHostName]" => ""
      "[GuardRecord][accessor][serverHostName]" => "rds.mysql.amazonaws.com"
      "[GuardRecord][accessor][commProtocol]" => ""
      "[GuardRecord][accessor][dbProtocolVersion]" => ""
      "[GuardRecord][accessor][osUser]" => ""
      "[GuardRecord][accessor][sourceProgram]" => ""
      "[GuardRecord][accessor][client_mac]" => ""
      "[GuardRecord][accessor][serverDescription]" => ""
      "[GuardRecord][accessor][serviceName]" => ""
      "[GuardRecord][time][minOffsetFromGMT]" => "0"
      "[GuardRecord][time][minDst]" => "0"
      "[GuardRecord][sessionLocator][isIpv6]" => "false"
    }
  }
#Exceptions
  if "Access denied" in [mes***REMOVED***ge] {
    mutate {
      add_field => {
        "[GuardRecord][exception][exceptionTypeId]" => "LOGIN_FAILED"
        "[GuardRecord][exception][sqlString]" => ""
        "[GuardRecord][exception][description]" => "%{data}"
      }
    }
  } else if "QUERY" in [mes***REMOVED***ge] {
    mutate {
      gsub => ["originalSqlCommand", "'", "\""]
      gsub => ["originalSqlCommand", "[\\]", ""]
      add_field => {
        "[GuardRecord][data][originalSqlCommand]" => "%{originalSqlCommand}"
      }
    }
  } else if "DISCONNECT" in [mes***REMOVED***ge] or "CONNECT" in [mes***REMOVED***ge] {
    mutate {
      add_field => {
        "[GuardRecord][data][originalSqlCommand]" => "%{operation}"
      }
    }
  }
  else {
    drop {}
  }
  if "_grokparsefailure" in [tags] {
    drop {}
  }
mutate {
  remove_field => [ "mes***REMOVED***ge", "object", "@version", "cloudwatch_logs", "operation", "type", "data" ]
 }
  json_encode {
    source => "[GuardRecord]"
    target => "[GuardRecord]"
      } 
  }
}