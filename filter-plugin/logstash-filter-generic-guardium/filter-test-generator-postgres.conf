input{
	generator {
        lines => [
			"2020-10-22 11:53:26 UTC:183.87.237.49(63661):postgres@testDB:[17796]:LOG:  00000: AUDIT: SESSION,27,1,WRITE,DELETE,,,DELETE FROM employee WHERE emp_id  = 101,<none>,
			2020-10-22 11:53:26 UTC:183.87.237.49(63661):postgres@testDB:[17796]:LOCATION:  log_audit_event, pgaudit.c:760"
        ]
	codec => multiline {
          pattern => "(((?<ts>[^[A-Z]{3}]*)UTC:(?<client_ip>[^:]*):(?<db_user>[^@]*)@(?<db_name>[^:]*):(?<session_id>[^:*]*):(?<logger>LOCATION|DETAIL|STATEMENT|HINT):%{GREEDYDATA:sql_full_log})|(^\s))"
          negate => false
          what => "previous"
        }
	type => "test"
	count => 1
	}
}

filter {
   if [type]=="test" {
 	grok { match => { "mes***REMOVED***ge" => "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time} (?<zone>[^:]*):(?<client_ip>[^:]*):(?<addDbUser>[^@]*)@(?<addDbName>[^:]*):\[(?<addSessionId>[^\]]*)\]:%{GREEDYDATA:sql_full_log}" } }
	
	

	mutate { add_field => { "addTimestamp" => "%{year}-%{month}-%{day} %{time} %{zone}" } } 
	
	
	if [sql_full_log] =~ "ERROR:" or [sql_full_log] =~ "FATAL:" {
		grok { match => {"sql_full_log" => "(?<error>[^:]*): (?<addSqlState>[^:]*): (?<addDescription>[^[0-9]{4}]*)%{GREEDYDATA:rest}" } }

		mutate{ split => {sql_full_log => ":STATEMENT:"} }
		
		if [sql_full_log][1] { mutate { add_field => { "addSqlString" => "%{[sql_full_log][1]}" } } }		
	}
	
	else if [sql_full_log] =~  /(?i)log:/ {
		grok { match => { "sql_full_log" => "(?<log>[^:]*): (?<sql_state>[^:]*): (?<log_level>[^:]*): %{GREEDYDATA:audit_data},<none>" } }
		
		mutate { gsub => ["audit_data", ",<none>", ""] }
		
		grok { match => {"audit_data" => 
		"(?<data1>[^,]*),(?<data2>[^,]*),(?<data3>[^,]*),(?<data4>[^,]*),(?<data5>[^,]*),(?<data6>[^,]*),(?<data7>[^,]*),(?<query_details>[^;]*)"} }
		
		
		if [query_details] {
			mutate { 
				gsub => ["query_details", "\"", ""]
			    add_field => { "addOriginalSqlCommand" => "%{query_details}" } }
		}
		else { drop { } }
	}
	
	if [client_ip] { grok { match => {client_ip => "(?<addClientIP>[^(]*)\((?<addClientPort>[^)]*)"} } }
	
	mutate {add_field => { "addAppUserName" => "AWSService" } }
	mutate { add_field => {"addServerType" => "Postgre"} }
	mutate { add_field => {"addCommProtocol" => "AwsApiCall"} }
	mutate { add_field => {"addDbProtocol" => "Postgre AWS Native Audit" } }
	mutate { add_field => {"addLanguage" => "PGRS" } }
	mutate { add_field => {"addDataType" => "TEXT" } }
	
	generic_guardium_filter{}
	
	
	mutate { remove_field => ["cloudwatch_logs", "rest_data", "tags", "clientIP", "session_id","db_name", "client_ip", "error_description", "log", "log_level", "data1", "data2", "data3", "data4", "data5", "data6", "data7", "db_user", "year", "month", "day","time", "ts", "epoc", "@timestamp", "@version", "error", "sql_state", "description", "rest", "type", "sequence"] }
	}
 }
output {
	stdout { codec => rubydebug }
}
