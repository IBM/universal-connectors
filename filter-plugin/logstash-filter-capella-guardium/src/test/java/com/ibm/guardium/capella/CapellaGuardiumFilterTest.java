package com.ibm.guardium.capella;

import co.elastic.logstash.api.Event;
import co.elastic.logstash.api.FilterMatchListener;
import co.elastic.logstash.api.Configuration;
import co.elastic.logstash.api.Context;
import org.logstash.plugins.ConfigurationImpl;
import org.logstash.plugins.ContextImpl;
import org.junit.jupiter.api.Test;

import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.assertNotNull;

class CapellaGuardiumFilterTest {

    FilterMatchListener matchListener = new TestMatchListener();

    String id = "1";
    Configuration config = new ConfigurationImpl(Collections.singletonMap("source", ""));
    Context context = new ContextImpl(null, null);
    CapellaGuardiumFilter filter = new CapellaGuardiumFilter(id, config, context);

    /**
     * testFilterPluginHasGuardRecord smoke tests "GuardRecord" is generated by the filter plugin
     */
    @Test
    void testFilterPluginHasGuardRecord() {
        String payload = "test";
        Event event = new org.logstash.Event();
        event.setField("message", payload);
        Collection<Event> actualResponse = filter.filter(Collections.singletonList(event), matchListener);

        assertNotNull(actualResponse.toArray(new Event[0])[0].getField("GuardRecord"));
    }


    class TestMatchListener implements FilterMatchListener {
        private AtomicInteger matchCount = new AtomicInteger(0);

        public int getMatchCount() {
            return matchCount.get();
        }

        @Override
        public void filterMatched(co.elastic.logstash.api.Event arg0) {
            matchCount.incrementAndGet();

        }
    }
}
