input{
s3 {
bucket =>"<bucket_name>" #Name of S3 bucket
region =>"<region>"  #AWS region where the Redshift/Bucket is configured
access_key_id =>"<ACCESS_KEY>"  # AWS ACCESS Key required for authentication
secret_access_key =>"<SECRET_ACCESS_KEY>"  #AWS Secret Key required for authentication 
type =>"redS" # type field, value should be ***REMOVED***me as used in filter part. 
prefix =>"<prefix/>"  # Prefix for log location, helps in selecting all logs in the bucket.

# multiline codec helps in concatenating multiline log in single event
codec => multiline {
      pattern => "((^'%{TIMESTAMP_ISO8601:timestamp})|(^(?<action>[^:]*) \|%{DAY:day}\, %{MONTHDAY:md} %{MONTH:month} %{YEAR:year} %{TIME:time}))"
      negate => true
      what => "previous"
    }
}
}filter 
{
if [type] == "redS" {
mutate 
{
# The user needs to provide the value for account_id (AWS account id) and cluster_name
# example, 937596413546_redshift-clustest-test
replace => { "serverHostnamePrefix" => "<account_id>-<cluster_name>" }
replace => { "dbprefix" => "<account_id>:<cluster_name>" }
}
if "::" in [mes***REMOVED***ge] { 
grok {
match => {"mes***REMOVED***ge" => ["(?<action>[^:]*) \|%{DAY:day}\, %{MONTHDAY:md} %{MONTH:month} %{YEAR:year} %{TIME:time}\|(?<remotehost>[^\s]*) \|(?<remoteport>[^\s]*) \|(?<pid>[^\s]*)\|(?<dbname>[^\s]*) \|(?<username>[^\s]*) \|(?<authmethod>[^:]*) \|%{NUMBER:duration}\|(?<sslversion>[^\s]*) \|(?<sslcipher>[^:]*) \|(?<mtu>[^\s]*)\|%{SPACE:sslcompression}\|%{SPACE:sslexpansion}\|%{SPACE:iamauthguid}\|(?<application_name>[^:]*) \|(?<os_version>[^:]*) \|(?<driver_version>[^:]*) \|(?<plugin_name>[^:]*) \|(?<protocol_version>[^:]*)\|(?<id>[^:]*)",
"(?<action>[^:]*) \|%{DAY:day}\, %{MONTHDAY:md} %{MONTH:month} %{YEAR:year} %{TIME:time}\|(?<remotehost>[^\s]*) \|(?<remoteport>[^\s]*) \|(?<pid>[^\s]*)\|(?<dbname>[^\s]*) \|(?<username>[^\s]*) \|(?<authmethod>[^:]*) \|(?<duration>[^\s]*)\|(?<sslversion>[^\s]*) \|(?<sslcipher>[^\s]*) \|(?<mtu>[^\s]*)\|%{SPACE:sslcompression}\|%{SPACE:sslexpansion}\|(?<iamauthguid>[^\s]*) \|(?<applicationname>[^:]*) \|(?<os_version>[^:]*) \|(?<driverversion>[^:]*) \|%{SPACE:plugin_name} \|(?<protocolversion>[^:]*)\|(?<id>[^\s]*)"
]
}
}
}
if "LOG:" in [mes***REMOVED***ge] {
grok {
match => {"mes***REMOVED***ge" => "\'%{TIMESTAMP_ISO8601:timestamp} %{TZ:timezone}\s\[\s(?<dbtype>[^\s]*)=(?<dbname>[^\s]*)\s(?<usertype>[^\s]*)=(?<user>[^\s]*)\s(?<pidtype>[^\s]*)=(?<pid>[^\s]*)\s(?<useridtype>[^\s]*)=(?<userid>[^\s]*)\s(?<xidtype>[^\s]*)=(?<xid>[^\s]*)\s\]\'\s%{GREEDYDATA:sql_query}"
}
}
}
redshift_guardium_connector{}
}
}
