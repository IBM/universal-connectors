import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"

// ===========================================================================
//                             plugin info
// ===========================================================================
group                      "com.ibm.guardium.redshift" // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "Redshift-Guardium filter plugin"
pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
pluginInfo.longDescription = "This gem is a Logstash Redshift filter plugin required to be installed as part of IBM Security Guardium, Guardium Universal connector configuration. This gem is not a stand-alone program."
pluginInfo.authors         = ['IBM']
pluginInfo.email           = ['']
pluginInfo.homepage        = "http://www.elastic.co/guide/en/logstash/current/index.html"
pluginInfo.pluginType      = "filter"
pluginInfo.pluginClass     = "RedShiftGuardiumConnector"
pluginInfo.pluginName      = "redshift_guardium_connector" // must match the @LogstashPlugin annotation in the main plugin class
// ===========================================================================

sourceCompatibility = 1.8
targetCompatibility = 1.8

def jacocoVersion = '0.8.4'
// minimumCoverage can be set by Travis ENV
def minimumCoverageStr = System.getenv("MINIMUM_COVERAGE") ?: "50.0%"
if (minimumCoverageStr.endsWith("%")) {
    minimumCoverageStr = minimumCoverageStr.substring(0, minimumCoverageStr.length() - 1)
}
def minimumCoverage = Float.valueOf(minimumCoverageStr) / 100

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath "org.barfuin.gradle.jacocolog:gradle-jacoco-log:3.0.0-RC2"

    }
}

repositories {
    mavenCentral()
}

tasks.register("vendor"){
    dependsOn shadowJar
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        validatePluginJar(projectJarFile, project.group)
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    classifier = null
}

dependencies {

    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.apache.commons:commons-lang3:3.7'

    testImplementation group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation 'org.jruby:jruby-complete:9.2.7.0'
    testImplementation 'junit:junit:4.12'

    implementation fileTree(dir: GUARDIUM_UNIVERSALCONNECTOR_COMMONS_PATH, include: "common-*.*.*.jar")
    implementation fileTree(dir: LOGSTASH_CORE_PATH, include: "build/libs/logstash-core-*.*.*.jar")
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'



    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20231013'

    testImplementation fileTree(dir: GUARDIUM_UNIVERSALCONNECTOR_COMMONS_PATH, include: "common-*.*.*.jar")
}

clean {
    delete "${projectDir}/Gemfile"
    delete "${projectDir}/" + pluginInfo.pluginFullName() + ".gemspec"
    delete "${projectDir}/lib/"
    delete "${projectDir}/vendor/"
    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-*.*.*.gem").each { filename ->
        delete filename
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}



tasks.register("generateRubySupportFiles") {
    doLast {
        generateRubySupportFilesForPlugin(project.description, project.group, version)
    }
}

tasks.register("removeObsoleteJars") {
    doLast {
        new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
            delete f
        }
    }
}

tasks.register("gem"){
    dependsOn = [downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles]
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}

tasks.register("copyDependencyLibs", Copy){
    into "dependenciesLib"
    from configurations.compileClasspath
    from configurations.runtimeClasspath
    from configurations.testCompileClasspath
    from configurations.testRuntimeClasspath
}

apply plugin: 'jacoco'
//apply plugin: 'org.barfuin.gradle.jacocolog' version '2.0.0'
apply plugin: "org.barfuin.gradle.jacocolog"
// ------------------------------------
// JaCoCo is a code coverage tool
// ------------------------------------
jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDir = file("$buildDir/reports/jacoco")
}
jacocoTestReport {
    // You will see "Report -> file://...." at the end of a JaCoCo build
    // If no output, run this first:   ./gradlew test
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/reports/jacoco")
        csv.destination file("${buildDir}/reports/jacoco/all.csv")
    }
    executionData.from fileTree(dir: "${buildDir}/jacoco/", includes: [
            '**/*.exec'
    ])
    afterEvaluate {
        // objective is to test TicketingService class
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [])
        }))
    }
    doLast {
        println "Report -> file://${buildDir}/reports/jacoco/index.html"
    }
}
test.finalizedBy jacocoTestReport
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = minimumCoverage
            }
        }
    }
    executionData.from fileTree(dir: "${buildDir}/jacoco/", includes: [
            '**/*.exec'
    ])
    afterEvaluate {
        // objective is to test TicketingService class
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [])
        }))
    }
}
project.tasks.check.dependsOn(jacocoTestCoverageVerification, jacocoTestReport)