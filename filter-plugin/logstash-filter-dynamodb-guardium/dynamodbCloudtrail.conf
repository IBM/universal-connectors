#
# Copyright 2022-2023 IBM Inc. All rights reserved
# SPDX-License-Identifier: Apache2.0
#


input {
  s3 {
	#Mandatory arguments:
	#Insert the access key and secret that has access to the Bucket
	access_key_id => "<ACCESS-KEY>"
	secret_access_key => "<SECRET-KEY>"
	region => "<REGION>" #Region that has the DB, Default value: us-east-1
    bucket => "<BUCKET_NAME>" #This is Bucket cnfigured while creating CloudTrail
    interval => 5
	type => 'CloudTrail'
    codec => cloudtrail {}
	#Insert the account id of the AWS account where dynamodb is present.
	add_field => {"account_id" => "<ACCOUNT_ID>"}
	#Prefix is an optional parameter to speed up the data fetching from S3. If all the tables related to the cloudTrail are in the same Region, then add the value as  prefix => "AWSLogs/399998888666/CloudTrail/ap-south-1/" The value can be confirmed on S3 buckets page in AWS.
	prefix => "<PREFIX>"  # for e.g., "AWSLogs/<Account_ID>/<Tables_Region>/"
  }
}

filter {
	if [type] == 'CloudTrail' { 
		if [eventTime] {
			mutate {add_field => {"[message][eventTime]" => "%{eventTime}"}}
		}
		else {
			ruby {
				code => 'event.set("eventTime", event.get("@timestamp"))'
			}
			mutate { 
				convert => { "eventTime" => "string" } 
				add_field => {"[message][eventTime]" => "%{eventTime}"}
			}
		}
	
		if [eventName] {
			mutate {add_field => {"[message][eventName]" => "%{eventName}"}}
		}
	
		if [sourceIPAddress] {
			mutate {add_field => {"[message][sourceIPAddress]" => "%{sourceIPAddress}"}}
		}
	
		if [userAgent] {
			mutate {add_field => {"[message][userAgent]" => "%{userAgent}"}}
		}
	
		if [requestID] {
			mutate {add_field => {"[message][requestID]" => "%{requestID}"}}
		}
	
		if [userIdentity] {
			mutate {add_field => {"[message][userIdentity]" => "%{userIdentity}"}}
		}
	
		if [requestParameters] {
			mutate {add_field => {"[message][requestParameters]" => "%{requestParameters}"}}
		}
	
		if [eventSource] {
			if[eventSource] =~ "dynamodb.amazonaws.com" {
				mutate {add_field => {"[message][eventSource]" => "%{eventSource}"}}
			}
			else {
				drop {}
			}
		}
	
		ruby { code => 'event.set("message", event.get("message").to_s)' }
	
		dynamodb_guardium_plugin_filter {}
	
		prune { whitelist_names => [ "GuardRecord" ] }
	}
}
