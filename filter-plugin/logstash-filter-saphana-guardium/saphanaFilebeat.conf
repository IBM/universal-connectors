input
{
beats {
        port => "5244"
        type => "filebeat"
    } 
}
filter
{
if [type] == "filebeat" and "saphana" in [tags]  {

mutate {add_field => { "Offset" => "%{[event][timezone]}" }}

	csv {
		separator => ";"
		columns => ["ts","SID","Hostname","SERVICE_NAME","Instance_Number","Port_Number","Client_IP","Client_Name","Client_ProcessID","Client_Port_Number","Policy_Name","Audit_Level","Audit_Action","Active_User","Target_Schema","Target_Object","Privilege_Name","Grantable","Role_Name","Target_Principal","Action_Status","Component","Section","Parameter","Old_Value","New_Value","Executed_Statement","Session_ID","Application_username","Comment","c1","c2","c3","Schema_NAME","SOURCE_PROGRAM"]
		
		autogenerate_column_names => false
	}
	
	if "_csvparsefailure" in [tags] {
		grok { match => { "message" => "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time};(?<SID>[^;]*);(?<Hostname>[^;]*);(?<SERVICE_NAME>[^;]*);(?<Instance_Number>[^;]*);(?<Port_Number>[^;]*);(?<Client_IP>[^;]*);(?<Client_Name>[^;]*);(?<Client_ProcessID>[^;]*);(?<Client_Port_Number>[^;]*);(?<Policy_Name>[^;]*);(?<Audit_Level>[^;]*);(?<Audit_Action>[^;]*);(?<Active_User>[^;]*);(?<Target_Schema>[^;]*);(?<Target_Object>[^;]*);(?<Privilege_Name>[^;]*);(?<Grantable>[^;]*);(?<Role_Name>[^;]*);(?<Target_Principal>[^;]*);(?<Action_Status>[^;]*);(?<Component>[^;]*);(?<Section>[^;]*);(?<Parameter>[^;]*);(?<Old_Value>[^;]*);(?<New_Value>[^;]*);(?<Executed_Statement>[^;]*);(?<Session_ID>[^;]*);(?<Application_username>[^;]*);(?<Comment>[^;]*);(?<c1>[^;]*);(?<c2>[^;]*);(?<c3>[^;]*);(?<Schema_NAME>[^;]*);" } }
		mutate {add_field => {"ts" => "%{year}-%{month}-%{day} %{time}" } }
	}

	fingerprint {
       source => ["ts", "Session_ID", "Executed_Statement"]
	   concatenate_sources => true
	}
			
	mutate {
		add_field => { "serverIP" => "%{[@metadata][ip_address]}" }
	}
	if[beat][timezone]
	{		
		mutate { add_field => { "TZ" => "%{[beat][timezone]}" } }
	}
	else{
		mutate { add_field => { "TZ" => "%{[event][timezone]}" } }
	}					
			
	grok { match => { "TZ" => "(?<minutes>[^:]*):(?<seconds>[^,]*)" } }
	grok { match => { "minutes" => "(?<offset_diff>[^[0-9]]*)%{GREEDYDATA:actual_minutes}" } }
	
	
	ruby { code => "event.set('minutes1', event.get('actual_minutes').to_i * 60)" }
	ruby { code => "event.set('offset1', event.get('minutes1') +  event.get('seconds').to_i)" }
	
	mutate { add_field => { "totalOffset" => "%{offset_diff}%{offset1}" } }		
			
	saphana_guardium_plugin_filter{}
			
	mutate{ remove_field =>
	["totalOffset","offset1","minutes1","actual_minutes","offset_diff","seconds","minutes","TZ","serverIP","Executed_Statement","Session_ID","Application_username","Comment","SOURCE_PROGRAM","Schema_NAME","message","fingerprint","@version","@timestamp","type","sequence","host","ts","SERVICE_NAME","Hostname","SID","Instance_Number","Port","Client_IP","Client_Name","Client_ProcessID","Client_Port_Number","Policy_Name","Audit_Level","Audit_Action","Active_User","Target_Schema","Target_Object","Privilege_Name","Grantable","Role_Name","Target_Principal","Action_Status","Component","Section","Parameter","Old_Value","New_Value","tags","c1","c2","c3"]}
			
	}
}
