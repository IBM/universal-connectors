input{
      generator {
    type => "greenplumdb"
    lines => [
'2022-08-26 09:27:30.084969 UTC,"ec2-user","template1",p1897,th-1600923520,"172.31.7.158",54792,2022-08-26 09:27:30 UTC,0,con7,cmd1,seg0,,dx4,,sx1,"LOG","00000","statement: CREATE DATABASE gpdb;",,,,,,CREATE DATABASE gpdb;,0,,"postgres.c",1243,'
    ]
    count => 1
    add_field => {"timezone" => "-04:00"}
    }
}

filter{
  if [type]== "greenplumdb" {
    if !(( "auth.c" in [message] or "elog.c" in [message] or "postgres.c" in [message]) and !("pg_prepared_xacts" in [message] or "pg_catalog" in [message] or "DTM protocol" in [message] or "client_min_messages" in [message] or "datestyle" in [message] or "CLIENT_MIN_MESSAGES" in [message] or "pg_type" in [message] or "version()" in [message] or "pg_stat_activity" in [message] or "CLIENT_ENCODING" in [message] or "pg_get_keywords" in [message] or "pg_cancel_backend" in [message]))
	{
	   drop{}
	}
	mutate
	{
	add_field => { "min_Off" => "%{[timezone]}" }
	add_field => {"server_hostname" => "%{[host][name]}"}
	add_field => {"server_ip" => "%{[@metadata][ip_address]}"}
	}
	grok{
	  match => {"message" => "(?<event_time>[\d]{4}[-][\d]{1,2}[-][\d]{1,2}[ ][\d]{1,2}[:][\d]{1,2}[:][\d]{1,2}\.[\d]{6}[ ][A-Z]{2,5}),\"(?<user_name>[^\s]*)\",\"(?<database_name>[^\s]*)\",(?<process_id>[^\s]*),(?<thread_id>[^\s]*),\"(?<remote_host>[^\s]*)\",(?<remote_port>[^\s]*),(?<session_start_time>[\d]{4}[-][\d]{1,2}[-][\d]{1,2}[ ][\d]{1,2}[:][\d]{1,2}[:][\d]{1,2}[ ][A-Z]{2,5}),(?<transaction_id>[^\s]*),(?<gp_session_id>[^\s]*),(?<gp_command_count>[^\s]*),(?<gp_segment>[^\s]*),(?<slice_id>[^\s]*),(?<distr_tranx_id>[^\s]*),(?<local_tranx_id>[^\s]*),(?<sub_tranx_id>[^\s]*),\"(?<event_severity>[^\s]*)\",\"(?<sql_state_code>[^\s]*)\",\"(?<event_message>%{GREEDYDATA})\",(?<event_detail>.*?),(?<event_hint>[^\s]*),(?<internal_query>[^\s]*),(?<internal_query_pos>[^\s]*),(?<event_context>[^\s]*),(?<debug_query_string>%{GREEDYDATA}),(?<error_cursor_pos>[^\s]*),(?<func_name>[^\s]*),\"(?<file_name>[^\s]*)\",(?<file_line>[^\s]*),(?<stack_trace>[^\s]*)"}
	  }
	greenplumdb_guardium_filter{}
	  }
	}
output{
  stdout{
    codec => rubydebug
	}
}