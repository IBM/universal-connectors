{
	"type": "grammar",
	"rules": [
		{
			"type": "rule",
			"name": "start",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "n",
							"expression": {
								"type": "rule_ref",
								"name": "multiple_stmt"
							}
						}
					]
				},
				"code": "\n return n\n "
			}
		},
		{
			"type": "rule",
			"name": "multiple_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "stmt"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "SEMICOLON"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "stmt"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n const cur = [head && head.ast || head];\n for (let i = 0; i < tail.length; i++) {\n if(!tail[i][3] || tail[i][3].length === 0) continue;\n cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n }\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: cur\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "stmt",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "query_statement"
					},
					{
						"type": "rule_ref",
						"name": "crud_stmt"
					},
					{
						"type": "rule_ref",
						"name": "cmd_stmt"
					},
					{
						"type": "rule_ref",
						"name": "proc_stmts"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "crud_stmt",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "update_stmt"
					},
					{
						"type": "rule_ref",
						"name": "replace_insert_stmt"
					},
					{
						"type": "rule_ref",
						"name": "insert_no_columns_stmt"
					},
					{
						"type": "rule_ref",
						"name": "insert_into_set"
					},
					{
						"type": "rule_ref",
						"name": "delete_stmt"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "update_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_UPDATE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "table_ref_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_SET"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "rule_ref",
								"name": "set_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "f",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "from_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "w",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "where_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "or",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "order_by_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "lc",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "limit_clause"
								}
							}
						}
					]
				},
				"code": "\n if (t) t.forEach(tableInfo => {\n const { db, as, table } = tableInfo\n tableList.add(`update::${db}::${table}`)\n });\n\t if(f) f.forEach(info => {\n info.table && tableList.add(`update::${info.db}::${info.table}`);\n });\n if(l) {\n l.forEach(col => columnList.add(`update::${col.table}::${col.column}`));\n }\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'update',\n table: t,\n set: l,\n where: w,\n orderby: or,\n limit: lc,\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "delete_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_DELETE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "table_ref_list"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "f",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "from_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "w",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "where_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "or",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "order_by_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "limit_clause"
								}
							}
						}
					]
				},
				"code": "\n if(t) t.forEach(tt => tableList.add(`delete::${tt.db}::${tt.table}`));\n if(f) f.forEach(info => {\n info.table && tableList.add(`delete::${info.db}::${info.table}`);\n columnList.add(`delete::${info.table}::(.*)`);\n });\n if (t === null && f.length === 1) {\n const tableInfo = f[0]\n t = [{\n db: tableInfo.db,\n table: tableInfo.table,\n as: tableInfo.as,\n addition: true\n }]\n }\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'delete',\n table: t,\n from: f,\n where: w,\n orderby: or,\n limit: l,\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "replace_insert_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "ri",
							"expression": {
								"type": "rule_ref",
								"name": "replace_insert"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "optional",
							"expression": {
								"type": "rule_ref",
								"name": "KW_INTO"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "table_name"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "p",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "insert_partition"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "rule_ref",
								"name": "column_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "v",
							"expression": {
								"type": "rule_ref",
								"name": "insert_value_clause"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "odp",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "on_duplicate_update_stmt"
								}
							}
						}
					]
				},
				"code": "\n if (t) {\n tableList.add(`insert::${t.db}::${t.table}`)\n t.as = null\n }\n if (c) {\n let table = t && t.table || null\n if(Array.isArray(v)) {\n v.forEach((row, idx) => {\n if(row.value.length != c.length) {\n throw new Error(`Error: column count doesn't match value count at row ${idx+1}`)\n }\n })\n }\n c.forEach(c => columnList.add(`insert::${table}::${c}`));\n }\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: ri,\n table: [t],\n columns: c,\n values: v,\n partition: p,\n on_duplicate_update: odp,\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "insert_no_columns_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "ri",
							"expression": {
								"type": "rule_ref",
								"name": "replace_insert"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "ig",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "KW_IGNORE"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "it",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "KW_INTO"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "table_name"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "p",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "insert_partition"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "v",
							"expression": {
								"type": "rule_ref",
								"name": "insert_value_clause"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "odp",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "on_duplicate_update_stmt"
								}
							}
						}
					]
				},
				"code": "\n if (t) {\n tableList.add(`insert::${t.db}::${t.table}`)\n columnList.add(`insert::${t.table}::(.*)`);\n t.as = null\n }\n const prefix = [ig, it].filter(v => v).map(v => v[0] && v[0].toLowerCase()).join(' ')\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: ri,\n table: [t],\n columns: null,\n values: v,\n partition: p,\n prefix,\n on_duplicate_update: odp,\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "insert_into_set",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "ri",
							"expression": {
								"type": "rule_ref",
								"name": "replace_insert"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "optional",
							"expression": {
								"type": "rule_ref",
								"name": "KW_INTO"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "table_name"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "p",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "insert_partition"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_SET"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "rule_ref",
								"name": "set_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "odp",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "on_duplicate_update_stmt"
								}
							}
						}
					]
				},
				"code": "\n if (t) {\n tableList.add(`insert::${t.db}::${t.table}`)\n columnList.add(`insert::${t.table}::(.*)`);\n t.as = null\n }\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: ri,\n table: [t],\n columns: null,\n partition: p,\n set: l,\n on_duplicate_update: odp,\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "cmd_stmt",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "analyze_stmt"
					},
					{
						"type": "rule_ref",
						"name": "attach_stmt"
					},
					{
						"type": "rule_ref",
						"name": "drop_stmt"
					},
					{
						"type": "rule_ref",
						"name": "create_stmt"
					},
					{
						"type": "rule_ref",
						"name": "truncate_stmt"
					},
					{
						"type": "rule_ref",
						"name": "rename_stmt"
					},
					{
						"type": "rule_ref",
						"name": "call_stmt"
					},
					{
						"type": "rule_ref",
						"name": "use_stmt"
					},
					{
						"type": "rule_ref",
						"name": "alter_stmt"
					},
					{
						"type": "rule_ref",
						"name": "set_stmt"
					},
					{
						"type": "rule_ref",
						"name": "lock_stmt"
					},
					{
						"type": "rule_ref",
						"name": "unlock_stmt"
					},
					{
						"type": "rule_ref",
						"name": "show_stmt"
					},
					{
						"type": "rule_ref",
						"name": "desc_stmt"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "proc_stmts",
			"expression": {
				"type": "zero_or_more",
				"expression": {
					"type": "rule_ref",
					"name": "proc_stmt"
				}
			}
		},
		{
			"type": "rule",
			"name": "proc_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "semantic_and",
							"code": " varList = []; return true; "
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "assign_stmt"
									},
									{
										"type": "rule_ref",
										"name": "return_stmt"
									}
								]
							}
						}
					]
				},
				"code": "\n return { stmt: s, vars: varList };\n "
			}
		},
		{
			"type": "rule",
			"name": "assign_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "va",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "var_decl"
									},
									{
										"type": "rule_ref",
										"name": "without_prefix_var_decl"
									}
								]
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "KW_ASSIGN"
									},
									{
										"type": "rule_ref",
										"name": "KW_ASSIGIN_EQUAL"
									}
								]
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "proc_expr"
							}
						}
					]
				},
				"code": "\n return {\n type: 'assign',\n left: va,\n symbol: s,\n right: e\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "return_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_RETURN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "proc_expr"
							}
						}
					]
				},
				"code": "\n return { type: 'return', expr: e };\n "
			}
		},
		{
			"type": "rule",
			"name": "proc_expr",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "select_stmt"
					},
					{
						"type": "rule_ref",
						"name": "proc_join"
					},
					{
						"type": "rule_ref",
						"name": "proc_additive_expr"
					},
					{
						"type": "rule_ref",
						"name": "proc_array"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "proc_additive_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "proc_multiplicative_expr"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "additive_operator"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "proc_multiplicative_expr"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createBinaryExprChain(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "proc_multiplicative_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "proc_primary"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "multiplicative_operator"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "proc_primary"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createBinaryExprChain(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "proc_join",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "lt",
							"expression": {
								"type": "rule_ref",
								"name": "var_decl"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "op",
							"expression": {
								"type": "rule_ref",
								"name": "join_op"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "rt",
							"expression": {
								"type": "rule_ref",
								"name": "var_decl"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "expr",
							"expression": {
								"type": "rule_ref",
								"name": "on_clause"
							}
						}
					]
				},
				"code": "\n return {\n type: 'join',\n ltable: lt,\n rtable: rt,\n op: op,\n on: expr\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "proc_primary",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "literal"
					},
					{
						"type": "rule_ref",
						"name": "var_decl"
					},
					{
						"type": "rule_ref",
						"name": "proc_func_call"
					},
					{
						"type": "rule_ref",
						"name": "param"
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "e",
									"expression": {
										"type": "rule_ref",
										"name": "proc_additive_expr"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n e.parentheses = true;\n return e;\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "proc_func_call",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "name",
									"expression": {
										"type": "rule_ref",
										"name": "proc_func_name"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "l",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "proc_primary_list"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n //compatible with original func_call\n return {\n type: 'function',\n name: name,\n args: {\n type: 'expr_list',\n value: l\n }\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "name",
							"expression": {
								"type": "rule_ref",
								"name": "proc_func_name"
							}
						},
						"code": "\n return {\n type: 'function',\n name: name,\n args: null\n };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "proc_primary_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "proc_primary"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "proc_primary"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "proc_array",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "LBRAKE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "rule_ref",
								"name": "proc_primary_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RBRAKE"
						}
					]
				},
				"code": "\n return { type: 'array', value: l };\n "
			}
		},
		{
			"type": "rule",
			"name": "set_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "set_item"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "set_item"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "set_item",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "tbl",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "group",
											"expression": {
												"type": "sequence",
												"elements": [
													{
														"type": "rule_ref",
														"name": "ident"
													},
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "DOT"
													}
												]
											}
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "rule_ref",
										"name": "column"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "=",
									"ignoreCase": false
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "v",
									"expression": {
										"type": "rule_ref",
										"name": "additive_expr"
									}
								}
							]
						},
						"code": "\n return { column: c, value: v, table: tbl && tbl[0] };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "tbl",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "group",
											"expression": {
												"type": "sequence",
												"elements": [
													{
														"type": "rule_ref",
														"name": "ident"
													},
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "DOT"
													}
												]
											}
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "rule_ref",
										"name": "column"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "=",
									"ignoreCase": false
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_VALUES"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "v",
									"expression": {
										"type": "rule_ref",
										"name": "column_ref"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "replace_insert",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "rule_ref",
							"name": "KW_INSERT"
						},
						"code": " return 'insert'; "
					},
					{
						"type": "action",
						"expression": {
							"type": "rule_ref",
							"name": "KW_REPLACE"
						},
						"code": " return 'replace'; "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "insert_partition",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_PARTITION"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "head",
									"expression": {
										"type": "rule_ref",
										"name": "ident_name"
									}
								},
								{
									"type": "labeled",
									"label": "tail",
									"expression": {
										"type": "zero_or_more",
										"expression": {
											"type": "group",
											"expression": {
												"type": "sequence",
												"elements": [
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "COMMA"
													},
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "ident_name"
													}
												]
											}
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n return createList(head, tail)\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_PARTITION"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "v",
									"expression": {
										"type": "rule_ref",
										"name": "value_item"
									}
								}
							]
						},
						"code": "\n return v\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "insert_value_clause",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "value_clause"
					},
					{
						"type": "rule_ref",
						"name": "select_stmt_nake"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "on_duplicate_update_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_ON"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "literal",
							"value": "DUPLICATE",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_KEY"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_UPDATE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "rule_ref",
								"name": "set_list"
							}
						}
					]
				},
				"code": "\n return {\n keyword: 'on duplicate key update',\n set: s\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "analyze_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "a",
							"expression": {
								"type": "rule_ref",
								"name": "KW_ANALYZE"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "table_name"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						}
					]
				},
				"code": "\n tableList.add(`${a}::${t.db}::${t.table}`);\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: a.toLowerCase(),\n table: t\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "attach_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "a",
							"expression": {
								"type": "rule_ref",
								"name": "KW_ATTACH"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "db",
							"expression": {
								"type": "rule_ref",
								"name": "KW_DATABASE"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "as",
							"expression": {
								"type": "rule_ref",
								"name": "KW_AS"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "schema",
							"expression": {
								"type": "rule_ref",
								"name": "ident"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						}
					]
				},
				"code": "\n // tableList.add(`${a}::${t.db}::${t.table}`);\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: a.toLowerCase(),\n database: db,\n expr: e,\n as: as && as[0].toLowerCase(),\n schema,\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "drop_stmt",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "a",
									"expression": {
										"type": "rule_ref",
										"name": "KW_DROP"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "r",
									"expression": {
										"type": "rule_ref",
										"name": "KW_TABLE"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "rule_ref",
										"name": "table_ref_list"
									}
								}
							]
						},
						"code": "\n if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: a.toLowerCase(),\n keyword: r.toLowerCase(),\n name: t\n }\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "a",
									"expression": {
										"type": "rule_ref",
										"name": "KW_DROP"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "r",
									"expression": {
										"type": "rule_ref",
										"name": "KW_INDEX"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "i",
									"expression": {
										"type": "rule_ref",
										"name": "column_ref"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_ON"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "rule_ref",
										"name": "table_name"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "op",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "drop_index_opt"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								}
							]
						},
						"code": "\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: a.toLowerCase(),\n keyword: r.toLowerCase(),\n name: i,\n table: t,\n options: op\n }\n };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "create_stmt",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "create_table_stmt"
					},
					{
						"type": "rule_ref",
						"name": "create_db_stmt"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "truncate_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "a",
							"expression": {
								"type": "rule_ref",
								"name": "KW_TRUNCATE"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "kw",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "KW_TABLE"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "table_ref_list"
							}
						}
					]
				},
				"code": "\n if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: a.toLowerCase(),\n keyword: kw && kw.toLowerCase() || 'table',\n name: t\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "rename_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_RENAME"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_TABLE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "table_to_list"
							}
						}
					]
				},
				"code": "\n t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'rename',\n table: t\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "call_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_CALL"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "proc_func_call"
							}
						}
					]
				},
				"code": "\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'call',\n expr: e\n }\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "use_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_USE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "d",
							"expression": {
								"type": "rule_ref",
								"name": "ident"
							}
						}
					]
				},
				"code": "\n tableList.add(`use::${d}::null`);\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'use',\n db: d\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "alter_stmt",
			"expression": {
				"type": "rule_ref",
				"name": "alter_table_stmt"
			}
		},
		{
			"type": "rule",
			"name": "set_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_SET"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "kw",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "choice",
									"alternatives": [
										{
											"type": "rule_ref",
											"name": "KW_GLOBAL"
										},
										{
											"type": "rule_ref",
											"name": "KW_SESSION"
										},
										{
											"type": "rule_ref",
											"name": "KW_LOCAL"
										},
										{
											"type": "rule_ref",
											"name": "KW_PERSIST"
										},
										{
											"type": "rule_ref",
											"name": "KW_PERSIST_ONLY"
										}
									]
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "a",
							"expression": {
								"type": "rule_ref",
								"name": "assign_stmt"
							}
						}
					]
				},
				"code": "\n a.keyword = kw\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'set',\n expr: a\n }\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "lock_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_LOCK"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_TABLES"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "ltl",
							"expression": {
								"type": "rule_ref",
								"name": "lock_table_list"
							}
						}
					]
				},
				"code": "\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'lock',\n keyword: 'tables',\n tables: ltl\n }\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "unlock_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_UNLOCK"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_TABLES"
						}
					]
				},
				"code": "\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'unlock',\n keyword: 'tables'\n }\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "show_stmt",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_SHOW"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "literal",
												"value": "BINARY",
												"ignoreCase": true
											},
											{
												"type": "literal",
												"value": "MASTER",
												"ignoreCase": true
											}
										]
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "LOGS",
									"ignoreCase": true
								}
							]
						},
						"code": "\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'show',\n suffix: 'logs',\n keyword: t.toLowerCase()\n }\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_SHOW"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "BINLOG",
									"ignoreCase": true
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "EVENTS",
									"ignoreCase": true
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "ins",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "in_op_right"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "from",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "from_clause"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "limit",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "limit_clause"
										}
									}
								}
							]
						},
						"code": "\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'show',\n suffix: 'events',\n keyword: 'binlog',\n in: ins,\n from,\n limit,\n }\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_SHOW"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "k",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "group",
												"expression": {
													"type": "sequence",
													"elements": [
														{
															"type": "literal",
															"value": "CHARACTER",
															"ignoreCase": true
														},
														{
															"type": "rule_ref",
															"name": "__"
														},
														{
															"type": "literal",
															"value": "SET",
															"ignoreCase": true
														}
													]
												}
											},
											{
												"type": "literal",
												"value": "COLLATION",
												"ignoreCase": true
											}
										]
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "e",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "choice",
											"alternatives": [
												{
													"type": "rule_ref",
													"name": "like_op_right"
												},
												{
													"type": "rule_ref",
													"name": "where_clause"
												}
											]
										}
									}
								}
							]
						},
						"code": "\n let keyword = Array.isArray(k) && k || [k]\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'show',\n suffix: keyword[2] && keyword[2].toLowerCase(),\n keyword: keyword[0].toLowerCase(),\n expr: e\n }\n }\n "
					},
					{
						"type": "rule_ref",
						"name": "show_grant_stmt"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "desc_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "choice",
							"alternatives": [
								{
									"type": "rule_ref",
									"name": "KW_DESC"
								},
								{
									"type": "rule_ref",
									"name": "KW_DESCRIBE"
								}
							]
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "ident"
							}
						}
					]
				},
				"code": "\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'desc',\n table: t\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "var_decl",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "p",
							"expression": {
								"type": "rule_ref",
								"name": "KW_VAR_PRE"
							}
						},
						{
							"type": "labeled",
							"label": "d",
							"expression": {
								"type": "rule_ref",
								"name": "without_prefix_var_decl"
							}
						}
					]
				},
				"code": "\n //push for analysis\n return {\n type: 'var',\n ...d,\n prefix: p\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "without_prefix_var_decl",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "name",
							"expression": {
								"type": "rule_ref",
								"name": "ident_name"
							}
						},
						{
							"type": "labeled",
							"label": "m",
							"expression": {
								"type": "rule_ref",
								"name": "mem_chain"
							}
						}
					]
				},
				"code": "\n //push for analysis\n varList.push(name);\n return {\n type: 'var',\n name: name,\n members: m,\n prefix: null,\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "value_item",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "rule_ref",
								"name": "expr_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						}
					]
				},
				"code": "\n return l;\n "
			}
		},
		{
			"type": "rule",
			"name": "value_clause",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_VALUES"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "rule_ref",
								"name": "value_list"
							}
						}
					]
				},
				"code": " return l; "
			}
		},
		{
			"type": "rule",
			"name": "drop_index_opt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "ALTER_ALGORITHM"
									},
									{
										"type": "rule_ref",
										"name": "ALTER_LOCK"
									}
								]
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "choice",
												"alternatives": [
													{
														"type": "rule_ref",
														"name": "ALTER_ALGORITHM"
													},
													{
														"type": "rule_ref",
														"name": "ALTER_LOCK"
													}
												]
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail, 1)\n "
			}
		},
		{
			"type": "rule",
			"name": "if_not_exists_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "IF",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_NOT"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_EXISTS"
						}
					]
				},
				"code": "\n return 'IF NOT EXISTS'\n "
			}
		},
		{
			"type": "rule",
			"name": "create_table_stmt",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "a",
									"expression": {
										"type": "rule_ref",
										"name": "KW_CREATE"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "tp",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_TEMPORARY"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_TABLE"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "ife",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "if_not_exists_stmt"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "rule_ref",
										"name": "table_ref_list"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "rule_ref",
										"name": "create_table_definition"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "con",
									"expression": {
										"type": "zero_or_more",
										"expression": {
											"type": "rule_ref",
											"name": "create_constraint_definition"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "to",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "table_options"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "ir",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "choice",
											"alternatives": [
												{
													"type": "rule_ref",
													"name": "KW_IGNORE"
												},
												{
													"type": "rule_ref",
													"name": "KW_REPLACE"
												}
											]
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "as",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_AS"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "qe",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "union_stmt"
										}
									}
								}
							]
						},
						"code": "\n if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: a[0].toLowerCase(),\n keyword: 'table',\n temporary: tp && tp[0].toLowerCase(),\n if_not_exists:ife,\n table: t,\n ignore_replace: ir && ir[0].toLowerCase(),\n as: as && as[0].toLowerCase(),\n query_expr: qe && qe.ast,\n create_definitions: c,\n\t\t constraint : con,\n table_options: to\n }\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "a",
									"expression": {
										"type": "rule_ref",
										"name": "KW_CREATE"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "tp",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_TEMPORARY"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_TABLE"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "ife",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "if_not_exists_stmt"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "rule_ref",
										"name": "table_ref_list"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "lt",
									"expression": {
										"type": "rule_ref",
										"name": "create_like_table"
									}
								}
							]
						},
						"code": "\n if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: a[0].toLowerCase(),\n keyword: 'table',\n temporary: tp && tp[0].toLowerCase(),\n if_not_exists:ife,\n table: t,\n like: lt\n }\n }\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "create_db_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "a",
							"expression": {
								"type": "rule_ref",
								"name": "KW_CREATE"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "k",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "KW_DATABASE"
									},
									{
										"type": "rule_ref",
										"name": "KW_SCHEMA"
									}
								]
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "ife",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "if_not_exists_stmt"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "ident_name"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "create_db_definition"
								}
							}
						}
					]
				},
				"code": "\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: a[0].toLowerCase(),\n keyword: 'database',\n if_not_exists:ife,\n database: t,\n create_definitions: c,\n }\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "alter_table_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_ALTER"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_TABLE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "table_ref_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "alter_action_list"
							}
						}
					]
				},
				"code": "\n if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'alter',\n table: t,\n expr: e\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "lock_table_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "lock_table"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "lock_table"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "show_grant_stmt",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_SHOW"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "literal",
							"value": "GRANTS",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "f",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "show_grant_for"
								}
							}
						}
					]
				},
				"code": "\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'show',\n keyword: 'grants',\n for: f,\n }\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "mem_chain",
			"expression": {
				"type": "action",
				"expression": {
					"type": "labeled",
					"label": "l",
					"expression": {
						"type": "zero_or_more",
						"expression": {
							"type": "group",
							"expression": {
								"type": "sequence",
								"elements": [
									{
										"type": "literal",
										"value": ".",
										"ignoreCase": false
									},
									{
										"type": "rule_ref",
										"name": "ident_name"
									}
								]
							}
						}
					}
				},
				"code": "\n const s = [];\n for (let i = 0; i < l.length; i++) {\n s.push(l[i][1]);\n }\n return s;\n "
			}
		},
		{
			"type": "rule",
			"name": "value_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "value_item"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "value_item"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "ALTER_ALGORITHM",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "ALGORITHM",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "KW_ASSIGIN_EQUAL"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "val",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "literal",
										"value": "DEFAULT",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "INSTANT",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "INPLACE",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "COPY",
										"ignoreCase": true
									}
								]
							}
						}
					]
				},
				"code": "\n return {\n type: 'alter',\n keyword: 'algorithm',\n resource: 'algorithm',\n symbol: s,\n algorithm: val\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "ALTER_LOCK",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "LOCK",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "KW_ASSIGIN_EQUAL"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "val",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "literal",
										"value": "DEFAULT",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "NONE",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "SHARED",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "EXCLUSIVE",
										"ignoreCase": true
									}
								]
							}
						}
					]
				},
				"code": "\n return {\n type: 'alter',\n keyword: 'lock',\n resource: 'lock',\n symbol: s,\n lock: val\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "create_table_definition",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "create_definition"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "create_definition"
											}
										]
									}
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "create_definition",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "create_column_definition"
					},
					{
						"type": "rule_ref",
						"name": "create_index_definition"
					},
					{
						"type": "rule_ref",
						"name": "create_fulltext_spatial_index_definition"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "create_column_definition",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "rule_ref",
								"name": "column_ref"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "d",
							"expression": {
								"type": "rule_ref",
								"name": "data_type"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "n",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "choice",
									"alternatives": [
										{
											"type": "rule_ref",
											"name": "literal_not_null"
										},
										{
											"type": "rule_ref",
											"name": "literal_null"
										}
									]
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "df",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "default_expr"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "a",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "literal",
									"value": "AUTO_INCREMENT",
									"ignoreCase": true
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "u",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "optional",
												"expression": {
													"type": "choice",
													"alternatives": [
														{
															"type": "literal",
															"value": "UNIQUE",
															"ignoreCase": true
														},
														{
															"type": "literal",
															"value": "PRIMARY",
															"ignoreCase": true
														}
													]
												}
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "literal",
												"value": "KEY",
												"ignoreCase": true
											}
										]
									}
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "co",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "keyword_comment"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "ca",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "collate_expr"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "cf",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "column_format"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "storage"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "re",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "reference_definition"
								}
							}
						}
					]
				},
				"code": "\n columnList.add(`create::${c.table}::${c.column}`)\n if (n && !n.value) n.value = 'null'\n return {\n column: c,\n definition: d,\n nullable: n,\n default_val: df,\n auto_increment: a && a.toLowerCase(),\n unique_or_primary: u && `${u[0].toLowerCase()} ${u[2].toLowerCase()}`,\n comment: co,\n collate: ca,\n column_format: cf,\n storage:s,\n reference_definition: re,\n resource: 'column'\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "table_options",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "table_option"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "optional",
												"expression": {
													"type": "rule_ref",
													"name": "COMMA"
												}
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "table_option"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail)\n "
			}
		},
		{
			"type": "rule",
			"name": "create_like_table",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "create_like_table_simple"
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "e",
									"expression": {
										"type": "rule_ref",
										"name": "create_like_table"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n e.parentheses = true;\n return e;\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "create_db_definition",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "create_option_character_set"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "create_option_character_set"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail, 1)\n "
			}
		},
		{
			"type": "rule",
			"name": "alter_action_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "alter_action"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "alter_action"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "lock_table",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "table_base"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "lt",
							"expression": {
								"type": "rule_ref",
								"name": "lock_type"
							}
						}
					]
				},
				"code": "\n tableList.add(`lock::${t.db}::${t.table}`)\n return {\n table: t,\n lock_type: lt\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "show_grant_for",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "FOR",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "n",
							"expression": {
								"type": "rule_ref",
								"name": "ident"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "h",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "KW_VAR__PRE_AT"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "ident"
											}
										]
									}
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "u",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "show_grant_for_using"
								}
							}
						}
					]
				},
				"code": "\n return {\n user: n,\n host: h && h[2],\n role_list: u\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "create_constraint_definition",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "create_constraint_primary"
					},
					{
						"type": "rule_ref",
						"name": "create_constraint_unique"
					},
					{
						"type": "rule_ref",
						"name": "create_constraint_foreign"
					},
					{
						"type": "rule_ref",
						"name": "create_constraint_check"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "create_index_definition",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "kc",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "KW_INDEX"
									},
									{
										"type": "rule_ref",
										"name": "KW_KEY"
									}
								]
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "column"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "index_type"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "de",
							"expression": {
								"type": "rule_ref",
								"name": "cte_column_definition"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "id",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "index_options"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						}
					]
				},
				"code": "\n return {\n index: c,\n definition: de,\n keyword: kc.toLowerCase(),\n index_type: t,\n resource: 'index',\n index_options: id,\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "create_fulltext_spatial_index_definition",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "p",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "KW_FULLTEXT"
									},
									{
										"type": "rule_ref",
										"name": "KW_SPATIAL"
									}
								]
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "kc",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "choice",
									"alternatives": [
										{
											"type": "rule_ref",
											"name": "KW_INDEX"
										},
										{
											"type": "rule_ref",
											"name": "KW_KEY"
										}
									]
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "column"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "de",
							"expression": {
								"type": "rule_ref",
								"name": "cte_column_definition"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "id",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "index_options"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						}
					]
				},
				"code": "\n return {\n index: c,\n definition: de,\n keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),\n index_options: id,\n resource: 'index',\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "default_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_DEFAULT"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "ce",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "literal"
									},
									{
										"type": "rule_ref",
										"name": "expr"
									}
								]
							}
						}
					]
				},
				"code": "\n return {\n type: 'default',\n value: ce\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "keyword_comment",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "k",
							"expression": {
								"type": "rule_ref",
								"name": "KW_COMMENT"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "KW_ASSIGIN_EQUAL"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "rule_ref",
								"name": "literal_string"
							}
						}
					]
				},
				"code": "\n return {\n type: k.toLowerCase(),\n keyword: k.toLowerCase(),\n symbol: s,\n value: c,\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "collate_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_COLLATE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "KW_ASSIGIN_EQUAL"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "ca",
							"expression": {
								"type": "rule_ref",
								"name": "ident_name"
							}
						}
					]
				},
				"code": "\n return {\n type: 'collate',\n symbol: s,\n value: ca,\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "column_format",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "k",
							"expression": {
								"type": "literal",
								"value": "COLUMN_FORMAT",
								"ignoreCase": true
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "f",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "literal",
										"value": "FIXED",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "DYNAMIC",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "DEFAULT",
										"ignoreCase": true
									}
								]
							}
						}
					]
				},
				"code": "\n return {\n type: 'column_format',\n value: f.toLowerCase()\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "storage",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "k",
							"expression": {
								"type": "literal",
								"value": "STORAGE",
								"ignoreCase": true
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "literal",
										"value": "DISK",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "MEMORY",
										"ignoreCase": true
									}
								]
							}
						}
					]
				},
				"code": "\n return {\n type: 'storage',\n value: s.toLowerCase()\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "reference_definition",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "kc",
							"expression": {
								"type": "rule_ref",
								"name": "KW_REFERENCES"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "table_ref_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "de",
							"expression": {
								"type": "rule_ref",
								"name": "cte_column_definition"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "m",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "choice",
									"alternatives": [
										{
											"type": "literal",
											"value": "MATCH FULL",
											"ignoreCase": true
										},
										{
											"type": "literal",
											"value": "MATCH PARTIAL",
											"ignoreCase": true
										},
										{
											"type": "literal",
											"value": "MATCH SIMPLE",
											"ignoreCase": true
										}
									]
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "od",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "on_reference"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "ou",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "on_reference"
								}
							}
						}
					]
				},
				"code": "\n return {\n definition: de,\n table: t,\n keyword: kc.toLowerCase(),\n match:m && m.toLowerCase(),\n on_delete: od,\n on_update: ou,\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "table_option",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "kw",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "literal",
												"value": "AUTO_INCREMENT",
												"ignoreCase": true
											},
											{
												"type": "literal",
												"value": "AVG_ROW_LENGTH",
												"ignoreCase": true
											},
											{
												"type": "literal",
												"value": "KEY_BLOCK_SIZE",
												"ignoreCase": true
											},
											{
												"type": "literal",
												"value": "MAX_ROWS",
												"ignoreCase": true
											},
											{
												"type": "literal",
												"value": "MIN_ROWS",
												"ignoreCase": true
											},
											{
												"type": "literal",
												"value": "STATS_SAMPLE_PAGES",
												"ignoreCase": true
											}
										]
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_ASSIGIN_EQUAL"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "v",
									"expression": {
										"type": "rule_ref",
										"name": "literal_numeric"
									}
								}
							]
						},
						"code": "\n return {\n keyword: kw.toLowerCase(),\n symbol: s,\n value: v.value\n }\n "
					},
					{
						"type": "rule_ref",
						"name": "create_option_character_set"
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "kw",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "rule_ref",
												"name": "KW_COMMENT"
											},
											{
												"type": "literal",
												"value": "CONNECTION",
												"ignoreCase": true
											}
										]
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_ASSIGIN_EQUAL"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "rule_ref",
										"name": "literal_string"
									}
								}
							]
						},
						"code": "\n return {\n keyword: kw.toLowerCase(),\n symbol: s,\n value: `'${c.value}'`\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "kw",
									"expression": {
										"type": "literal",
										"value": "COMPRESSION",
										"ignoreCase": true
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_ASSIGIN_EQUAL"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "v",
									"expression": {
										"type": "group",
										"expression": {
											"type": "sequence",
											"elements": [
												{
													"type": "literal",
													"value": "'",
													"ignoreCase": false
												},
												{
													"type": "choice",
													"alternatives": [
														{
															"type": "literal",
															"value": "ZLIB",
															"ignoreCase": true
														},
														{
															"type": "literal",
															"value": "LZ4",
															"ignoreCase": true
														},
														{
															"type": "literal",
															"value": "NONE",
															"ignoreCase": true
														}
													]
												},
												{
													"type": "literal",
													"value": "'",
													"ignoreCase": false
												}
											]
										}
									}
								}
							]
						},
						"code": "\n return {\n keyword: kw.toLowerCase(),\n symbol: s,\n value: v.join('').toUpperCase()\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "kw",
									"expression": {
										"type": "literal",
										"value": "ENGINE",
										"ignoreCase": true
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_ASSIGIN_EQUAL"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "rule_ref",
										"name": "ident_name"
									}
								}
							]
						},
						"code": "\n return {\n keyword: kw.toLowerCase(),\n symbol: s,\n value: c.toUpperCase()\n }\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "create_like_table_simple",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_LIKE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "table_ref_list"
							}
						}
					]
				},
				"code": "\n return {\n type: 'like',\n table: t\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "create_option_character_set",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "kw",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "KW_DEFAULT"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "create_option_character_set_kw"
									},
									{
										"type": "literal",
										"value": "CHARSET",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "COLLATE",
										"ignoreCase": true
									}
								]
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "KW_ASSIGIN_EQUAL"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "v",
							"expression": {
								"type": "rule_ref",
								"name": "ident_name"
							}
						}
					]
				},
				"code": "\n return {\n keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),\n symbol: s,\n value: v\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "alter_action",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "ALTER_ADD_COLUMN"
					},
					{
						"type": "rule_ref",
						"name": "ALTER_DROP_COLUMN"
					},
					{
						"type": "rule_ref",
						"name": "ALTER_RENAME_TABLE"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "lock_type",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "literal",
									"value": "READ",
									"ignoreCase": true
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "literal",
											"value": "LOCAL",
											"ignoreCase": true
										}
									}
								}
							]
						},
						"code": "\n return {\n type: 'read',\n suffix: s && 'local'\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "p",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "literal",
											"value": "LOW_PRIORITY",
											"ignoreCase": true
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "WRITE",
									"ignoreCase": true
								}
							]
						},
						"code": "\n return {\n type: 'write',\n prefix: p && 'low_priority'\n }\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "show_grant_for_using",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_USING"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "rule_ref",
								"name": "show_grant_for_using_list"
							}
						}
					]
				},
				"code": "\n return l\n "
			}
		},
		{
			"type": "rule",
			"name": "show_grant_for_using_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "ident"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "ident"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "create_constraint_primary",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "kc",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "constraint_name"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "p",
							"expression": {
								"type": "group",
								"expression": {
									"type": "sequence",
									"elements": [
										{
											"type": "literal",
											"value": "PRIMARY",
											"ignoreCase": true
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "literal",
											"value": "KEY",
											"ignoreCase": true
										}
									]
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "index_type"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "de",
							"expression": {
								"type": "rule_ref",
								"name": "cte_column_definition"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "id",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "index_options"
								}
							}
						}
					]
				},
				"code": "\n return {\n constraint: kc && kc.constraint,\n definition: de,\n constraint_type: `${p[0].toLowerCase()} ${p[2].toLowerCase()}`,\n keyword: kc && kc.keyword,\n index_type: t,\n resource: 'constraint',\n index_options: id,\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "create_constraint_unique",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "kc",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "constraint_name"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "u",
							"expression": {
								"type": "rule_ref",
								"name": "KW_UNIQUE"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "p",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "choice",
									"alternatives": [
										{
											"type": "rule_ref",
											"name": "KW_INDEX"
										},
										{
											"type": "rule_ref",
											"name": "KW_KEY"
										}
									]
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "i",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "column"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "index_type"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "de",
							"expression": {
								"type": "rule_ref",
								"name": "cte_column_definition"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "id",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "index_options"
								}
							}
						}
					]
				},
				"code": "\n return {\n constraint: kc && kc.constraint,\n definition: de,\n constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),\n keyword: kc && kc.keyword,\n index_type: t,\n index: i,\n resource: 'constraint',\n index_options: id\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "create_constraint_foreign",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "kc",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "constraint_name"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "p",
							"expression": {
								"type": "literal",
								"value": "FOREIGN KEY",
								"ignoreCase": true
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "i",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "column"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "de",
							"expression": {
								"type": "rule_ref",
								"name": "cte_column_definition"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "id",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "reference_definition"
								}
							}
						}
					]
				},
				"code": "\n return {\n constraint: kc && kc.constraint,\n definition: de,\n constraint_type: p,\n keyword: kc && kc.keyword,\n index: i,\n resource: 'constraint',\n reference_definition: id\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "create_constraint_check",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "kc",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "constraint_name"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "u",
							"expression": {
								"type": "literal",
								"value": "CHECK",
								"ignoreCase": true
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "nfr",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "literal",
												"value": "NOT",
												"ignoreCase": true
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "literal",
												"value": "FOR",
												"ignoreCase": true
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "literal",
												"value": "REPLICATION",
												"ignoreCase": true
											},
											{
												"type": "rule_ref",
												"name": "__"
											}
										]
									}
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						}
					]
				},
				"code": "\n return {\n constraint_type: u.toLowerCase(),\n keyword: kc && kc.keyword,\n constraint: kc && kc.constraint,\n index_type: nfr && { keyword: 'not for replication' },\n definition: [c],\n resource: 'constraint',\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "index_type",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_USING"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "literal",
										"value": "BTREE",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "HASH",
										"ignoreCase": true
									}
								]
							}
						}
					]
				},
				"code": "\n return {\n keyword: 'using',\n type: t.toLowerCase(),\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "cte_column_definition",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "column"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "column"
											}
										]
									}
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "index_options",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "index_option"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "index_option"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n const result = [head];\n for (let i = 0; i < tail.length; i++) {\n result.push(tail[i][1]);\n }\n return result;\n "
			}
		},
		{
			"type": "rule",
			"name": "index_option",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "k",
									"expression": {
										"type": "rule_ref",
										"name": "KW_KEY_BLOCK_SIZE"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "e",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_ASSIGIN_EQUAL"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "kbs",
									"expression": {
										"type": "rule_ref",
										"name": "literal_numeric"
									}
								}
							]
						},
						"code": "\n return {\n type: k.toLowerCase(),\n symbol: e,\n expr: kbs\n };\n "
					},
					{
						"type": "rule_ref",
						"name": "index_type"
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "literal",
									"value": "WITH",
									"ignoreCase": true
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "PARSER",
									"ignoreCase": true
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "pn",
									"expression": {
										"type": "rule_ref",
										"name": "ident_name"
									}
								}
							]
						},
						"code": "\n return {\n type: 'with parser',\n expr: pn\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "k",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "literal",
										"value": "VISIBLE",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "INVISIBLE",
										"ignoreCase": true
									}
								]
							}
						},
						"code": "\n return {\n type: k.toLowerCase(),\n expr: k.toLowerCase()\n }\n "
					},
					{
						"type": "rule_ref",
						"name": "keyword_comment"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "on_reference",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "on_kw",
							"expression": {
								"type": "literal",
								"value": "ON",
								"ignoreCase": true
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "kw",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "literal",
										"value": "DELETE",
										"ignoreCase": true
									},
									{
										"type": "literal",
										"value": "UPDATE",
										"ignoreCase": true
									}
								]
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "ro",
							"expression": {
								"type": "rule_ref",
								"name": "reference_option"
							}
						}
					]
				},
				"code": "\n return {\n type: `${on_kw.toLowerCase()} ${kw.toLowerCase()}`,\n value: ro\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "create_option_character_set_kw",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "CHARACTER",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "literal",
							"value": "SET",
							"ignoreCase": true
						}
					]
				},
				"code": "\n return 'CHARACTER SET'\n "
			}
		},
		{
			"type": "rule",
			"name": "ALTER_ADD_COLUMN",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_ADD"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "kc",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "KW_COLUMN"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "cd",
							"expression": {
								"type": "rule_ref",
								"name": "create_column_definition"
							}
						}
					]
				},
				"code": "\n return {\n action: 'add',\n ...cd,\n keyword: kc,\n resource: 'column',\n type: 'alter',\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "ALTER_DROP_COLUMN",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_DROP"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "kc",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "KW_COLUMN"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "rule_ref",
								"name": "column_ref"
							}
						}
					]
				},
				"code": "\n return {\n action: 'drop',\n column: c,\n keyword: kc,\n resource: 'column',\n type: 'alter',\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "ALTER_RENAME_TABLE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_RENAME"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "kw",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "choice",
									"alternatives": [
										{
											"type": "rule_ref",
											"name": "KW_TO"
										},
										{
											"type": "rule_ref",
											"name": "KW_AS"
										}
									]
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "tn",
							"expression": {
								"type": "rule_ref",
								"name": "ident"
							}
						}
					]
				},
				"code": "\n return {\n action: 'rename',\n type: 'alter',\n resource: 'table',\n keyword: kw && kw[0].toLowerCase(),\n table: tn\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "constraint_name",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "kc",
							"expression": {
								"type": "rule_ref",
								"name": "KW_CONSTRAINT"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "ident"
								}
							}
						}
					]
				},
				"code": "\n return {\n keyword: kc.toLowerCase(),\n constraint: c\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "reference_option",
			"expression": {
				"type": "action",
				"expression": {
					"type": "labeled",
					"label": "kc",
					"expression": {
						"type": "choice",
						"alternatives": [
							{
								"type": "literal",
								"value": "RESTRICT",
								"ignoreCase": true
							},
							{
								"type": "literal",
								"value": "CASCADE",
								"ignoreCase": true
							},
							{
								"type": "literal",
								"value": "SET NULL",
								"ignoreCase": true
							},
							{
								"type": "literal",
								"value": "NO ACTION",
								"ignoreCase": true
							},
							{
								"type": "literal",
								"value": "SET DEFAULT",
								"ignoreCase": true
							}
						]
					}
				},
				"code": "\n return kc.toLowerCase()\n "
			}
		},
		{
			"type": "rule",
			"name": "KW_UPDATE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "UPDATE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_CREATE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "CREATE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_DELETE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "DELETE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_INSERT",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "INSERT",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_ASSIGN",
			"expression": {
				"type": "literal",
				"value": ":=",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "KW_ASSIGIN_EQUAL",
			"expression": {
				"type": "literal",
				"value": "=",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "KW_RETURN",
			"expression": {
				"type": "literal",
				"value": "return",
				"ignoreCase": true
			}
		},
		{
			"type": "rule",
			"name": "KW_REPLACE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "REPLACE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_ANALYZE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "ANALYZE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_ATTACH",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "ATTACH",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_DATABASE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "DATABASE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_RENAME",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "RENAME",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_SHOW",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "SHOW",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_DESCRIBE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "DESCRIBE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_VAR__PRE_AT",
			"expression": {
				"type": "literal",
				"value": "@",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "KW_VAR__PRE_AT_AT",
			"expression": {
				"type": "literal",
				"value": "@@",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "KW_VAR_PRE_DOLLAR",
			"expression": {
				"type": "literal",
				"value": "$",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "KW_VAR_PRE",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "KW_VAR__PRE_AT_AT"
					},
					{
						"type": "rule_ref",
						"name": "KW_VAR__PRE_AT"
					},
					{
						"type": "rule_ref",
						"name": "KW_VAR_PRE_DOLLAR"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_TEMPORARY",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "TEMPORARY",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_SCHEMA",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "SCHEMA",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_ALTER",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "ALTER",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_SPATIAL",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "SPATIAL",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_KEY_BLOCK_SIZE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "KEY_BLOCK_SIZE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "query_statement",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "query_expr"
					},
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "group",
								"expression": {
									"type": "sequence",
									"elements": [
										{
											"type": "literal",
											"value": "(",
											"ignoreCase": false
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "rule_ref",
											"name": "select_stmt"
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "literal",
											"value": ")",
											"ignoreCase": false
										}
									]
								}
							}
						},
						"code": "\n return {\n ...s[2],\n parentheses: true,\n }\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "query_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "cte",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "with_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "rule_ref",
								"name": "union_stmt"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "o",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "order_by_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "limit_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						}
					]
				},
				"code": "\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: {\n type: 'bigquery',\n with: cte,\n select: s && s.ast,\n orderby: o,\n limit: l,\n parentheses: s && s.parentheses || false,\n }\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "set_op",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "u",
									"expression": {
										"type": "rule_ref",
										"name": "KW_UNION"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "choice",
											"alternatives": [
												{
													"type": "rule_ref",
													"name": "KW_ALL"
												},
												{
													"type": "rule_ref",
													"name": "KW_DISTINCT"
												}
											]
										}
									}
								}
							]
						},
						"code": "\n return s ? `union ${s.toLowerCase()}` : 'union'\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "u",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "literal",
												"value": "INTERSECT",
												"ignoreCase": true
											},
											{
												"type": "literal",
												"value": "EXCEPT",
												"ignoreCase": true
											}
										]
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "choice",
											"alternatives": [
												{
													"type": "rule_ref",
													"name": "KW_ALL"
												},
												{
													"type": "rule_ref",
													"name": "KW_DISTINCT"
												}
											]
										}
									}
								}
							]
						},
						"code": "\n return `${u.toLowerCase()} ${s.toLowerCase()}`\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "union_stmt",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "union_stmt_nake"
					},
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "group",
								"expression": {
									"type": "sequence",
									"elements": [
										{
											"type": "literal",
											"value": "(",
											"ignoreCase": false
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "rule_ref",
											"name": "union_stmt_nake"
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "literal",
											"value": ")",
											"ignoreCase": false
										}
									]
								}
							}
						},
						"code": "\n return {\n ...s[2],\n parentheses: true\n }\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "union_stmt_nake",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "select_stmt"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "optional",
												"expression": {
													"type": "rule_ref",
													"name": "set_op"
												}
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "select_stmt"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n let cur = head\n for (let i = 0; i < tail.length; i++) {\n cur._next = tail[i][3]\n cur.union = tail[i][1]\n cur = cur._next\n }\n return {\n tableList: Array.from(tableList),\n columnList: columnListTableAlias(columnList),\n ast: head\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "select_stmt",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "select_stmt_nake"
					},
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "group",
								"expression": {
									"type": "sequence",
									"elements": [
										{
											"type": "literal",
											"value": "(",
											"ignoreCase": false
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "rule_ref",
											"name": "select_stmt"
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "literal",
											"value": ")",
											"ignoreCase": false
										}
									]
								}
							}
						},
						"code": "\n return {\n ...s[2],\n parentheses_symbol: true\n }\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "with_clause",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_WITH"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "cte_definition"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "cte_definition"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "cte_definition",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "cte",
							"expression": {
								"type": "rule_ref",
								"name": "cte_name"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_AS"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "stmt",
							"expression": {
								"type": "rule_ref",
								"name": "union_stmt"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						}
					]
				},
				"code": "\n return { cte, stmt };\n "
			}
		},
		{
			"type": "rule",
			"name": "cte_name",
			"expression": {
				"type": "action",
				"expression": {
					"type": "labeled",
					"label": "name",
					"expression": {
						"type": "choice",
						"alternatives": [
							{
								"type": "rule_ref",
								"name": "literal_string"
							},
							{
								"type": "rule_ref",
								"name": "ident_name"
							}
						]
					}
				},
				"code": "\n return name;\n "
			}
		},
		{
			"type": "rule",
			"name": "select_stmt_nake",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "cte",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "with_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_SELECT"
						},
						{
							"type": "rule_ref",
							"name": "___"
						},
						{
							"type": "labeled",
							"label": "sv",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "struct_value"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "d",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "choice",
									"alternatives": [
										{
											"type": "rule_ref",
											"name": "KW_ALL"
										},
										{
											"type": "rule_ref",
											"name": "KW_DISTINCT"
										}
									]
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "rule_ref",
								"name": "column_clause"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "f",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "from_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "fs",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "for_sys_time_as_of"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "w",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "where_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "g",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "group_by_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "h",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "having_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "o",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "order_by_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "limit_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "win",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "window_clause"
								}
							}
						}
					]
				},
				"code": "\n if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n return {\n type: 'select',\n as_struct_val: sv,\n distinct: d,\n columns: c,\n from: f,\n for_sys_time_as_of: fs,\n where: w,\n with: cte,\n groupby: g,\n having: h,\n orderby: o,\n limit: l,\n window:win,\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "for_sys_time_as_of",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "FOR",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "literal",
							"value": "SYSTEM_TIME",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "literal",
							"value": "AS",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "literal",
							"value": "OF",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						}
					]
				},
				"code": "\n return {\n keyword: 'for system_time as of',\n expr: e\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "struct_value",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "a",
							"expression": {
								"type": "rule_ref",
								"name": "KW_AS"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "k",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "KW_STRUCT"
									},
									{
										"type": "rule_ref",
										"name": "KW_VALUE"
									}
								]
							}
						}
					]
				},
				"code": "\n return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n "
			}
		},
		{
			"type": "rule",
			"name": "expr_alias",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "alias",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "alias_clause"
								}
							}
						}
					]
				},
				"code": "\n return { expr: e, as:alias };\n "
			}
		},
		{
			"type": "rule",
			"name": "column_clause",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "STAR"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "k",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "literal",
												"value": "EXCEPT",
												"ignoreCase": true
											},
											{
												"type": "literal",
												"value": "REPLACE",
												"ignoreCase": true
											}
										]
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "rule_ref",
										"name": "columns_list"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n columnList.add('select::null::(.*)')\n return {\n expr_list: c,\n parentheses: true,\n star: '*',\n type: k.toLowerCase(),\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "head",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "rule_ref",
												"name": "KW_ALL"
											},
											{
												"type": "group",
												"expression": {
													"type": "sequence",
													"elements": [
														{
															"type": "rule_ref",
															"name": "STAR"
														},
														{
															"type": "simple_not",
															"expression": {
																"type": "rule_ref",
																"name": "ident_start"
															}
														}
													]
												}
											},
											{
												"type": "rule_ref",
												"name": "STAR"
											}
										]
									}
								},
								{
									"type": "labeled",
									"label": "tail",
									"expression": {
										"type": "zero_or_more",
										"expression": {
											"type": "group",
											"expression": {
												"type": "sequence",
												"elements": [
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "COMMA"
													},
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "column_list_item"
													}
												]
											}
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "optional",
									"expression": {
										"type": "rule_ref",
										"name": "COMMA"
									}
								}
							]
						},
						"code": "\n columnList.add('select::null::(.*)');\n if (tail && tail.length > 0) {\n head[0] = {\n expr: {\n type: 'column_ref',\n table: null,\n column: '*'\n },\n as: null\n };\n return createList(head[0], tail);\n }\n return head[0];\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "rule_ref",
										"name": "columns_list"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "optional",
									"expression": {
										"type": "rule_ref",
										"name": "COMMA"
									}
								}
							]
						},
						"code": "\n return c\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "columns_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "column_list_item"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "column_list_item"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "column_offset_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "n",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LBRAKE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "KW_OFFSET"
									},
									{
										"type": "rule_ref",
										"name": "KW_ORDINAL"
									},
									{
										"type": "rule_ref",
										"name": "KW_SAFE_OFFSET"
									},
									{
										"type": "rule_ref",
										"name": "KW_SAFE_ORDINAL"
									}
								]
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "rule_ref",
								"name": "literal_numeric"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RBRAKE"
						}
					]
				},
				"code": "\n return {\n expr: n,\n offset: `[${t}(${l.value})]`\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "column_list_item",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "tbl",
							"expression": {
								"type": "rule_ref",
								"name": "STAR"
							}
						},
						"code": "\n columnList.add('select::null::(.*)');\n return {\n expr: {\n type: 'column_ref',\n table: null,\n column: '*'\n },\n as: null\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "tbl",
									"expression": {
										"type": "rule_ref",
										"name": "ident"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "DOT"
								},
								{
									"type": "labeled",
									"label": "pro",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "group",
											"expression": {
												"type": "sequence",
												"elements": [
													{
														"type": "choice",
														"alternatives": [
															{
																"type": "rule_ref",
																"name": "column_offset_expr"
															},
															{
																"type": "rule_ref",
																"name": "ident"
															}
														]
													},
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "DOT"
													}
												]
											}
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "STAR"
								}
							]
						},
						"code": "\n columnList.add(`select::${tbl}::(.*)`)\n let column = '*'\n const mid = pro && pro[0]\n if (typeof mid === 'string') column = `${mid}.*`\n if (mid && mid.expr && mid.offset) column = { ...mid, suffix: '.*' }\n return {\n expr: {\n type: 'column_ref',\n table: tbl,\n column,\n },\n as: null\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "rule_ref",
										"name": "column_offset_expr"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "as",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "alias_clause"
										}
									}
								}
							]
						},
						"code": "\n return {\n expr: {\n type: 'column_ref',\n table: null,\n column: c\n },\n as: as\n }\n "
					},
					{
						"type": "rule_ref",
						"name": "expr_alias"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "alias_clause",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_AS"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "i",
									"expression": {
										"type": "rule_ref",
										"name": "alias_ident"
									}
								}
							]
						},
						"code": " return i; "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "optional",
									"expression": {
										"type": "rule_ref",
										"name": "KW_AS"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "i",
									"expression": {
										"type": "rule_ref",
										"name": "ident"
									}
								}
							]
						},
						"code": " return i; "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "from_unnest_item",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "UNNEST",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "a",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "expr"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "alias",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "alias_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "wf",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "with_offset"
								}
							}
						}
					]
				},
				"code": "\n return {\n type: 'unnest',\n expr: a,\n parentheses: true,\n as:alias,\n with_offset: wf,\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "from_clause",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_FROM"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "rule_ref",
								"name": "table_ref_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "op",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "pivot_operator"
								}
							}
						}
					]
				},
				"code": "\n if (l[0]) l[0].operator = op\n return l\n "
			}
		},
		{
			"type": "rule",
			"name": "pivot_operator",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_PIVOT"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "a",
							"expression": {
								"type": "rule_ref",
								"name": "aggr_func_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "literal",
							"value": "FOR",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "rule_ref",
								"name": "column_ref"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "i",
							"expression": {
								"type": "rule_ref",
								"name": "in_op_right"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "as",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "alias_clause"
								}
							}
						}
					]
				},
				"code": "\n i.operator = '='\n return {\n 'type': 'pivot',\n 'expr': a,\n column: c,\n in_expr: i,\n as,\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "with_offset",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_WITH"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_OFFSET"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "alias",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "alias_clause"
								}
							}
						}
					]
				},
				"code": "\n return {\n keyword: 'with offset as',\n as: alias\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "table_to_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "table_to_item"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "table_to_item"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "table_to_item",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "table_name"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_TO"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "rule_ref",
								"name": "table_name"
							}
						}
					]
				},
				"code": "\n return [head, tail]\n "
			}
		},
		{
			"type": "rule",
			"name": "table_ref_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "table_base"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "rule_ref",
									"name": "table_ref"
								}
							}
						}
					]
				},
				"code": "\n tail.unshift(head);\n tail.forEach(tableInfo => {\n const { table, as } = tableInfo\n tableAlias[table] = table\n if (as) tableAlias[as] = table\n refreshColumnList(columnList)\n })\n return tail;\n "
			}
		},
		{
			"type": "rule",
			"name": "table_ref",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "COMMA"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "rule_ref",
										"name": "table_base"
									}
								}
							]
						},
						"code": " return t; "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "rule_ref",
										"name": "table_join"
									}
								}
							]
						},
						"code": " return t; "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "table_join",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "op",
									"expression": {
										"type": "rule_ref",
										"name": "join_op"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "rule_ref",
										"name": "table_base"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_USING"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "head",
									"expression": {
										"type": "rule_ref",
										"name": "ident_name"
									}
								},
								{
									"type": "labeled",
									"label": "tail",
									"expression": {
										"type": "zero_or_more",
										"expression": {
											"type": "group",
											"expression": {
												"type": "sequence",
												"elements": [
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "COMMA"
													},
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "ident_name"
													}
												]
											}
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n t.join = op;\n t.using = createList(head, tail);\n return t;\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "op",
									"expression": {
										"type": "rule_ref",
										"name": "join_op"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "rule_ref",
										"name": "table_base"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "expr",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "on_clause"
										}
									}
								}
							]
						},
						"code": "\n t.join = op;\n t.on = expr;\n return t;\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "op",
									"expression": {
										"type": "rule_ref",
										"name": "join_op"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "stmt",
									"expression": {
										"type": "rule_ref",
										"name": "union_stmt"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "alias",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "alias_clause"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "expr",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "on_clause"
										}
									}
								}
							]
						},
						"code": "\n stmt.parentheses = true;\n return {\n expr: stmt,\n as: alias,\n join: op,\n on: expr\n };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "hint",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "class",
						"parts": [
							"@"
						],
						"inverted": false,
						"ignoreCase": false
					},
					{
						"type": "class",
						"parts": [
							"{"
						],
						"inverted": false,
						"ignoreCase": false
					},
					{
						"type": "rule_ref",
						"name": "__"
					},
					{
						"type": "rule_ref",
						"name": "ident_name"
					},
					{
						"type": "rule_ref",
						"name": "__"
					},
					{
						"type": "class",
						"parts": [
							"="
						],
						"inverted": false,
						"ignoreCase": false
					},
					{
						"type": "rule_ref",
						"name": "__"
					},
					{
						"type": "rule_ref",
						"name": "ident_name"
					},
					{
						"type": "rule_ref",
						"name": "__"
					},
					{
						"type": "class",
						"parts": [
							"}"
						],
						"inverted": false,
						"ignoreCase": false
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "table***REMOVED***mple",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "TABLESAMPLE",
						"ignoreCase": true
					},
					{
						"type": "rule_ref",
						"name": "__"
					},
					{
						"type": "choice",
						"alternatives": [
							{
								"type": "literal",
								"value": "BERNOULLI",
								"ignoreCase": true
							},
							{
								"type": "literal",
								"value": "RESERVOIR",
								"ignoreCase": true
							}
						]
					},
					{
						"type": "rule_ref",
						"name": "__"
					},
					{
						"type": "literal",
						"value": "(",
						"ignoreCase": false
					},
					{
						"type": "rule_ref",
						"name": "__"
					},
					{
						"type": "rule_ref",
						"name": "number"
					},
					{
						"type": "rule_ref",
						"name": "__"
					},
					{
						"type": "choice",
						"alternatives": [
							{
								"type": "literal",
								"value": "PERCENT",
								"ignoreCase": true
							},
							{
								"type": "literal",
								"value": "ROWS",
								"ignoreCase": true
							}
						]
					},
					{
						"type": "rule_ref",
						"name": "__"
					},
					{
						"type": "literal",
						"value": ")",
						"ignoreCase": false
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "table_base",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "rule_ref",
										"name": "table_name"
									}
								},
								{
									"type": "labeled",
									"label": "ht",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "hint"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "ts",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "table***REMOVED***mple"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "alias",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "alias_clause"
										}
									}
								}
							]
						},
						"code": "\n if (t.type === 'var') {\n t.as = alias;\n return t;\n }\n return {\n db: t.db,\n table: t.table,\n as: alias\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "stmt",
									"expression": {
										"type": "rule_ref",
										"name": "union_stmt"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "ts",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "table***REMOVED***mple"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "alias",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "alias_clause"
										}
									}
								}
							]
						},
						"code": "\n stmt.parentheses = true;\n return {\n expr: stmt,\n as: alias\n };\n "
					},
					{
						"type": "rule_ref",
						"name": "from_unnest_item"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "join_op",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_LEFT"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "optional",
									"expression": {
										"type": "rule_ref",
										"name": "KW_OUTER"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_JOIN"
								}
							]
						},
						"code": " return 'LEFT JOIN'; "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_RIGHT"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "optional",
									"expression": {
										"type": "rule_ref",
										"name": "KW_OUTER"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_JOIN"
								}
							]
						},
						"code": " return 'RIGHT JOIN'; "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_FULL"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "optional",
									"expression": {
										"type": "rule_ref",
										"name": "KW_OUTER"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_JOIN"
								}
							]
						},
						"code": " return 'FULL JOIN'; "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "k",
									"expression": {
										"type": "rule_ref",
										"name": "KW_CROSS"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_JOIN"
								}
							]
						},
						"code": " return `${k[0].toUpperCase()} JOIN`; "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "k",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_INNER"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_JOIN"
								}
							]
						},
						"code": " return k ? `${k[0].toUpperCase()} JOIN` : 'JOIN'; "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "table_name",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "project",
									"expression": {
										"type": "rule_ref",
										"name": "ident"
									}
								},
								{
									"type": "labeled",
									"label": "dt",
									"expression": {
										"type": "group",
										"expression": {
											"type": "sequence",
											"elements": [
												{
													"type": "rule_ref",
													"name": "__"
												},
												{
													"type": "rule_ref",
													"name": "DOT"
												},
												{
													"type": "rule_ref",
													"name": "__"
												},
												{
													"type": "rule_ref",
													"name": "ident"
												}
											]
										}
									}
								},
								{
									"type": "labeled",
									"label": "tail",
									"expression": {
										"type": "group",
										"expression": {
											"type": "sequence",
											"elements": [
												{
													"type": "rule_ref",
													"name": "__"
												},
												{
													"type": "rule_ref",
													"name": "DOT"
												},
												{
													"type": "rule_ref",
													"name": "__"
												},
												{
													"type": "rule_ref",
													"name": "ident"
												}
											]
										}
									}
								}
							]
						},
						"code": "\n const obj = { db: null, table: project };\n if (tail !== null) {\n obj.db = `${project}.${dt[3]}`;\n obj.table = tail[3];\n }\n return obj;\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "dt",
									"expression": {
										"type": "rule_ref",
										"name": "ident"
									}
								},
								{
									"type": "labeled",
									"label": "tail",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "group",
											"expression": {
												"type": "sequence",
												"elements": [
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "DOT"
													},
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "ident"
													}
												]
											}
										}
									}
								}
							]
						},
						"code": "\n const obj = { db: null, table: dt };\n if (tail !== null) {\n obj.db = dt;\n obj.table = tail[3];\n }\n return obj;\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "on_clause",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_ON"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "or_and_where_expr"
							}
						}
					]
				},
				"code": " return e; "
			}
		},
		{
			"type": "rule",
			"name": "where_clause",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_WHERE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "or_and_where_expr"
							}
						}
					]
				},
				"code": " return e; "
			}
		},
		{
			"type": "rule",
			"name": "group_by_clause",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_GROUP"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_BY"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "expr_list"
							}
						}
					]
				},
				"code": " return e.value; "
			}
		},
		{
			"type": "rule",
			"name": "having_clause",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_HAVING"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						}
					]
				},
				"code": " return e; "
			}
		},
		{
			"type": "rule",
			"name": "window_clause",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_WINDOW"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "rule_ref",
								"name": "named_window_expr_list"
							}
						}
					]
				},
				"code": "\n return {\n keyword: 'window',\n type: 'window',\n expr: l,\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "named_window_expr_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "named_window_expr"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "named_window_expr"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "named_window_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "nw",
							"expression": {
								"type": "rule_ref",
								"name": "ident_name"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_AS"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "anw",
							"expression": {
								"type": "rule_ref",
								"name": "as_window_specification"
							}
						}
					]
				},
				"code": "\n return {\n name: nw,\n as_window_specification: anw,\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "as_window_specification",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "n",
							"expression": {
								"type": "rule_ref",
								"name": "ident_name"
							}
						},
						"code": " return n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "ws",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "window_specification"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n return {\n window_specification: ws,\n parentheses: true\n }\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "window_specification",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "n",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "ident"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "bc",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "partition_by_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "order_by_clause"
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "w",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "window_frame_clause"
								}
							}
						}
					]
				},
				"code": "\n return {\n name: n,\n partitionby: bc,\n orderby: l,\n window_frame_clause: w\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "window_frame_clause",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "literal",
									"value": "RANGE",
									"ignoreCase": true
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_BETWEEN"
								},
								{
									"type": "literal",
									"value": "UNBOUNDED",
									"ignoreCase": true
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "PRECEDING",
									"ignoreCase": true
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_AND"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "CURRENT",
									"ignoreCase": true
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "ROW",
									"ignoreCase": false
								}
							]
						},
						"code": "\n return 'range between unbounded preceding and current row'\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "kw",
									"expression": {
										"type": "rule_ref",
										"name": "KW_ROWS"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "rule_ref",
												"name": "window_frame_following"
											},
											{
												"type": "rule_ref",
												"name": "window_frame_preceding"
											}
										]
									}
								}
							]
						},
						"code": "\n // => string\n return `rows ${s.value}`\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_ROWS"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_BETWEEN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "p",
									"expression": {
										"type": "rule_ref",
										"name": "window_frame_preceding"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_AND"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "f",
									"expression": {
										"type": "rule_ref",
										"name": "window_frame_following"
									}
								}
							]
						},
						"code": "\n // => string\n return `rows between ${p.value} and ${f.value}`\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "window_frame_following",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "rule_ref",
										"name": "window_frame_value"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "FOLLOWING",
									"ignoreCase": true
								}
							]
						},
						"code": "\n // => string\n s.value += ' FOLLOWING'\n return s\n "
					},
					{
						"type": "rule_ref",
						"name": "window_frame_current_row"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "window_frame_preceding",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "rule_ref",
										"name": "window_frame_value"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "PRECEDING",
									"ignoreCase": true
								}
							]
						},
						"code": "\n // => string\n s.value += ' PRECEDING'\n return s\n "
					},
					{
						"type": "rule_ref",
						"name": "window_frame_current_row"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "window_frame_current_row",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "CURRENT",
							"ignoreCase": true
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "literal",
							"value": "ROW",
							"ignoreCase": true
						}
					]
				},
				"code": "\n // => { type: 'single_quote_string'; value: string }\n return { type: 'single_quote_string', value: 'current row' }\n "
			}
		},
		{
			"type": "rule",
			"name": "window_frame_value",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "literal",
								"value": "UNBOUNDED",
								"ignoreCase": true
							}
						},
						"code": "\n // => literal_string\n return { type: 'single_quote_string', value: s.toUpperCase() }\n "
					},
					{
						"type": "rule_ref",
						"name": "literal_numeric"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "partition_by_clause",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_PARTITION"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_BY"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "bc",
							"expression": {
								"type": "rule_ref",
								"name": "column_clause"
							}
						}
					]
				},
				"code": " return bc; "
			}
		},
		{
			"type": "rule",
			"name": "order_by_clause",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_ORDER"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_BY"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "l",
							"expression": {
								"type": "rule_ref",
								"name": "order_by_list"
							}
						}
					]
				},
				"code": " return l; "
			}
		},
		{
			"type": "rule",
			"name": "order_by_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "order_by_element"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "order_by_element"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "order_by_element",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "literal",
												"value": "COLLATE",
												"ignoreCase": true
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "literal_string"
											}
										]
									}
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "d",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "choice",
									"alternatives": [
										{
											"type": "rule_ref",
											"name": "KW_DESC"
										},
										{
											"type": "rule_ref",
											"name": "KW_ASC"
										}
									]
								}
							}
						}
					]
				},
				"code": "\n const obj = { expr: e, type: 'ASC' };\n if (d === 'DESC') obj.type = 'DESC';\n return obj;\n "
			}
		},
		{
			"type": "rule",
			"name": "number_or_param",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "literal_numeric"
					},
					{
						"type": "rule_ref",
						"name": "param"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "limit_clause",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_LIMIT"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "i1",
							"expression": {
								"type": "rule_ref",
								"name": "number_or_param"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "choice",
												"alternatives": [
													{
														"type": "rule_ref",
														"name": "COMMA"
													},
													{
														"type": "rule_ref",
														"name": "KW_OFFSET"
													}
												]
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "number_or_param"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n const res = [i1];\n if (tail) res.push(tail[2]);\n return {\n seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n value: res\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "expr_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "expr"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n const el = { type: 'expr_list' };\n el.value = createList(head, tail);\n return el;\n "
			}
		},
		{
			"type": "rule",
			"name": "expr",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "struct_expr"
					},
					{
						"type": "rule_ref",
						"name": "logic_operator_expr"
					},
					{
						"type": "rule_ref",
						"name": "or_expr"
					},
					{
						"type": "rule_ref",
						"name": "unary_expr"
					},
					{
						"type": "rule_ref",
						"name": "union_stmt"
					},
					{
						"type": "rule_ref",
						"name": "array_expr"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "parentheses_list_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "parentheses_expr"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "parentheses_expr"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "parentheses_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "rule_ref",
								"name": "column_clause"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						}
					]
				},
				"code": "\n return c\n "
			}
		},
		{
			"type": "rule",
			"name": "array_expr",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "LBRAKE"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "column_clause"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RBRAKE"
								}
							]
						},
						"code": "\n return {\n array_path: c,\n type: 'array',\n keyword: '',\n parentheses: true\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "choice",
											"alternatives": [
												{
													"type": "rule_ref",
													"name": "array_type"
												},
												{
													"type": "rule_ref",
													"name": "KW_ARRAY"
												}
											]
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "LBRAKE"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "rule_ref",
										"name": "literal_list"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RBRAKE"
								}
							]
						},
						"code": "\n return {\n definition: s,\n array_path: c.map(l => ({ expr: l, as: null })),\n type: 'array',\n keyword: s && 'array',\n parentheses: true\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "choice",
											"alternatives": [
												{
													"type": "rule_ref",
													"name": "array_type"
												},
												{
													"type": "rule_ref",
													"name": "KW_ARRAY"
												}
											]
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "choice",
									"alternatives": [
										{
											"type": "rule_ref",
											"name": "LBRAKE"
										},
										{
											"type": "rule_ref",
											"name": "LPAREN"
										}
									]
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "rule_ref",
												"name": "parentheses_list_expr"
											},
											{
												"type": "rule_ref",
												"name": "expr"
											}
										]
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "choice",
									"alternatives": [
										{
											"type": "rule_ref",
											"name": "RBRAKE"
										},
										{
											"type": "rule_ref",
											"name": "RPAREN"
										}
									]
								}
							]
						},
						"code": "\n return {\n definition: s,\n expr_list: c,\n type: 'array',\n keyword: s && 'array',\n parentheses: true\n }\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "struct_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "struct_type"
									},
									{
										"type": "rule_ref",
										"name": "KW_STRUCT"
									}
								]
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "c",
							"expression": {
								"type": "rule_ref",
								"name": "column_clause"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						}
					]
				},
				"code": "\n return {\n definition: s,\n expr_list: c,\n type: 'struct',\n keyword: s && 'struct',\n parentheses: true\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "logic_operator_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "primary"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "one_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "LOGIC_OPERATOR"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "primary"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createBinaryExprChain(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "unary_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "op",
							"expression": {
								"type": "rule_ref",
								"name": "additive_operator"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "one_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "primary"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createUnaryExpr(op, tail[0][1]);\n "
			}
		},
		{
			"type": "rule",
			"name": "or_and_where_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "choice",
												"alternatives": [
													{
														"type": "rule_ref",
														"name": "KW_AND"
													},
													{
														"type": "rule_ref",
														"name": "KW_OR"
													},
													{
														"type": "rule_ref",
														"name": "COMMA"
													}
												]
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "expr"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n let result = head;\n let seperator = ''\n for (let i = 0; i < tail.length; i++) {\n if (tail[i][1] === ',') {\n seperator = ','\n if (!Array.isArray(result)) result = [result]\n result.push(tail[i][3])\n } else {\n result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n }\n }\n if (seperator === ',') {\n const el = { type: 'expr_list' };\n el.value = result\n return el\n }\n return result;\n "
			}
		},
		{
			"type": "rule",
			"name": "or_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "and_expr"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "___"
											},
											{
												"type": "rule_ref",
												"name": "KW_OR"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "and_expr"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createBinaryExprChain(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "and_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "not_expr"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "___"
											},
											{
												"type": "rule_ref",
												"name": "KW_AND"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "not_expr"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createBinaryExprChain(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "not_expr",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "comparison_expr"
					},
					{
						"type": "rule_ref",
						"name": "exists_expr"
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "choice",
									"alternatives": [
										{
											"type": "rule_ref",
											"name": "KW_NOT"
										},
										{
											"type": "sequence",
											"elements": [
												{
													"type": "literal",
													"value": "!",
													"ignoreCase": false
												},
												{
													"type": "simple_not",
													"expression": {
														"type": "literal",
														"value": "=",
														"ignoreCase": false
													}
												}
											]
										}
									]
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "expr",
									"expression": {
										"type": "rule_ref",
										"name": "not_expr"
									}
								}
							]
						},
						"code": "\n return createUnaryExpr('NOT', expr);\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "comparison_expr",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "left",
									"expression": {
										"type": "rule_ref",
										"name": "additive_expr"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "rh",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "comparison_op_right"
										}
									}
								}
							]
						},
						"code": "\n if (rh === null) return left;\n else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n else return createBinaryExpr(rh.op, left, rh.right);\n "
					},
					{
						"type": "rule_ref",
						"name": "literal_string"
					},
					{
						"type": "rule_ref",
						"name": "column_ref"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "exists_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "op",
							"expression": {
								"type": "rule_ref",
								"name": "exists_op"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "stmt",
							"expression": {
								"type": "rule_ref",
								"name": "union_stmt"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						}
					]
				},
				"code": "\n stmt.parentheses = true;\n return createUnaryExpr(op, stmt);\n "
			}
		},
		{
			"type": "rule",
			"name": "exists_op",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "nk",
							"expression": {
								"type": "group",
								"expression": {
									"type": "sequence",
									"elements": [
										{
											"type": "rule_ref",
											"name": "KW_NOT"
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "rule_ref",
											"name": "KW_EXISTS"
										}
									]
								}
							}
						},
						"code": " return nk[0] + ' ' + nk[2]; "
					},
					{
						"type": "rule_ref",
						"name": "KW_EXISTS"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "comparison_op_right",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "arithmetic_op_right"
					},
					{
						"type": "rule_ref",
						"name": "in_op_right"
					},
					{
						"type": "rule_ref",
						"name": "between_op_right"
					},
					{
						"type": "rule_ref",
						"name": "is_op_right"
					},
					{
						"type": "rule_ref",
						"name": "like_op_right"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "arithmetic_op_right",
			"expression": {
				"type": "action",
				"expression": {
					"type": "labeled",
					"label": "l",
					"expression": {
						"type": "one_or_more",
						"expression": {
							"type": "group",
							"expression": {
								"type": "sequence",
								"elements": [
									{
										"type": "rule_ref",
										"name": "__"
									},
									{
										"type": "rule_ref",
										"name": "arithmetic_comparison_operator"
									},
									{
										"type": "rule_ref",
										"name": "__"
									},
									{
										"type": "rule_ref",
										"name": "additive_expr"
									}
								]
							}
						}
					}
				},
				"code": "\n return { type: 'arithmetic', tail: l };\n "
			}
		},
		{
			"type": "rule",
			"name": "arithmetic_comparison_operator",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "literal",
						"value": ">=",
						"ignoreCase": false
					},
					{
						"type": "literal",
						"value": ">",
						"ignoreCase": false
					},
					{
						"type": "literal",
						"value": "<=",
						"ignoreCase": false
					},
					{
						"type": "literal",
						"value": "<>",
						"ignoreCase": false
					},
					{
						"type": "literal",
						"value": "<",
						"ignoreCase": false
					},
					{
						"type": "literal",
						"value": "=",
						"ignoreCase": false
					},
					{
						"type": "literal",
						"value": "!=",
						"ignoreCase": false
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "is_op_right",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_IS"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "right",
									"expression": {
										"type": "rule_ref",
										"name": "additive_expr"
									}
								}
							]
						},
						"code": "\n return { op: 'IS', right: right };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "KW_IS"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "KW_NOT"
											}
										]
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "right",
									"expression": {
										"type": "rule_ref",
										"name": "additive_expr"
									}
								}
							]
						},
						"code": "\n return { op: 'IS NOT', right: right };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "between_op_right",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "op",
							"expression": {
								"type": "rule_ref",
								"name": "between_or_not_between_op"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "begin",
							"expression": {
								"type": "rule_ref",
								"name": "additive_expr"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_AND"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "end",
							"expression": {
								"type": "rule_ref",
								"name": "additive_expr"
							}
						}
					]
				},
				"code": "\n return {\n op: op,\n right: {\n type: 'expr_list',\n value: [begin, end]\n }\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "between_or_not_between_op",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "nk",
							"expression": {
								"type": "group",
								"expression": {
									"type": "sequence",
									"elements": [
										{
											"type": "rule_ref",
											"name": "KW_NOT"
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "rule_ref",
											"name": "KW_BETWEEN"
										}
									]
								}
							}
						},
						"code": " return nk[0] + ' ' + nk[2]; "
					},
					{
						"type": "rule_ref",
						"name": "KW_BETWEEN"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "like_op",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "nk",
							"expression": {
								"type": "group",
								"expression": {
									"type": "sequence",
									"elements": [
										{
											"type": "rule_ref",
											"name": "KW_NOT"
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "rule_ref",
											"name": "KW_LIKE"
										}
									]
								}
							}
						},
						"code": " return nk[0] + ' ' + nk[2]; "
					},
					{
						"type": "rule_ref",
						"name": "KW_LIKE"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "in_op",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "nk",
							"expression": {
								"type": "group",
								"expression": {
									"type": "sequence",
									"elements": [
										{
											"type": "rule_ref",
											"name": "KW_NOT"
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "rule_ref",
											"name": "KW_IN"
										}
									]
								}
							}
						},
						"code": " return nk[0] + ' ' + nk[2]; "
					},
					{
						"type": "rule_ref",
						"name": "KW_IN"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "like_op_right",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "op",
							"expression": {
								"type": "rule_ref",
								"name": "like_op"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "right",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "literal"
									},
									{
										"type": "rule_ref",
										"name": "comparison_expr"
									}
								]
							}
						}
					]
				},
				"code": "\n return { op: op, right: right };\n "
			}
		},
		{
			"type": "rule",
			"name": "in_op_right",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "op",
									"expression": {
										"type": "rule_ref",
										"name": "in_op"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "l",
									"expression": {
										"type": "rule_ref",
										"name": "expr_list"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n return { op: op, right: l };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "op",
									"expression": {
										"type": "rule_ref",
										"name": "in_op"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "e",
									"expression": {
										"type": "rule_ref",
										"name": "literal_string"
									}
								}
							]
						},
						"code": "\n return { op: op, right: e };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "additive_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "multiplicative_expr"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "additive_operator"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "multiplicative_expr"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createBinaryExprChain(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "additive_operator",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "literal",
						"value": "+",
						"ignoreCase": false
					},
					{
						"type": "literal",
						"value": "-",
						"ignoreCase": false
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "multiplicative_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "primary"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "multiplicative_operator"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "primary"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createBinaryExprChain(head, tail)\n "
			}
		},
		{
			"type": "rule",
			"name": "multiplicative_operator",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "literal",
						"value": "*",
						"ignoreCase": false
					},
					{
						"type": "literal",
						"value": "/",
						"ignoreCase": false
					},
					{
						"type": "literal",
						"value": "%",
						"ignoreCase": false
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "primary",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "array_expr"
					},
					{
						"type": "rule_ref",
						"name": "struct_expr"
					},
					{
						"type": "rule_ref",
						"name": "cast_expr"
					},
					{
						"type": "rule_ref",
						"name": "literal"
					},
					{
						"type": "rule_ref",
						"name": "aggr_func"
					},
					{
						"type": "rule_ref",
						"name": "func_call"
					},
					{
						"type": "rule_ref",
						"name": "case_expr"
					},
					{
						"type": "rule_ref",
						"name": "interval_expr"
					},
					{
						"type": "rule_ref",
						"name": "column_ref"
					},
					{
						"type": "rule_ref",
						"name": "param"
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "list",
									"expression": {
										"type": "rule_ref",
										"name": "or_and_where_expr"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n list.parentheses = true;\n return list;\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "interval_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_INTERVAL"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "u",
							"expression": {
								"type": "rule_ref",
								"name": "interval_unit"
							}
						}
					]
				},
				"code": "\n return {\n type: 'interval',\n expr: e,\n unit: u.toLowerCase(),\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "case_expr",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_CASE"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "condition_list",
									"expression": {
										"type": "one_or_more",
										"expression": {
											"type": "rule_ref",
											"name": "case_when_then"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "otherwise",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "case_else"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_END"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "optional",
									"expression": {
										"type": "rule_ref",
										"name": "KW_CASE"
									}
								}
							]
						},
						"code": "\n if (otherwise) condition_list.push(otherwise);\n return {\n type: 'case',\n expr: null,\n args: condition_list\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_CASE"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "expr",
									"expression": {
										"type": "rule_ref",
										"name": "expr"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "condition_list",
									"expression": {
										"type": "one_or_more",
										"expression": {
											"type": "rule_ref",
											"name": "case_when_then"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "otherwise",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "case_else"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_END"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "optional",
									"expression": {
										"type": "rule_ref",
										"name": "KW_CASE"
									}
								}
							]
						},
						"code": "\n if (otherwise) condition_list.push(otherwise);\n return {\n type: 'case',\n expr: expr,\n args: condition_list\n };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "case_when_then",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_WHEN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "condition",
							"expression": {
								"type": "rule_ref",
								"name": "or_and_where_expr"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_THEN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "result",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						}
					]
				},
				"code": "\n return {\n type: 'when',\n cond: condition,\n result: result\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "case_else",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "rule_ref",
							"name": "KW_ELSE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "result",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						}
					]
				},
				"code": "\n return { type: 'else', result: result };\n "
			}
		},
		{
			"type": "rule",
			"name": "column_ref",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "schema",
									"expression": {
										"type": "rule_ref",
										"name": "ident"
									}
								},
								{
									"type": "labeled",
									"label": "tbl",
									"expression": {
										"type": "group",
										"expression": {
											"type": "sequence",
											"elements": [
												{
													"type": "rule_ref",
													"name": "__"
												},
												{
													"type": "rule_ref",
													"name": "DOT"
												},
												{
													"type": "rule_ref",
													"name": "__"
												},
												{
													"type": "rule_ref",
													"name": "ident"
												}
											]
										}
									}
								},
								{
									"type": "labeled",
									"label": "col",
									"expression": {
										"type": "one_or_more",
										"expression": {
											"type": "group",
											"expression": {
												"type": "sequence",
												"elements": [
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "DOT"
													},
													{
														"type": "rule_ref",
														"name": "__"
													},
													{
														"type": "rule_ref",
														"name": "column"
													}
												]
											}
										}
									}
								}
							]
						},
						"code": "\n const columns = col.map(c => c[3]).join('.') || null\n columnList.add(`select::${schema}.${tbl[3]}::${col[0][3]}`);\n return {\n type: 'column_ref',\n schema: schema,\n table: tbl[3],\n column: columns\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "tbl",
									"expression": {
										"type": "rule_ref",
										"name": "ident"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "DOT"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "col",
									"expression": {
										"type": "rule_ref",
										"name": "column_without_kw"
									}
								}
							]
						},
						"code": "\n columnList.add(`select::${tbl}::${col}`);\n return {\n type: 'column_ref',\n table: tbl,\n column: col\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "col",
							"expression": {
								"type": "rule_ref",
								"name": "column"
							}
						},
						"code": "\n columnList.add(`select::null::${col}`);\n return {\n type: 'column_ref',\n table: null,\n column: col\n };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "column_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "column"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "column"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "ident",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "name",
									"expression": {
										"type": "rule_ref",
										"name": "ident_name"
									}
								},
								{
									"type": "semantic_not",
									"code": " return reservedMap[name.toUpperCase()] === true; "
								}
							]
						},
						"code": "\n return name;\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "name",
							"expression": {
								"type": "rule_ref",
								"name": "quoted_ident"
							}
						},
						"code": "\n return name;\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "alias_ident",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "name",
									"expression": {
										"type": "rule_ref",
										"name": "ident_name"
									}
								},
								{
									"type": "semantic_not",
									"code": "\n if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n return false\n "
								}
							]
						},
						"code": "\n return name;\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "name",
							"expression": {
								"type": "rule_ref",
								"name": "quoted_ident"
							}
						},
						"code": "\n return name;\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "quoted_ident",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "double_quoted_ident"
					},
					{
						"type": "rule_ref",
						"name": "single_quoted_ident"
					},
					{
						"type": "rule_ref",
						"name": "backticks_quoted_ident"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "double_quoted_ident",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "\"",
							"ignoreCase": false
						},
						{
							"type": "labeled",
							"label": "chars",
							"expression": {
								"type": "one_or_more",
								"expression": {
									"type": "class",
									"parts": [
										"\""
									],
									"inverted": true,
									"ignoreCase": false
								}
							}
						},
						{
							"type": "literal",
							"value": "\"",
							"ignoreCase": false
						}
					]
				},
				"code": " return chars.join(''); "
			}
		},
		{
			"type": "rule",
			"name": "single_quoted_ident",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "'",
							"ignoreCase": false
						},
						{
							"type": "labeled",
							"label": "chars",
							"expression": {
								"type": "one_or_more",
								"expression": {
									"type": "class",
									"parts": [
										"'"
									],
									"inverted": true,
									"ignoreCase": false
								}
							}
						},
						{
							"type": "literal",
							"value": "'",
							"ignoreCase": false
						}
					]
				},
				"code": " return chars.join(''); "
			}
		},
		{
			"type": "rule",
			"name": "backticks_quoted_ident",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "`",
							"ignoreCase": false
						},
						{
							"type": "labeled",
							"label": "chars",
							"expression": {
								"type": "one_or_more",
								"expression": {
									"type": "class",
									"parts": [
										"`"
									],
									"inverted": true,
									"ignoreCase": false
								}
							}
						},
						{
							"type": "literal",
							"value": "`",
							"ignoreCase": false
						}
					]
				},
				"code": " return `\\`${chars.join('')}\\``; "
			}
		},
		{
			"type": "rule",
			"name": "column_without_kw",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "name",
							"expression": {
								"type": "rule_ref",
								"name": "column_name"
							}
						},
						"code": "\n return name;\n "
					},
					{
						"type": "rule_ref",
						"name": "quoted_ident"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "column",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "name",
									"expression": {
										"type": "rule_ref",
										"name": "column_name"
									}
								},
								{
									"type": "semantic_not",
									"code": " return reservedMap[name.toUpperCase()] === true; "
								}
							]
						},
						"code": " return name; "
					},
					{
						"type": "rule_ref",
						"name": "quoted_ident"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "column_name",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "start",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						},
						{
							"type": "labeled",
							"label": "parts",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "rule_ref",
									"name": "column_part"
								}
							}
						}
					]
				},
				"code": " return start + parts.join(''); "
			}
		},
		{
			"type": "rule",
			"name": "ident_name",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "start",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						},
						{
							"type": "labeled",
							"label": "parts",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "rule_ref",
									"name": "ident_part"
								}
							}
						}
					]
				},
				"code": " return start + parts.join(''); "
			}
		},
		{
			"type": "rule",
			"name": "ident_start",
			"expression": {
				"type": "class",
				"parts": [
					[
						"A",
						"Z"
					],
					[
						"a",
						"z"
					],
					"_"
				],
				"inverted": false,
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "ident_part",
			"expression": {
				"type": "class",
				"parts": [
					[
						"A",
						"Z"
					],
					[
						"a",
						"z"
					],
					[
						"0",
						"9"
					],
					"_",
					"-"
				],
				"inverted": false,
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "column_part",
			"expression": {
				"type": "class",
				"parts": [
					[
						"A",
						"Z"
					],
					[
						"a",
						"z"
					],
					[
						"0",
						"9"
					],
					"_",
					":"
				],
				"inverted": false,
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "param",
			"expression": {
				"type": "action",
				"expression": {
					"type": "labeled",
					"label": "l",
					"expression": {
						"type": "group",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "literal",
									"value": ":",
									"ignoreCase": false
								},
								{
									"type": "rule_ref",
									"name": "ident_name"
								}
							]
						}
					}
				},
				"code": "\n return { type: 'param', value: l[1] };\n "
			}
		},
		{
			"type": "rule",
			"name": "aggr_func_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "aggr_func"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "as",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "alias_clause"
								}
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "aggr_func"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "optional",
												"expression": {
													"type": "rule_ref",
													"name": "alias_clause"
												}
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n const el = { type: 'expr_list' };\n el.value = createList(head, tail);\n return el;\n "
			}
		},
		{
			"type": "rule",
			"name": "aggr_func",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "aggr_fun_count"
					},
					{
						"type": "rule_ref",
						"name": "aggr_fun_smma"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "aggr_fun_smma",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "name",
							"expression": {
								"type": "rule_ref",
								"name": "KW_SUM_MAX_MIN_AVG"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "additive_expr"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "bc",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "over_partition"
								}
							}
						}
					]
				},
				"code": "\n return {\n type: 'aggr_func',\n name: name,\n args: {\n expr: e\n },\n over: bc,\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "KW_SUM_MAX_MIN_AVG",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "KW_SUM"
					},
					{
						"type": "rule_ref",
						"name": "KW_MAX"
					},
					{
						"type": "rule_ref",
						"name": "KW_MIN"
					},
					{
						"type": "rule_ref",
						"name": "KW_AVG"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "on_update_current_timestamp",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_ON"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "UPDATE",
									"ignoreCase": true
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "kw",
									"expression": {
										"type": "rule_ref",
										"name": "KW_CURRENT_TIMESTAMP"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "l",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "expr_list"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n return {\n type: 'on update',\n keyword: kw,\n parentheses: true,\n expr: l\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_ON"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "literal",
									"value": "UPDATE",
									"ignoreCase": true
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "kw",
									"expression": {
										"type": "rule_ref",
										"name": "KW_CURRENT_TIMESTAMP"
									}
								}
							]
						},
						"code": "\n return {\n type: 'on update',\n keyword: kw,\n }\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "over_partition",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_OVER"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "aws",
									"expression": {
										"type": "rule_ref",
										"name": "as_window_specification"
									}
								}
							]
						},
						"code": "\n return {\n type: 'window',\n as_window_specification: aws,\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_OVER"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "bc",
									"expression": {
										"type": "rule_ref",
										"name": "partition_by_clause"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "l",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "order_by_clause"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n return {\n partitionby: bc,\n orderby: l\n }\n "
					},
					{
						"type": "rule_ref",
						"name": "on_update_current_timestamp"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "aggr_fun_count",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "name",
							"expression": {
								"type": "rule_ref",
								"name": "KW_COUNT"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "arg",
							"expression": {
								"type": "rule_ref",
								"name": "count_arg"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "bc",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "rule_ref",
									"name": "over_partition"
								}
							}
						}
					]
				},
				"code": "\n return {\n type: 'aggr_func',\n name: name,\n args: arg,\n over: bc\n };\n "
			}
		},
		{
			"type": "rule",
			"name": "count_arg",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "star_expr"
							}
						},
						"code": " return { expr: e }; "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "d",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_DISTINCT"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "rule_ref",
										"name": "column_ref"
									}
								}
							]
						},
						"code": " return { distinct: d, expr: c }; "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "d",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_DISTINCT"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "c",
									"expression": {
										"type": "rule_ref",
										"name": "expr"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "or",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "order_by_clause"
										}
									}
								}
							]
						},
						"code": " return { distinct: d, expr: c, orderby: or, parentheses: true }; "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "star_expr",
			"expression": {
				"type": "action",
				"expression": {
					"type": "literal",
					"value": "*",
					"ignoreCase": false
				},
				"code": " return { type: 'star', value: '*' }; "
			}
		},
		{
			"type": "rule",
			"name": "func_call",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "extract_func"
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "name",
									"expression": {
										"type": "rule_ref",
										"name": "proc_func_name"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "l",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "or_and_where_expr"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "bc",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "over_partition"
										}
									}
								}
							]
						},
						"code": "\n if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n return {\n type: 'function',\n name: name,\n args: l ? l: { type: 'expr_list', value: [] },\n over: bc\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "name",
									"expression": {
										"type": "rule_ref",
										"name": "scalar_func"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "l",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "expr_list"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "bc",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "over_partition"
										}
									}
								}
							]
						},
						"code": "\n return {\n type: 'function',\n name: name,\n args: l ? l: { type: 'expr_list', value: [] },\n over: bc\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "f",
									"expression": {
										"type": "rule_ref",
										"name": "KW_CURRENT_TIMESTAMP"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "up",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "on_update_current_timestamp"
										}
									}
								}
							]
						},
						"code": "\n return {\n type: 'function',\n name: f,\n over: up\n }\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "proc_func_name",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "dt",
							"expression": {
								"type": "rule_ref",
								"name": "ident"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "DOT"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "ident"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n let name = dt\n if (tail !== null) {\n tail.forEach(t => name = `${name}.${t[3]}`)\n }\n return name;\n "
			}
		},
		{
			"type": "rule",
			"name": "scalar_func",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "KW_CURRENT_DATE"
					},
					{
						"type": "rule_ref",
						"name": "KW_CURRENT_TIME"
					},
					{
						"type": "rule_ref",
						"name": "KW_CURRENT_TIMESTAMP"
					},
					{
						"type": "rule_ref",
						"name": "KW_SESSION_USER"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "extract_filed",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "labeled",
						"label": "f",
						"expression": {
							"type": "literal",
							"value": "CENTURY",
							"ignoreCase": true
						}
					},
					{
						"type": "literal",
						"value": "DAY",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "DATE",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "DECADE",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "DOW",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "DOY",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "EPOCH",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "HOUR",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "ISODOW",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "ISOYEAR",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "MICROSECONDS",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "MILLENNIUM",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "MILLISECONDS",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "MINUTE",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "MONTH",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "QUARTER",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "SECOND",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "TIMEZONE",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "TIMEZONE_HOUR",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "TIMEZONE_MINUTE",
						"ignoreCase": true
					},
					{
						"type": "literal",
						"value": "WEEK",
						"ignoreCase": true
					},
					{
						"type": "action",
						"expression": {
							"type": "literal",
							"value": "YEAR",
							"ignoreCase": true
						},
						"code": "\n return f\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "extract_func",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "kw",
							"expression": {
								"type": "rule_ref",
								"name": "KW_EXTRACT"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LPAREN"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "f",
							"expression": {
								"type": "rule_ref",
								"name": "extract_filed"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "KW_FROM"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "choice",
									"alternatives": [
										{
											"type": "rule_ref",
											"name": "KW_TIMESTAMP"
										},
										{
											"type": "rule_ref",
											"name": "KW_INTERVAL"
										},
										{
											"type": "rule_ref",
											"name": "KW_TIME"
										},
										{
											"type": "rule_ref",
											"name": "KW_DATE"
										}
									]
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "s",
							"expression": {
								"type": "rule_ref",
								"name": "expr"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RPAREN"
						}
					]
				},
				"code": "\n return {\n type: kw.toLowerCase(),\n args: {\n field: f,\n cast_type: t,\n source: s,\n }\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "cast_expr",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_CAST"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "e",
									"expression": {
										"type": "rule_ref",
										"name": "expr"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_AS"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "rule_ref",
										"name": "data_type"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n return {\n type: 'cast',\n expr: e,\n symbol: 'as',\n target: t\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_CAST"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "e",
									"expression": {
										"type": "rule_ref",
										"name": "expr"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_AS"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_DECIMAL"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "precision",
									"expression": {
										"type": "rule_ref",
										"name": "int"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n return {\n type: 'cast',\n expr: e,\n symbol: 'as',\n target: {\n dataType: 'DECIMAL(' + precision + ')'\n }\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_CAST"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "e",
									"expression": {
										"type": "rule_ref",
										"name": "expr"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_AS"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_DECIMAL"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "precision",
									"expression": {
										"type": "rule_ref",
										"name": "int"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "COMMA"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "scale",
									"expression": {
										"type": "rule_ref",
										"name": "int"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": "\n return {\n type: 'cast',\n expr: e,\n symbol: 'as',\n target: {\n dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n }\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "rule_ref",
									"name": "KW_CAST"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "e",
									"expression": {
										"type": "rule_ref",
										"name": "expr"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "KW_AS"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "s",
									"expression": {
										"type": "rule_ref",
										"name": "signedness"
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "rule_ref",
											"name": "KW_INTEGER"
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": " /* MySQL cast to un-/signed integer */\n return {\n type: 'cast',\n expr: e,\n symbol: 'as',\n target: {\n dataType: s + (t ? ' ' + t: '')\n }\n };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "signedness",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "KW_SIGNED"
					},
					{
						"type": "rule_ref",
						"name": "KW_UNSIGNED"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "literal",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "literal_string"
					},
					{
						"type": "rule_ref",
						"name": "literal_numeric"
					},
					{
						"type": "rule_ref",
						"name": "literal_bool"
					},
					{
						"type": "rule_ref",
						"name": "literal_null"
					},
					{
						"type": "rule_ref",
						"name": "literal_datetime"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "literal_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "literal"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "literal"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "literal_null",
			"expression": {
				"type": "action",
				"expression": {
					"type": "rule_ref",
					"name": "KW_NULL"
				},
				"code": "\n return { type: 'null', value: null };\n "
			}
		},
		{
			"type": "rule",
			"name": "literal_not_null",
			"expression": {
				"type": "action",
				"expression": {
					"type": "rule_ref",
					"name": "KW_NOT_NULL"
				},
				"code": "\n return {\n type: 'not null',\n value: 'not null',\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "literal_bool",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "rule_ref",
							"name": "KW_TRUE"
						},
						"code": "\n return { type: 'bool', value: true };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "rule_ref",
							"name": "KW_FALSE"
						},
						"code": "\n return { type: 'bool', value: false };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "literal_string",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "r",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "literal",
											"value": "R",
											"ignoreCase": true
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "ca",
									"expression": {
										"type": "group",
										"expression": {
											"type": "sequence",
											"elements": [
												{
													"type": "literal",
													"value": "'",
													"ignoreCase": false
												},
												{
													"type": "zero_or_more",
													"expression": {
														"type": "rule_ref",
														"name": "single_char"
													}
												},
												{
													"type": "literal",
													"value": "'",
													"ignoreCase": false
												}
											]
										}
									}
								}
							]
						},
						"code": "\n return {\n type: r ? 'regex_string' : 'single_quote_string',\n value: ca[1].join('')\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "r",
									"expression": {
										"type": "optional",
										"expression": {
											"type": "literal",
											"value": "R",
											"ignoreCase": true
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "ca",
									"expression": {
										"type": "group",
										"expression": {
											"type": "sequence",
											"elements": [
												{
													"type": "literal",
													"value": "\"",
													"ignoreCase": false
												},
												{
													"type": "zero_or_more",
													"expression": {
														"type": "rule_ref",
														"name": "single_quote_char"
													}
												},
												{
													"type": "literal",
													"value": "\"",
													"ignoreCase": false
												}
											]
										}
									}
								}
							]
						},
						"code": "\n return {\n type: r ? 'regex_string' : 'string',\n value: ca[1].join('')\n };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "literal_datetime",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "type",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "rule_ref",
												"name": "KW_TIME"
											},
											{
												"type": "rule_ref",
												"name": "KW_DATE"
											},
											{
												"type": "rule_ref",
												"name": "KW_TIMESTAMP"
											},
											{
												"type": "rule_ref",
												"name": "KW_DATETIME"
											}
										]
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "ca",
									"expression": {
										"type": "group",
										"expression": {
											"type": "sequence",
											"elements": [
												{
													"type": "literal",
													"value": "'",
													"ignoreCase": false
												},
												{
													"type": "zero_or_more",
													"expression": {
														"type": "rule_ref",
														"name": "single_char"
													}
												},
												{
													"type": "literal",
													"value": "'",
													"ignoreCase": false
												}
											]
										}
									}
								}
							]
						},
						"code": "\n return {\n type: type.toLowerCase(),\n value: ca[1].join('')\n };\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "type",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "rule_ref",
												"name": "KW_TIME"
											},
											{
												"type": "rule_ref",
												"name": "KW_DATE"
											},
											{
												"type": "rule_ref",
												"name": "KW_TIMESTAMP"
											},
											{
												"type": "rule_ref",
												"name": "KW_DATETIME"
											}
										]
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "ca",
									"expression": {
										"type": "group",
										"expression": {
											"type": "sequence",
											"elements": [
												{
													"type": "literal",
													"value": "\"",
													"ignoreCase": false
												},
												{
													"type": "zero_or_more",
													"expression": {
														"type": "rule_ref",
														"name": "single_quote_char"
													}
												},
												{
													"type": "literal",
													"value": "\"",
													"ignoreCase": false
												}
											]
										}
									}
								}
							]
						},
						"code": "\n return {\n type: type.toLowerCase(),\n value: ca[1].join('')\n };\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "single_quote_char",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "class",
						"parts": [
							"\"",
							"\\",
							[
								"\u0000",
								"\u001f"
							],
							""
						],
						"inverted": true,
						"ignoreCase": false
					},
					{
						"type": "rule_ref",
						"name": "escape_char"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "single_char",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "class",
						"parts": [
							"'",
							"\\"
						],
						"inverted": true,
						"ignoreCase": false
					},
					{
						"type": "rule_ref",
						"name": "escape_char"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "escape_char",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "literal",
							"value": "\\'",
							"ignoreCase": false
						},
						"code": " return \"\\\\'\"; "
					},
					{
						"type": "action",
						"expression": {
							"type": "literal",
							"value": "\\\"",
							"ignoreCase": false
						},
						"code": " return '\\\\\"'; "
					},
					{
						"type": "action",
						"expression": {
							"type": "literal",
							"value": "\\\\",
							"ignoreCase": false
						},
						"code": " return \"\\\\\\\\\"; "
					},
					{
						"type": "action",
						"expression": {
							"type": "literal",
							"value": "\\/",
							"ignoreCase": false
						},
						"code": " return \"\\\\/\"; "
					},
					{
						"type": "action",
						"expression": {
							"type": "literal",
							"value": "\\b",
							"ignoreCase": false
						},
						"code": " return \"\\b\"; "
					},
					{
						"type": "action",
						"expression": {
							"type": "literal",
							"value": "\\f",
							"ignoreCase": false
						},
						"code": " return \"\\f\"; "
					},
					{
						"type": "action",
						"expression": {
							"type": "literal",
							"value": "\\n",
							"ignoreCase": false
						},
						"code": " return \"\\n\"; "
					},
					{
						"type": "action",
						"expression": {
							"type": "literal",
							"value": "\\r",
							"ignoreCase": false
						},
						"code": " return \"\\r\"; "
					},
					{
						"type": "action",
						"expression": {
							"type": "literal",
							"value": "\\t",
							"ignoreCase": false
						},
						"code": " return \"\\t\"; "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "literal",
									"value": "\\u",
									"ignoreCase": false
								},
								{
									"type": "labeled",
									"label": "h1",
									"expression": {
										"type": "rule_ref",
										"name": "hexDigit"
									}
								},
								{
									"type": "labeled",
									"label": "h2",
									"expression": {
										"type": "rule_ref",
										"name": "hexDigit"
									}
								},
								{
									"type": "labeled",
									"label": "h3",
									"expression": {
										"type": "rule_ref",
										"name": "hexDigit"
									}
								},
								{
									"type": "labeled",
									"label": "h4",
									"expression": {
										"type": "rule_ref",
										"name": "hexDigit"
									}
								}
							]
						},
						"code": "\n return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "literal",
							"value": "\\",
							"ignoreCase": false
						},
						"code": " return \"\\\\\"; "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "line_terminator",
			"expression": {
				"type": "class",
				"parts": [
					"\n",
					"\r"
				],
				"inverted": false,
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "literal_numeric",
			"expression": {
				"type": "action",
				"expression": {
					"type": "labeled",
					"label": "n",
					"expression": {
						"type": "rule_ref",
						"name": "number"
					}
				},
				"code": "\n if (n && n.type === 'bigint') return n\n return { type: 'number', value: n };\n "
			}
		},
		{
			"type": "rule",
			"name": "number",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "int_",
									"expression": {
										"type": "rule_ref",
										"name": "int"
									}
								},
								{
									"type": "labeled",
									"label": "frac",
									"expression": {
										"type": "rule_ref",
										"name": "frac"
									}
								},
								{
									"type": "labeled",
									"label": "exp",
									"expression": {
										"type": "rule_ref",
										"name": "exp"
									}
								}
							]
						},
						"code": "\n const numStr = int_ + frac + exp\n return {\n type: 'bigint',\n value: numStr\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "int_",
									"expression": {
										"type": "rule_ref",
										"name": "int"
									}
								},
								{
									"type": "labeled",
									"label": "frac",
									"expression": {
										"type": "rule_ref",
										"name": "frac"
									}
								}
							]
						},
						"code": "\n const numStr = int_ + frac\n if (isBigInt(int_)) return {\n type: 'bigint',\n value: numStr\n }\n return parseFloat(numStr);\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "int_",
									"expression": {
										"type": "rule_ref",
										"name": "int"
									}
								},
								{
									"type": "labeled",
									"label": "exp",
									"expression": {
										"type": "rule_ref",
										"name": "exp"
									}
								}
							]
						},
						"code": "\n const numStr = int_ + exp\n return {\n type: 'bigint',\n value: numStr\n }\n "
					},
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "int_",
							"expression": {
								"type": "rule_ref",
								"name": "int"
							}
						},
						"code": "\n if (isBigInt(int_)) return {\n type: 'bigint',\n value: int_\n }\n return parseFloat(int_);\n "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "int",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "digits"
					},
					{
						"type": "labeled",
						"label": "digit",
						"expression": {
							"type": "rule_ref",
							"name": "digit"
						}
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "op",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "literal",
												"value": "-",
												"ignoreCase": false
											},
											{
												"type": "literal",
												"value": "+",
												"ignoreCase": false
											}
										]
									}
								},
								{
									"type": "labeled",
									"label": "digits",
									"expression": {
										"type": "rule_ref",
										"name": "digits"
									}
								}
							]
						},
						"code": " return op + digits; "
					},
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "op",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "literal",
												"value": "-",
												"ignoreCase": false
											},
											{
												"type": "literal",
												"value": "+",
												"ignoreCase": false
											}
										]
									}
								},
								{
									"type": "labeled",
									"label": "digit",
									"expression": {
										"type": "rule_ref",
										"name": "digit"
									}
								}
							]
						},
						"code": " return op + digit; "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "frac",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": ".",
							"ignoreCase": false
						},
						{
							"type": "labeled",
							"label": "digits",
							"expression": {
								"type": "rule_ref",
								"name": "digits"
							}
						}
					]
				},
				"code": " return \".\" + digits; "
			}
		},
		{
			"type": "rule",
			"name": "exp",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "rule_ref",
								"name": "e"
							}
						},
						{
							"type": "labeled",
							"label": "digits",
							"expression": {
								"type": "rule_ref",
								"name": "digits"
							}
						}
					]
				},
				"code": " return e + digits; "
			}
		},
		{
			"type": "rule",
			"name": "digits",
			"expression": {
				"type": "action",
				"expression": {
					"type": "labeled",
					"label": "digits",
					"expression": {
						"type": "one_or_more",
						"expression": {
							"type": "rule_ref",
							"name": "digit"
						}
					}
				},
				"code": " return digits.join(\"\"); "
			}
		},
		{
			"type": "rule",
			"name": "digit",
			"expression": {
				"type": "class",
				"parts": [
					[
						"0",
						"9"
					]
				],
				"inverted": false,
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "hexDigit",
			"expression": {
				"type": "class",
				"parts": [
					[
						"0",
						"9"
					],
					[
						"a",
						"f"
					],
					[
						"A",
						"F"
					]
				],
				"inverted": false,
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "e",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "e",
							"expression": {
								"type": "class",
								"parts": [
									"e",
									"E"
								],
								"inverted": false,
								"ignoreCase": false
							}
						},
						{
							"type": "labeled",
							"label": "sign",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "class",
									"parts": [
										"+",
										"-"
									],
									"inverted": false,
									"ignoreCase": false
								}
							}
						}
					]
				},
				"code": " return e + (sign !== null ? sign: ''); "
			}
		},
		{
			"type": "rule",
			"name": "KW_NULL",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "NULL",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_DEFAULT",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "DEFAULT",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_NOT_NULL",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "NOT NULL",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_TRUE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "TRUE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_TO",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "TO",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_FALSE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "FALSE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_DROP",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "DROP",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'DROP'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_USE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "USE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_SELECT",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "SELECT",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_RECURSIVE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "RECURSIVE",
						"ignoreCase": false
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_IGNORE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "IGNORE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_EXPLAIN",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "EXPLAIN",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_PARTITION",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "PARTITION",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'PARTITION' "
			}
		},
		{
			"type": "rule",
			"name": "KW_INTO",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "INTO",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_FROM",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "FROM",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_SET",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "SET",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_UNLOCK",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "UNLOCK",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_LOCK",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "LOCK",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_AS",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "AS",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_TABLE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "TABLE",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'TABLE'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_TABLES",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "TABLES",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'TABLES'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_COLLATE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "COLLATE",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'COLLATE'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_ON",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "ON",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_LEFT",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "LEFT",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_RIGHT",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "RIGHT",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_FULL",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "FULL",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_INNER",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "INNER",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_CROSS",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "CROSS",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_JOIN",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "JOIN",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_OUTER",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "OUTER",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_OVER",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "OVER",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_UNION",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "UNION",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_INTERSECT",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "INTERSECT",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_EXCEPT",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "EXCEPT",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_VALUE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "VALUE",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'VALUE' "
			}
		},
		{
			"type": "rule",
			"name": "KW_VALUES",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "VALUES",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_USING",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "USING",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_WHERE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "WHERE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_WITH",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "WITH",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_GROUP",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "GROUP",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_BY",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "BY",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_ORDER",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "ORDER",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_HAVING",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "HAVING",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_WINDOW",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "WINDOW",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_ORDINAL",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "ORDINAL",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'ORDINAL' "
			}
		},
		{
			"type": "rule",
			"name": "KW_SAFE_ORDINAL",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "SAFE_ORDINAL",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'ORDINAL' "
			}
		},
		{
			"type": "rule",
			"name": "KW_LIMIT",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "LIMIT",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_OFFSET",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "OFFSET",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				}
			}
		},
		{
			"type": "rule",
			"name": "KW_SAFE_OFFSET",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "SAFE_OFFSET",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				}
			}
		},
		{
			"type": "rule",
			"name": "KW_ASC",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "ASC",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'ASC'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_DESC",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "DESC",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'DESC'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_ALL",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "ALL",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'ALL'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_DISTINCT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "DISTINCT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'DISTINCT';"
			}
		},
		{
			"type": "rule",
			"name": "KW_BETWEEN",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "BETWEEN",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'BETWEEN'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_IN",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "IN",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'IN'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_IS",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "IS",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'IS'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_LIKE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "LIKE",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'LIKE'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_EXISTS",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "EXISTS",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'EXISTS'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_NOT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "NOT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'NOT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_AND",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "AND",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'AND'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_OR",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "OR",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'OR'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_COUNT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "COUNT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'COUNT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_MAX",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "MAX",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'MAX'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_MIN",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "MIN",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'MIN'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_SUM",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "SUM",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'SUM'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_AVG",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "AVG",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'AVG'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_EXTRACT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "EXTRACT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'EXTRACT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_CALL",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "CALL",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'CALL'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_CASE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "CASE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_WHEN",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "WHEN",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_THEN",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "THEN",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_ELSE",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "ELSE",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_END",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "END",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_CAST",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "CAST",
						"ignoreCase": true
					},
					{
						"type": "simple_not",
						"expression": {
							"type": "rule_ref",
							"name": "ident_start"
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "KW_ARRAY",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "ARRAY",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'ARRAY'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_BYTES",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "BYTES",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'BYTES'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_BOOL",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "BOOL",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'BOOL'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_CHAR",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "CHAR",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'CHAR'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_GEOGRAPHY",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "GEOGRAPHY",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'GEOGRAPHY'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_VARCHAR",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "VARCHAR",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'VARCHAR';"
			}
		},
		{
			"type": "rule",
			"name": "KW_NUMERIC",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "NUMERIC",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'NUMERIC'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_DECIMAL",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "DECIMAL",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'DECIMAL'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_SIGNED",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "SIGNED",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'SIGNED'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_UNSIGNED",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "UNSIGNED",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'UNSIGNED'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_INT_64",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "INT64",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'INT64'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_ZEROFILL",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "ZEROFILL",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'ZEROFILL'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_INTEGER",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "INTEGER",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'INTEGER'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_JSON",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "JSON",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'JSON'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_SMALLINT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "SMALLINT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'SMALLINT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_STRING",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "STRING",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'STRING'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_STRUCT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "STRUCT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'STRUCT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_TINYINT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "TINYINT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'TINYINT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_TINYTEXT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "TINYTEXT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'TINYTEXT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_TEXT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "TEXT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'TEXT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_MEDIUMTEXT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "MEDIUMTEXT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'MEDIUMTEXT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_LONGTEXT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "LONGTEXT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'LONGTEXT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_BIGINT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "BIGINT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'BIGINT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_FLOAT_64",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "FLOAT64",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'FLOAT64'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_DOUBLE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "DOUBLE",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'DOUBLE'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_DATE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "DATE",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'DATE'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_DATETIME",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "DATETIME",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'DATETIME'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_ROWS",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "ROWS",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'ROWS'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_TIME",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "TIME",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'TIME'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_TIMESTAMP",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "TIMESTAMP",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'TIMESTAMP'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_TRUNCATE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "TRUNCATE",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'TRUNCATE'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_USER",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "USER",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'USER'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_CURRENT_DATE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "CURRENT_DATE",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'CURRENT_DATE'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_ADD_DATE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "ADDDATE",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'ADDDATE'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_INTERVAL",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "INTERVAL",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'INTERVAL'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_UNIT_YEAR",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "YEAR",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'YEAR'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_UNIT_MONTH",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "MONTH",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'MONTH'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_UNIT_DAY",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "DAY",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'DAY'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_UNIT_HOUR",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "HOUR",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'HOUR'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_UNIT_MINUTE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "MINUTE",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'MINUTE'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_UNIT_SECOND",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "SECOND",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'SECOND'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_CURRENT_TIME",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "CURRENT_TIME",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'CURRENT_TIME'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_CURRENT_TIMESTAMP",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "CURRENT_TIMESTAMP",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'CURRENT_TIMESTAMP'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_SESSION_USER",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "SESSION_USER",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'SESSION_USER'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_GLOBAL",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "GLOBAL",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'GLOBAL'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_SESSION",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "SESSION",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'SESSION'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_LOCAL",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "LOCAL",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'LOCAL'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_PIVOT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "PIVOT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'PIVOT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_PERSIST",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "PERSIST",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'PERSIST'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_PERSIST_ONLY",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "PERSIST_ONLY",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'PERSIST_ONLY'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_ADD",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "ADD",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'ADD'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_COLUMN",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "COLUMN",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'COLUMN'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_INDEX",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "INDEX",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'INDEX'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_KEY",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "KEY",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'KEY'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_FULLTEXT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "FULLTEXT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'FULLTEXT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_UNIQUE",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "UNIQUE",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'UNIQUE'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_COMMENT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "COMMENT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'COMMENT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_CONSTRAINT",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "CONSTRAINT",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'CONSTRAINT'; "
			}
		},
		{
			"type": "rule",
			"name": "KW_REFERENCES",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "literal",
							"value": "REFERENCES",
							"ignoreCase": true
						},
						{
							"type": "simple_not",
							"expression": {
								"type": "rule_ref",
								"name": "ident_start"
							}
						}
					]
				},
				"code": " return 'REFERENCES'; "
			}
		},
		{
			"type": "rule",
			"name": "DOT",
			"expression": {
				"type": "literal",
				"value": ".",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "COMMA",
			"expression": {
				"type": "literal",
				"value": ",",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "STAR",
			"expression": {
				"type": "literal",
				"value": "*",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "LPAREN",
			"expression": {
				"type": "literal",
				"value": "(",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "RPAREN",
			"expression": {
				"type": "literal",
				"value": ")",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "LANGLE",
			"expression": {
				"type": "literal",
				"value": "<",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "RANGLE",
			"expression": {
				"type": "literal",
				"value": ">",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "LBRAKE",
			"expression": {
				"type": "literal",
				"value": "[",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "RBRAKE",
			"expression": {
				"type": "literal",
				"value": "]",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "SEMICOLON",
			"expression": {
				"type": "literal",
				"value": ";",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "OPERATOR_CONCATENATION",
			"expression": {
				"type": "literal",
				"value": "||",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "OPERATOR_AND",
			"expression": {
				"type": "literal",
				"value": "&&",
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "LOGIC_OPERATOR",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "OPERATOR_CONCATENATION"
					},
					{
						"type": "rule_ref",
						"name": "OPERATOR_AND"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "__",
			"expression": {
				"type": "zero_or_more",
				"expression": {
					"type": "choice",
					"alternatives": [
						{
							"type": "rule_ref",
							"name": "whitespace"
						},
						{
							"type": "rule_ref",
							"name": "comment"
						}
					]
				}
			}
		},
		{
			"type": "rule",
			"name": "___",
			"expression": {
				"type": "one_or_more",
				"expression": {
					"type": "choice",
					"alternatives": [
						{
							"type": "rule_ref",
							"name": "whitespace"
						},
						{
							"type": "rule_ref",
							"name": "comment"
						}
					]
				}
			}
		},
		{
			"type": "rule",
			"name": "comment",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "block_comment"
					},
					{
						"type": "rule_ref",
						"name": "line_comment"
					},
					{
						"type": "rule_ref",
						"name": "pound_sign_comment"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "block_comment",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "/*",
						"ignoreCase": false
					},
					{
						"type": "zero_or_more",
						"expression": {
							"type": "group",
							"expression": {
								"type": "sequence",
								"elements": [
									{
										"type": "simple_not",
										"expression": {
											"type": "literal",
											"value": "*/",
											"ignoreCase": false
										}
									},
									{
										"type": "rule_ref",
										"name": "char"
									}
								]
							}
						}
					},
					{
						"type": "literal",
						"value": "*/",
						"ignoreCase": false
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "line_comment",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "--",
						"ignoreCase": false
					},
					{
						"type": "zero_or_more",
						"expression": {
							"type": "group",
							"expression": {
								"type": "sequence",
								"elements": [
									{
										"type": "simple_not",
										"expression": {
											"type": "rule_ref",
											"name": "EOL"
										}
									},
									{
										"type": "rule_ref",
										"name": "char"
									}
								]
							}
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "pound_sign_comment",
			"expression": {
				"type": "sequence",
				"elements": [
					{
						"type": "literal",
						"value": "#",
						"ignoreCase": false
					},
					{
						"type": "zero_or_more",
						"expression": {
							"type": "group",
							"expression": {
								"type": "sequence",
								"elements": [
									{
										"type": "simple_not",
										"expression": {
											"type": "rule_ref",
											"name": "EOL"
										}
									},
									{
										"type": "rule_ref",
										"name": "char"
									}
								]
							}
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "char",
			"expression": {
				"type": "any"
			}
		},
		{
			"type": "rule",
			"name": "interval_unit",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "KW_UNIT_YEAR"
					},
					{
						"type": "rule_ref",
						"name": "KW_UNIT_MONTH"
					},
					{
						"type": "rule_ref",
						"name": "KW_UNIT_DAY"
					},
					{
						"type": "rule_ref",
						"name": "KW_UNIT_HOUR"
					},
					{
						"type": "rule_ref",
						"name": "KW_UNIT_MINUTE"
					},
					{
						"type": "rule_ref",
						"name": "KW_UNIT_SECOND"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "whitespace",
			"expression": {
				"type": "class",
				"parts": [
					" ",
					"\t",
					"\n",
					"\r"
				],
				"inverted": false,
				"ignoreCase": false
			}
		},
		{
			"type": "rule",
			"name": "EOL",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "EOF"
					},
					{
						"type": "one_or_more",
						"expression": {
							"type": "class",
							"parts": [
								"\n",
								"\r"
							],
							"inverted": false,
							"ignoreCase": false
						}
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "EOF",
			"expression": {
				"type": "simple_not",
				"expression": {
					"type": "any"
				}
			}
		},
		{
			"type": "rule",
			"name": "data_type_list",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "head",
							"expression": {
								"type": "rule_ref",
								"name": "data_type_alias"
							}
						},
						{
							"type": "labeled",
							"label": "tail",
							"expression": {
								"type": "zero_or_more",
								"expression": {
									"type": "group",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "COMMA"
											},
											{
												"type": "rule_ref",
												"name": "__"
											},
											{
												"type": "rule_ref",
												"name": "data_type_alias"
											}
										]
									}
								}
							}
						}
					]
				},
				"code": "\n return createList(head, tail);\n "
			}
		},
		{
			"type": "rule",
			"name": "data_type_alias",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "n",
							"expression": {
								"type": "optional",
								"expression": {
									"type": "action",
									"expression": {
										"type": "sequence",
										"elements": [
											{
												"type": "labeled",
												"label": "n",
												"expression": {
													"type": "rule_ref",
													"name": "ident_name"
												}
											},
											{
												"type": "semantic_not",
												"code": " return DATA_TYPES[n.toUpperCase()] === true; "
											}
										]
									},
									"code": "\n return n\n "
								}
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "data_type"
							}
						}
					]
				},
				"code": "\n return {\n field_name: n,\n field_type: t,\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "data_type",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "rule_ref",
						"name": "struct_type"
					},
					{
						"type": "rule_ref",
						"name": "array_type"
					},
					{
						"type": "rule_ref",
						"name": "character_string_type"
					},
					{
						"type": "rule_ref",
						"name": "numeric_type"
					},
					{
						"type": "rule_ref",
						"name": "datetime_type"
					},
					{
						"type": "rule_ref",
						"name": "bool_byte_geography_type"
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "character_string_type",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "KW_STRING"
							}
						},
						{
							"type": "zero_or_more",
							"expression": {
								"type": "group",
								"expression": {
									"type": "sequence",
									"elements": [
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "rule_ref",
											"name": "LPAREN"
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "labeled",
											"label": "l",
											"expression": {
												"type": "one_or_more",
												"expression": {
													"type": "class",
													"parts": [
														[
															"0",
															"9"
														]
													],
													"inverted": false,
													"ignoreCase": false
												}
											}
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "rule_ref",
											"name": "RPAREN"
										}
									]
								}
							}
						}
					]
				},
				"code": " return { dataType: t }; "
			}
		},
		{
			"type": "rule",
			"name": "numeric_type",
			"expression": {
				"type": "action",
				"expression": {
					"type": "labeled",
					"label": "t",
					"expression": {
						"type": "choice",
						"alternatives": [
							{
								"type": "rule_ref",
								"name": "KW_NUMERIC"
							},
							{
								"type": "rule_ref",
								"name": "KW_INT_64"
							},
							{
								"type": "rule_ref",
								"name": "KW_FLOAT_64"
							}
						]
					}
				},
				"code": " return { dataType: t }; "
			}
		},
		{
			"type": "rule",
			"name": "datetime_type",
			"expression": {
				"type": "choice",
				"alternatives": [
					{
						"type": "action",
						"expression": {
							"type": "sequence",
							"elements": [
								{
									"type": "labeled",
									"label": "t",
									"expression": {
										"type": "choice",
										"alternatives": [
											{
												"type": "rule_ref",
												"name": "KW_DATE"
											},
											{
												"type": "rule_ref",
												"name": "KW_DATETIME"
											},
											{
												"type": "rule_ref",
												"name": "KW_TIME"
											},
											{
												"type": "rule_ref",
												"name": "KW_TIMESTAMP"
											}
										]
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "LPAREN"
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "labeled",
									"label": "l",
									"expression": {
										"type": "one_or_more",
										"expression": {
											"type": "class",
											"parts": [
												[
													"0",
													"9"
												]
											],
											"inverted": false,
											"ignoreCase": false
										}
									}
								},
								{
									"type": "rule_ref",
									"name": "__"
								},
								{
									"type": "rule_ref",
									"name": "RPAREN"
								}
							]
						},
						"code": " return { dataType: t, length: parseInt(l.join(''), 10), parentheses: true }; "
					},
					{
						"type": "action",
						"expression": {
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "choice",
								"alternatives": [
									{
										"type": "rule_ref",
										"name": "KW_DATE"
									},
									{
										"type": "rule_ref",
										"name": "KW_DATETIME"
									},
									{
										"type": "rule_ref",
										"name": "KW_TIME"
									},
									{
										"type": "rule_ref",
										"name": "KW_TIMESTAMP"
									}
								]
							}
						},
						"code": " return { dataType: t }; "
					}
				]
			}
		},
		{
			"type": "rule",
			"name": "bool_byte_geography_type",
			"expression": {
				"type": "action",
				"expression": {
					"type": "labeled",
					"label": "t",
					"expression": {
						"type": "choice",
						"alternatives": [
							{
								"type": "group",
								"expression": {
									"type": "sequence",
									"elements": [
										{
											"type": "rule_ref",
											"name": "KW_BYTES"
										},
										{
											"type": "rule_ref",
											"name": "LPAREN"
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "labeled",
											"label": "l",
											"expression": {
												"type": "choice",
												"alternatives": [
													{
														"type": "one_or_more",
														"expression": {
															"type": "class",
															"parts": [
																[
																	"0",
																	"9"
																]
															],
															"inverted": false,
															"ignoreCase": false
														}
													},
													{
														"type": "literal",
														"value": "MAX",
														"ignoreCase": false
													},
													{
														"type": "literal",
														"value": "max",
														"ignoreCase": false
													}
												]
											}
										},
										{
											"type": "rule_ref",
											"name": "__"
										},
										{
											"type": "rule_ref",
											"name": "RPAREN"
										}
									]
								}
							},
							{
								"type": "rule_ref",
								"name": "KW_BOOL"
							},
							{
								"type": "rule_ref",
								"name": "KW_GEOGRAPHY"
							}
						]
					}
				},
				"code": " return { dataType: t }; "
			}
		},
		{
			"type": "rule",
			"name": "array_type",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "KW_ARRAY"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LANGLE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "a",
							"expression": {
								"type": "rule_ref",
								"name": "data_type_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RANGLE"
						}
					]
				},
				"code": "\n return {\n dataType: t,\n definition: a,\n anglebracket: true\n }\n "
			}
		},
		{
			"type": "rule",
			"name": "struct_type",
			"expression": {
				"type": "action",
				"expression": {
					"type": "sequence",
					"elements": [
						{
							"type": "labeled",
							"label": "t",
							"expression": {
								"type": "rule_ref",
								"name": "KW_STRUCT"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "LANGLE"
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "labeled",
							"label": "a",
							"expression": {
								"type": "rule_ref",
								"name": "data_type_list"
							}
						},
						{
							"type": "rule_ref",
							"name": "__"
						},
						{
							"type": "rule_ref",
							"name": "RANGLE"
						}
					]
				},
				"code": "\n return {\n dataType: t,\n definition: a,\n anglebracket: true\n }\n "
			}
		}
	]
}