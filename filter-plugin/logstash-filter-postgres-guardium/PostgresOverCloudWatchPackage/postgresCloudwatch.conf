#/*
#Copyright 2020-2021 IBM Inc. All rights reserved
#SPDX-License-Identifier: Apache-2.0
#*/

input {
	cloudwatch_logs {
		#Mandatory arguments:
		#Insert the log group that is created for the data instance for example, /aws/rds/instance/<instance_name>/postgresql
		log_group => ["<LOG_GROUP>"]  #e.g., ["/aws/rds/instance/database-1/postgresql"]
		start_position => "end"
		#Insert the access key and secret that has access to log group
		access_key_id => "<ACCESS_KEY>"
		secret_access_key => "<SECRET_KEY>"
		region => "<REGION>" #Region that has the DB, Default value: us-east-1
		interval => 2
		event_filter => ""
		codec => multiline {
          pattern => "(((?<ts>[^[A-Z]{3}]*)UTC:(?<client_ip>[^:]*):(?<db_user>[^@]*)@(?<db_name>[^:]*):(?<session_id>[^:*]*):(?<logger>LOCATION|DETAIL|STATEMENT|HINT):%{GREEDYDATA:sql_full_log})|(^\s))"
          negate => false
          what => "previous"
        }
		type => "postgres"
	}
}


filter {
   if [type]=="postgres" {
 	grok { match => { "message" => "(?<ts>[^[A-Z]]*)[A-Z]{3}:(?<client_ip>[^:]*):(?<db_user>[^@]*)@(?<db_name>[^:]*):\[(?<session_id>[^\]]*)\]:%{GREEDYDATA:sql_full_log}" } }
	
	grok { match => { "ts" => "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}" } }

	mutate { add_field => { "myTimestamp" => "%{year}-%{month}-%{day}T%{time}Z" } } 
	
	
	date{
		match => ["myTimestamp", "ISO8601"]
		target => "finalTime"
	}
	
	ruby { code => "event.set('[GuardRecord][time][timstamp]', event.get('finalTime').to_i * 1000)" }
	
	mutate { add_field => { "[GuardRecord][time][minOffsetFromGMT]" => "0" } }
	mutate { add_field => { "[GuardRecord][time][minDst]" => "0" } }
	
	json_encode {
		source => "[GuardRecord][time][minOffsetFromGMT]"
		target => "[GuardRecord][time][minOffsetFromGMT]"
	}
	json_encode {
		source => "[GuardRecord][time][minDst]"
		target => "[GuardRecord][time][minDst]"
	}
	
	if [sql_full_log] =~ "ERROR:" or [sql_full_log] =~ "FATAL:" {

		grok { match => {"sql_full_log" => "(?<error>[^:]*): (?<sql_state>[^:]*): (?<description>[^[0-9]{4}]*)%{GREEDYDATA:rest}" } }
		
		if [sql_state] {
			mutate { add_field => {"[GuardRecord][exception][exceptionTypeId]" => "%{sql_state}"} }
		}
		else {
			mutate { add_field => {"[GuardRecord][exception][exceptionTypeId]" => ""} }
		}
		
		if [description] {
			mutate { 
				gsub => ["description", "\"", ""]
				add_field => {"[GuardRecord][exception][description]" => "%{description}" } 
			}
		}
		else {
			mutate { add_field => {"[GuardRecord][exception][description]" => "" } }
		}
		
		json_encode {
			source => "[GuardRecord][exception][exceptionTypeId]"
			target => "[GuardRecord][exception][exceptionTypeId]"
		}
		json_encode {
			source => "[GuardRecord][exception][description]"
			target => "[GuardRecord][exception][description]"
		}
	
		mutate{
			split => {sql_full_log => ":STATEMENT:"}
		}
		
		ruby { code => "event.set('number_of_elements', event.get('sql_full_log').length)" }
		
		if [number_of_elements] == 2 {
		    mutate { add_field => { "query" => "%{[sql_full_log][1]}" } } 
			mutate { 
				gsub => ["query", "\"", ""]
				add_field => {"[GuardRecord][exception][sqlString]" => "%{query}" } 
			}
		}
		else {
			mutate { add_field => {"[GuardRecord][exception][sqlString]" => "NA" } }
		}
		
		json_encode {
			source => "[GuardRecord][exception][sqlString]"
			target => "[GuardRecord][exception][sqlString]"
		}
	}
	
	else if [sql_full_log] =~ "LOG:" {
		grok { match => { "sql_full_log" => "(?<log>[^:]*): (?<sql_state>[^:]*): (?<log_level>[^:]*): (?<audit_data>[^:]*)," } }
		
		if [log_level] {
		grok { match => {"audit_data" => 
		"(?<data1>[^,]*),(?<data2>[^,]*),(?<data3>[^,]*),(?<data4>[^,]*),(?<data5>[^,]*),(?<data6>[^,]*),(?<data7>[^,]*),(?<query_details>[^:]*)"} }
		
		
		if [query_details] {
			mutate { 
				gsub => ["query_details", "\"", ""]
				add_field => { "[GuardRecord][data][originalSqlCommand]" => "%{query_details}" } 
			} 
		}
		else {
			drop { }
			#mutate { add_field => { "[GuardRecord][data][originalSqlCommand]" => "NA" } } 
		}
		ruby { code => 'event.set("[GuardRecord][data][construct]", nil)' }
		ruby { code => 'event.set("[GuardRecord][exception]", nil)' }
		
		json_encode {
			source => "[GuardRecord][data][originalSqlCommand]"
			target => "[GuardRecord][data][originalSqlCommand]"
		}
		json_encode {
			source => "[GuardRecord][data][construct]"
			target => "[GuardRecord][data][construct]"
		}
		json_encode {
			source => "[GuardRecord][exception]"
			target => "[GuardRecord][exception]"
		}
		}
		else {
			drop { }
		}
	}
	
	if [client_ip] {
		grok { match => {client_ip => "(?<clientIP>[^(]*)\((?<clientPort>[^)]*)"} }
		mutate {add_field => {"[GuardRecord][sessionLocator][clientIp]" => "%{clientIP}" } }
		mutate { add_field => {"[GuardRecord][sessionLocator][clientPort]" => "%{clientPort}" } }
	}
	
	json_encode {
		source => "[GuardRecord][sessionLocator][clientIp]"
		target => "[GuardRecord][sessionLocator][clientIp]"
	}
		
	ruby { code => 'event.set("[GuardRecord][sessionLocator][clientIpv6]", nil)' }
	ruby { code => 'event.set("[GuardRecord][sessionLocator][serverIpv6]", nil)' }
		
	json_encode {
		source => "[GuardRecord][sessionLocator][clientIpv6]"
		target => "[GuardRecord][sessionLocator][clientIpv6]"
	}
	json_encode {
		source => "[GuardRecord][sessionLocator][serverIpv6]"
		target => "[GuardRecord][sessionLocator][serverIpv6]"
	}
	
	if [db_name] {
		mutate {add_field => { "[GuardRecord][dbName]" => "%{db_name}" } }
	}
	else {
		mutate {add_field => { "[GuardRecord][dbName]" => "NA" } }
	}
	mutate {add_field => { "[GuardRecord][appUserName]" => "AWSService" } }
	
	if [session_id] {
		mutate {add_field => { "[GuardRecord][sessionId]" => "%{session_id}" } }
	}
	else {
		mutate {add_field => { "[GuardRecord][sessionId]" => "NA" } }
	}
	
	json_encode {
		source => "[GuardRecord][dbName]"
		target => "[GuardRecord][dbName]"
	}
	json_encode {
		source => "[GuardRecord][appUserName]"
		target => "[GuardRecord][appUserName]"
	}
	json_encode {
		source => "[GuardRecord][sessionId]"
		target => "[GuardRecord][sessionId]"
	}
	
	mutate {add_field => { "[GuardRecord][sessionLocator][serverIp]" => "0.0.0.0" } }
    mutate {add_field => { "[GuardRecord][sessionLocator][serverPort]" => "-1" } }
    mutate {add_field => { "[GuardRecord][sessionLocator][isIpv6]" => "false" } }
    	
	json_encode {
		source => "[GuardRecord][sessionLocator][serverIp]"
		target => "[GuardRecord][sessionLocator][serverIp]"
	}
	json_encode {
		source => "[GuardRecord][sessionLocator][serverPort]"
		target => "[GuardRecord][sessionLocator][serverPort]"
	}
	
	if [db_user] {
		mutate { add_field => { "[GuardRecord][accessor][dbUser]" => "%{db_user}" } }
	}
	else {
		mutate { add_field => { "[GuardRecord][accessor][dbUser]" => "NA" } }
	}
	mutate { add_field => { "[GuardRecord][accessor][serverType]" => "Postgre"} }
	mutate { add_field => { "[GuardRecord][accessor][serverOS]" => ""} }
	mutate { add_field => { "[GuardRecord][accessor][clientOs]" => ""} }
	mutate { add_field => { "[GuardRecord][accessor][clientHostName]" => "" } }
	mutate { add_field => { "[GuardRecord][accessor][serverHostName]" => "rds.postgre.amazonaws.com"} }
	mutate { add_field => { "[GuardRecord][accessor][commProtocol]" => "AwsApiCall"} }
	mutate { add_field => { "[GuardRecord][accessor][dbProtocol]" => "Postgre AWS Native Audit" } }
	mutate { add_field => { "[GuardRecord][accessor][dbProtocolVersion]" => ""} }
	mutate { add_field => { "[GuardRecord][accessor][osUser]" => "" } }
	mutate { add_field => { "[GuardRecord][accessor][soureProgram]" => ""} }
	mutate { add_field => { "[GuardRecord][accessor][clientMac]" => ""} }
	mutate { add_field => { "[GuardRecord][accessor][serverDescription]" => "" } }
	mutate { add_field => { "[GuardRecord][accessor][serviceName]" => ""} }
	mutate { add_field => { "[GuardRecord][accessor][language]" => "PGRS" } } # PGRS is a Guardium internal code for PostreSQL
	mutate { add_field => { "[GuardRecord][accessor][dataType]" => "TEXT" } }
	
	json_encode {
		source => "[GuardRecord][accessor][dbUser]"
		target => "[GuardRecord][accessor][dbUser]" 
	}
	json_encode {
		source => "[GuardRecord][accessor][serverType]"
		target => "[GuardRecord][accessor][serverType]" 
	}
	json_encode {
		source => "[GuardRecord][accessor][serverOS]"
		target => "[GuardRecord][accessor][serverOS]"
	}
	json_encode {
		source => "[GuardRecord][accessor][clientOs]"
		target => "[GuardRecord][accessor][clientOs]" 
	}

	json_encode {
		source => "[GuardRecord][accessor][clientHostName]"
		target => "[GuardRecord][accessor][clientHostName]" 
	}
	json_encode {
		source => "[GuardRecord][accessor][serverHostName]"
		target => "[GuardRecord][accessor][serverHostName]"
	}
	json_encode {
		source => "[GuardRecord][accessor][commProtocol]"
		target => "[GuardRecord][accessor][commProtocol]" 
	}
	json_encode {
		source => "[GuardRecord][accessor][dbProtocol]"
		target => "[GuardRecord][accessor][dbProtocol]" 
	}
	json_encode {
		source => "[GuardRecord][accessor][dbProtocolVersion]"
		target => "[GuardRecord][accessor][dbProtocolVersion]"
	}
	json_encode {
		source => "[GuardRecord][accessor][osUser]"
		target => "[GuardRecord][accessor][osUser]" 
	}
	json_encode {
		source => "[GuardRecord][accessor][soureProgram]"
		target => "[GuardRecord][accessor][soureProgram]" 
	}
	json_encode {
		source => "[GuardRecord][accessor][clientMac]"
		target => "[GuardRecord][accessor][clientMac]"
	}
	json_encode {
		source => "[GuardRecord][accessor][serverDescription]"
		target => "[GuardRecord][accessor][serverDescription]"
	}
	json_encode {
		source => "[GuardRecord][accessor][serviceName]"
		target => "[GuardRecord][accessor][serviceName]" 
	}
	json_encode {
		source => "[GuardRecord][accessor][language]"
		target => "[GuardRecord][accessor][language]" 
	}
	json_encode {
		source => "[GuardRecord][accessor][dataType]"
		target => "[GuardRecord][accessor][dataType]"
	}
	
	mutate {
		convert => { "[GuardRecord][time][minOffsetFromGMT]" => "integer"}
		convert => { "[GuardRecord][time][minDst]" => "integer"}
		convert => { "[GuardRecord][sessionLocator][clientPort]" => "integer"}
		convert => { "[GuardRecord][sessionLocator][serverPort]" => "integer"}
		convert => { "[GuardRecord][sessionLocator][isIpv6]" => "boolean"}
	}
	
	
	mutate { remove_field => ["cloudwatch_logs", "rest_data", "tags", "clientIP", "session_id","db_name", "client_ip", "error_description", "log", "log_level", "data1", "data2", "data3", "data4", "data5", "data6", "data7", "db_user", "year", "month", "day","time", "finalTime", "myTimestamp", "ts", "epoc", "@timestamp", "@version", "error", "sql_state", "description", "rest", "type", "sequence", "query_details", "message", "clientPort", "audit_data", "sql_full_log"] }
	}
 }