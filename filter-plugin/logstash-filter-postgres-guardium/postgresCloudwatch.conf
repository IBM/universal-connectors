#/*
#Copyright 2020-2021 IBM Inc. All rights reserved
#SPDX-License-Identifier: Apache-2.0
#*/

input {
	cloudwatch_logs {
		#Mandatory arguments:
		#Insert the log group that is created for the data instance 
		#Example of log group for AWS postgres RDS, /aws/rds/instance/<instance_name>/postgresql i.e., ["/aws/rds/instance/database-1/postgresql"]
		#Example of log group for Aurora Postgres, /aws/rds/cluster/<instance_name>/postgresql i.e., ["/aws/rds/cluster/aurorapostgres/postgresql"]
		log_group => ["<LOG_GROUP>"]  #e.g., ["/aws/rds/instance/database-1/postgresql"]
		start_position => "end"
		#Insert the access key and secret that has access to log group
		access_key_id => "<ACCESS_KEY>"
		secret_access_key => "<SECRET_KEY>"
		region => "<REGION>" #Region that has the DB, Default value: us-east-1
		interval => 2
		event_filter => ""
		codec => multiline {
          pattern => "(((?<ts>[^[A-Z]{3}]*)UTC:(?<client_ip>[^:]*):(?<db_user>[^@]*)@(?<db_name>[^:]*):(?<session_id>[^:*]*):(?<logger>LOCATION|DETAIL|STATEMENT|HINT):%{GREEDYDATA:sql_full_log})|(^\s))"
          negate => false
          what => "previous"
        }
		type => "postgres"
		#Insert the account id of the AWS account
		add_field => {"account_id" => "<ACCOUNT_ID>"}
	}
}


filter {
    if [type]=="postgres" {
   
		grok { match => { "message" => "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time} (?<zone>[^:]*):(?<client_ip>[^:]*):(?<db_user>[^@]*)@(?<db_name>[^:]*):\[(?<session_id>[^\]]*)\]:%{GREEDYDATA:sql_full_log}" } }
	
	
		if [client_ip] {
			grok { match => {client_ip => "(?<clientIP>[^(]*)\((?<clientPort>[^)]*)"} }
		
			if [clientIP] {
				mutate {add_field => {"client_IP" => "%{clientIP}" } }
			}
			else {
				mutate {add_field => {"client_IP" => "0.0.0.0" } }
			}
		
			if [clientPort] {
				mutate { add_field => {"client_PORT" => "%{clientPort}" } }
			}
			else {
				mutate { add_field => {"client_PORT" => "-1" } }
			}
		}
		else {
			mutate {add_field => {"client_IP" => "0.0.0.0" } }
			mutate { add_field => {"client_PORT" => "-1" } }
		}
	
		if [db_user] {
			mutate { add_field => { "db_USER" => "%{db_user}" } }
		}
		else {
			mutate { add_field => { "db_USER" => "NA" } }
		}
	
		if [db_name] {
			mutate {add_field => { "db_NAME" => "%{db_name}" } }
		}
		else {
			mutate {add_field => { "db_NAME" => "NA" } }
		}
	
		if [client_IP] == "0.0.0.0" and [db_USER] == "NA" and  [db_NAME] == "NA" {
			drop { }
		}
	
		mutate { add_field => { "myTimestamp" => "%{year}-%{month}-%{day}T%{time}Z" } } 
	
		date{
			match => ["myTimestamp", "ISO8601"]
			target => "finalTime"
		}
	
		ruby { code => "event.set('[GuardRecord][time][timstamp]', event.get('finalTime').to_i * 1000)" }
	
		mutate { add_field => { "[GuardRecord][time][minOffsetFromGMT]" => "0" } }
		mutate { add_field => { "[GuardRecord][time][minDst]" => "0" } }
	
		if [sql_full_log] =~ "ERROR:" or [sql_full_log] =~ "FATAL:" {

			grok { match => {"sql_full_log" => "(?<error>[^:]*): (?<description>[^\n]*)%{GREEDYDATA:rest}" } }
		
			if [description] =~  "password authentication failed" {
				mutate { add_field => {"[GuardRecord][exception][exceptionTypeId]" => "LOGIN_FAILED"} }
			}
			else {
				mutate { add_field => {"[GuardRecord][exception][exceptionTypeId]" => "SQL_ERROR"} }
			}
		
			if [description] {
				mutate { 
					gsub => ["description", "\"", ""]
					add_field => {"[GuardRecord][exception][description]" => "%{description}" } 
				}
			}
			else {
				mutate { add_field => {"[GuardRecord][exception][description]" => "" } }
			}
		
			mutate{
				split => {sql_full_log => ":STATEMENT:"}
			}
		
			ruby { code => "event.set('number_of_elements', event.get('sql_full_log').length)" }
		
			if [number_of_elements] == 2 {
				mutate { add_field => { "query" => "%{[sql_full_log][1]}" } } 
				mutate { 
					gsub => ["query", "\"", ""]
					add_field => {"[GuardRecord][exception][sqlString]" => "%{query}" } 
				}
			}
			else {
				mutate { add_field => {"[GuardRecord][exception][sqlString]" => "NA" } }
			}
		
		}
	
		else if [sql_full_log] =~  /(?i)log:/ {
			grok { match => { "sql_full_log" => "(?<log>[^:]*): (?<log_level>[^:]*): %{GREEDYDATA:audit_data},<" } }
		
			if [log_level] {
		
				mutate { gsub => ["audit_data", '[\\]"', '"'] }
			
			csv {
				source => audit_data
				separator => ","
				columns => ["data1","data2","data3","data4","data5","data6","data7","query_details"]
				autogenerate_column_names => false
			}
			
			if "MalformedCSVError" in [tags] {
				grok { match => {"audit_data" => 
				"(?<data1>[^,]*),(?<data2>[^,]*),(?<data3>[^,]*),(?<data4>[^,]*),(?<data5>[^,]*),(?<data6>[^,]*),(?<data7>[^,]*),%{GREEDYDATA:query_details}"} }
			}
		
				if [query_details] {
			
					if [query_details] =~ "checkpoint" or [query_details] =~ "pg_catalog." or [query_details] =~ "current_schema" {
						drop {}
					}
					else {
						mutate { 
							add_field => { "[GuardRecord][data][originalSqlCommand]" => "%{query_details}" } 
						} 
					}
				}
				else {
					drop { }
				}
				ruby { code => 'event.set("[GuardRecord][data][construct]", nil)' }
				ruby { code => 'event.set("[GuardRecord][exception]", nil)' }
		
			}
			else {
				drop { }
			}
		}
		if [log_level] or [description] {

			if [client_IP] {
				mutate {add_field => {"[GuardRecord][sessionLocator][clientIp]" => "%{client_IP}" } }
			}
			
			if [client_PORT] {
				mutate { add_field => {"[GuardRecord][sessionLocator][clientPort]" => "%{client_PORT}" } }
			}
				
			ruby { code => 'event.set("[GuardRecord][sessionLocator][clientIpv6]", nil)' }
			ruby { code => 'event.set("[GuardRecord][sessionLocator][serverIpv6]", nil)' }
		
			mutate { add_field => { "log_group" => "%{[cloudwatch_logs][log_group]}" } }
	
			grok { match => { "log_group" => 	"(?<data11>[^\/]*)\/(?<data12>[^\/]*)\/(?<data13>[^\/]*)\/(?<data14>[^\/]*)\/(?<instance>[^\/]*)\/(?<data15>[^\/]*)" } }
	
			if [db_NAME] {
				mutate {add_field => { "[GuardRecord][dbName]" => "%{account_id}:%{instance}:%{db_NAME}" } }
				mutate { add_field => { "[GuardRecord][accessor][serviceName]" => "%{account_id}:%{instance}:%{db_NAME}"} }
			}
		
			mutate {add_field => { "[GuardRecord][appUserName]" => "AWSService" } }
	
			if [session_id] {
				mutate {add_field => { "[GuardRecord][sessionId]" => "%{session_id}" } }
			}
			else {
				mutate {add_field => { "[GuardRecord][sessionId]" => "NA" } }
			}
	
			mutate {add_field => { "[GuardRecord][sessionLocator][serverIp]" => "0.0.0.0" } }
			mutate {add_field => { "[GuardRecord][sessionLocator][serverPort]" => "-1" } }
			mutate {add_field => { "[GuardRecord][sessionLocator][isIpv6]" => "false" } }
    	
			if [db_USER] {
				mutate { add_field => { "[GuardRecord][accessor][dbUser]" => "%{db_USER}" } }
			}
					
			mutate { add_field => { "[GuardRecord][accessor][serverType]" => "POSTGRESQL"} }
			mutate { add_field => { "[GuardRecord][accessor][serverOs]" => ""} }
			mutate { add_field => { "[GuardRecord][accessor][clientOs]" => ""} }
			mutate { add_field => { "[GuardRecord][accessor][clientHostName]" => "" } }
			mutate { add_field => { "[GuardRecord][accessor][serverHostName]" => "%{account_id}_%{instance}"} }
			mutate { add_field => { "[GuardRecord][accessor][commProtocol]" => "AwsApiCall"} }
			mutate { add_field => { "[GuardRecord][accessor][dbProtocol]" => "POSTGRESQL" } }
			mutate { add_field => { "[GuardRecord][accessor][dbProtocolVersion]" => ""} }
			mutate { add_field => { "[GuardRecord][accessor][osUser]" => "" } }
			mutate { add_field => { "[GuardRecord][accessor][soureProgram]" => ""} }
			mutate { add_field => { "[GuardRecord][accessor][clientMac]" => ""} }
			mutate { add_field => { "[GuardRecord][accessor][serverDescription]" => "" } }
			mutate { add_field => { "[GuardRecord][accessor][language]" => "PGRS" } } #PGRS is a Guardium internal code for PostreSQL
			mutate { add_field => { "[GuardRecord][accessor][dataType]" => "TEXT" } }
		
			json_encode {
				source => "[GuardRecord]"
				target => "[GuardRecord]"
			}
	
			mutate {
				convert => { "[GuardRecord][time][minOffsetFromGMT]" => "integer"}
				convert => { "[GuardRecord][time][minDst]" => "integer"}
				convert => { "[GuardRecord][sessionLocator][clientPort]" => "integer"}
				convert => { "[GuardRecord][sessionLocator][serverPort]" => "integer"}
				convert => { "[GuardRecord][sessionLocator][isIpv6]" => "boolean"}
			}
		}
		else {
			drop { }
		}
	
		prune { whitelist_names => [ "GuardRecord" ] }
	}
}