#
# Copyright 2021-2023 IBM Inc. All rights reserved
# SPDX-License-Identifier: Apache2.0
#

input {
    jdbc {
        type => "snowflake"
        #To prevent authentication token expiration please add in jdbc_connection_string as mentioned below.
        #&CLIENT_SESSION_KEEP_ALIVE=true&CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY=60
        jdbc_connection_string => "jdbc:snowflake://<id>.<region>.<provider>.snowflakecomputing.com/?warehouse=<warehouse>&db=<database>"
        # When using the KeyPair Authentication. use the below Connection string,
        # jdbc_connection_string => "jdbc:snowflake://<id>.<region>.<provider>.snowflakecomputing.com/?user=<snowflake_username>&private_key_file=${THIRD_PARTY_PATH}/<private_key_file_name>.p8&authenticator=snowflake_jwt"
        jdbc_user => "<username>"
        # When using the KeyPair Authentication. remove the jdbc_password property below,
        jdbc_password => "<password>"
        jdbc_validate_connection => true
        plugin_timezone =>"local"
        jdbc_driver_class => "Java::net.snowflake.client.jdbc.SnowflakeDriver"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/snowflake-jdbc-3.13.30.jar"
        use_column_value => true
        tracking_column_type => "numeric"
        tracking_column => "query_timestamp_epoch"
        last_run_metadata_path => "/usr/share/logstash/third_party/.snowflake_success_logstash_jdbc_last_run"
        schedule =>  "* * * * *"
        add_field => {
            "server_host_name" => "<id>.<region>.<provider>.snowflakecomputing.com"
            "event_type" => "login_success"
            "skip_logging_audit_query" => false
        }
        parameters => {
            "execution_status" => "RUNNING"
        }
        statement => "
            SELECT
                QH.DATABASE_NAME as DATABASE_NAME,QH.SESSION_ID as SESSION_ID,
                TO_TIMESTAMP_LTZ(QH.END_TIME) as QUERY_TIMESTAMP,
                LH.CLIENT_IP as CLIENT_IP, CURRENT_IP_ADDRESS() as SERVER_IP,
                QH.USER_NAME as USER_NAME, S.CLIENT_ENVIRONMENT,
                QH.QUERY_ID, QH.QUERY_TEXT, QH.QUERY_TYPE, QH.QUERY_TAG ,
                QH.ROLE_NAME, S.CLIENT_APPLICATION_ID, QH.WAREHOUSE_NAME,
                QH.ERROR_CODE AS QUERY_ERROR_CODE, QH.ERROR_MESSAGE AS QUERY_ERROR_MESSAGE,
                QH.EXECUTION_STATUS AS QUERY_EXECUTION_STATUS,
                DATE_PART(epoch_millisecond, QH.END_TIME) AS QUERY_TIMESTAMP_EPOCH
            FROM
                SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
            LEFT JOIN SNOWFLAKE.ACCOUNT_USAGE.SESSIONS S
                ON S.SESSION_ID = QH.SESSION_ID
            LEFT JOIN SNOWFLAKE.ACCOUNT_USAGE.LOGIN_HISTORY LH
                ON S.LOGIN_EVENT_ID = LH.EVENT_ID
            WHERE (QH.EXECUTION_STATUS <> :execution_status)
                AND DATE_PART(epoch_millisecond, QH.END_TIME) > :sql_last_value
            ORDER BY QH.END_TIME
        "
    }

    jdbc {
        type => "snowflake"
        jdbc_connection_string => "jdbc:snowflake://<id>.<region>.<provider>.snowflakecomputing.com/?warehouse=<warehouse>&db=<database>"
        # When using the KeyPair Authentication. use the below Connection string,
        # jdbc_connection_string => "jdbc:snowflake://<id>.<region>.<provider>.snowflakecomputing.com/?user=<snowflake_username>&private_key_file=${THIRD_PARTY_PATH}/<private_key_file_name>.p8&authenticator=snowflake_jwt"
        jdbc_user => "<username>"
        # When using the KeyPair Authentication. remove the jdbc_password property below,
        jdbc_password => "<password>"
        jdbc_validate_connection => true
        jdbc_driver_class => "Java::net.snowflake.client.jdbc.SnowflakeDriver"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/snowflake-jdbc-3.13.30.jar"
        use_column_value => true
        tracking_column_type => "numeric"
        tracking_column => "login_timestamp_epoch"
        last_run_metadata_path => "/usr/share/logstash/third_party/.snowflake_login_failed_logstash_jdbc_last_run"
        schedule =>  "* * * * *"
        plugin_timezone => "local"
        add_field => {
            "server_host_name" => "<id>.<region>.<provider>.snowflakecomputing.com"
            "event_type" => "login_failed"
            "skip_logging_auth_audit_query" => false
        }
        parameters => {
            "login_success" => "%NO%"
        }
        statement => "
            SELECT
                LH.USER_NAME AS USER_NAME,
                LH.CLIENT_IP AS CLIENT_IP,
                CURRENT_IP_ADDRESS() as SERVER_IP,
                (LH.REPORTED_CLIENT_TYPE || ' ' || LH.REPORTED_CLIENT_VERSION) AS CLIENT_APPLICATION_ID,
                LH.IS_SUCCESS AS LOGIN_SUCCESS,
                LH.ERROR_CODE AS LOGIN_ERROR_CODE,
                LH.ERROR_MESSAGE AS LOGIN_ERROR_MESSAGE,
                TO_TIMESTAMP_LTZ(LH.EVENT_TIMESTAMP) AS LOGIN_TIMESTAMP,
                DATE_PART(epoch_millisecond, LH.EVENT_TIMESTAMP) AS LOGIN_TIMESTAMP_EPOCH
            FROM SNOWFLAKE.ACCOUNT_USAGE.LOGIN_HISTORY LH
            WHERE LH.IS_SUCCESS LIKE :login_success
                AND DATE_PART(epoch_millisecond, LH.EVENT_TIMESTAMP) > :sql_last_value
            ORDER BY LH.EVENT_TIMESTAMP
        "
    }
}

filter {
    if [type] == "snowflake" {
        if ([skip_logging_audit_query] == "true" or [skip_logging_auth_audit_query] == "true") and [query_text] {
            mutate {
                add_field => {
                    temp_query => "%{query_text}"
                }
            }

            mutate {
                gsub => ["temp_query","\\n","",
                    "temp_query", "\s{2,}", " ",
                    "temp_query", "\\t", " "]
            }

            if [temp_query] =~ /(\s*)SELECT(\s+)QH\.DATABASE_NAME(\s+)as(\s+)DATABASE_NAME,QH\.SESSION_ID(\s+)as(\s+)SESSION_ID,(\s+)TO_TIMESTAMP_LTZ\(QH\.END_TIME\)(\s+)as(\s+)QUERY_TIMESTAMP,(\s+)LH\.CLIENT_IP(\s+)as(\s+)CLIENT_IP,(\s+)CURRENT_IP_ADDRESS\(\)(\s+)as(\s+)SERVER_IP,(\s+)QH\.USER_NAME(\s+)as(\s+)USER_NAME,(\s+)S\.CLIENT_ENVIRONMENT,(\s+)QH\.QUERY_ID,(\s+)QH\.QUERY_TEXT,(\s+)QH\.QUERY_TYPE,(\s+)QH\.QUERY_TAG(\s+),(\s+)QH\.ROLE_NAME,(\s+)S\.CLIENT_APPLICATION_ID,(\s+)QH\.WAREHOUSE_NAME,(\s+)QH\.ERROR_CODE(\s+)AS(\s+)QUERY_ERROR_CODE,(\s+)QH\.ERROR_MESSAGE(\s+)AS(\s+)QUERY_ERROR_MESSAGE,(\s+)QH\.EXECUTION_STATUS(\s+)AS(\s+)QUERY_EXECUTION_STATUS,(\s+)DATE_PART\(epoch_millisecond,(\s+)QH\.END_TIME\)(\s+)AS(\s+)QUERY_TIMESTAMP_EPOCH(\s+)FROM(\s+)SNOWFLAKE\.ACCOUNT_USAGE\.QUERY_HISTORY(\s+)QH(\s+)LEFT(\s+)JOIN(\s+)SNOWFLAKE\.ACCOUNT_USAGE\.SESSIONS(\s+)S(\s+)ON(\s+)S\.SESSION_ID(\s+)=(\s+)QH\.SESSION_ID(\s+)LEFT(\s+)JOIN(\s+)SNOWFLAKE\.ACCOUNT_USAGE\.LOGIN_HISTORY(\s+)LH(\s+)ON(\s+)S\.LOGIN_EVENT_ID(\s+)=(\s+)LH\.EVENT_ID(\s+)WHERE(\s+)\(QH\.EXECUTION_STATUS(\s+)<>(\s+)\'RUNNING\'\)(\s+)AND(\s+)DATE_PART\(epoch_millisecond,(\s+)QH\.END_TIME\)(\s+)>(\s+)[0-9]+(\s+)ORDER(\s+)BY(\s+)QH\.END_TIME/ {
                drop {}
            }

            if [temp_query] =~ /FROM\s+SNOWFLAKE\.ACCOUNT_USAGE\.LOGIN_HISTORY\s+LH\s+WHERE\s+LH.IS_SUCCESS\s+LIKE\s+'%NO%'\s+AND\s+DATE_PART\(epoch_millisecond,\s+LH\.EVENT_TIMESTAMP\)\s+>\s+[0-9]+\s+ORDER\s+BY\s+LH\.EVENT_TIMESTAMP/ {
                drop {}
            }
        }

        if [event_type] == "login_success" {
            if [query_execution_status] =~ "FAIL" {
                mutate {
                    replace => { "event_type" => "SQL_ERROR" }
                }
            } else {
                mutate {
                    replace => { "event_type" => "SUCCESS" }
                }
            }
        }
        guardium_snowflake_filter { }
        prune {
            whitelist_names => ["GuardRecord"]
        }
    }
}