filter {
if [type]=="MSSQL" {
		grok { match => { "event_time" => "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day}T%{TIME:time}" } }
		mutate { add_field => { "mssqlTimeStamp" => "%{year}-%{month}-%{day}T%{time}Z" } }
		date{
			match => ["mssqlTimeStamp", "ISO8601"]
			target => "mssqlEventTime"
		}

		if [session_id]{
			mutate { add_field => { "[GuardRecord][sessionId]" => "%{session_id}" }}
		}
		else{
			mutate { add_field => { "[GuardRecord][sessionId]" => "NA" }}
		}

		if [database_name]{
			mutate { add_field => { "[GuardRecord][dbName]" => "%{database_name}" }}

		}
		else{
			mutate { add_field => { "[GuardRecord][dbName]" => "NA" }}
		}

		mutate { add_field => { "[GuardRecord][appUserName]" =>  "AWSService" }}

		json_encode {
				source => "[GuardRecord][sessionId]"
				target => "[GuardRecord][sessionId]"
			}
		json_encode {
				source => "[GuardRecord][dbName]"
				target => "[GuardRecord][dbName]"
			}
		json_encode {
				source => "[GuardRecord][appUserName]"
				target => "[GuardRecord][appUserName]"
			}
		ruby { code => "event.set('[GuardRecord][time][timstamp]', event.get('mssqlEventTime').to_i * 1000)" }
		mutate { add_field => { "[GuardRecord][time][minOffsetFromGMT]" => "0" }}
		mutate { add_field => { "[GuardRecord][time][minDst]" => "0" }}
		json_encode {
				source => "[GuardRecord][time][timstamp]"
				target => "[GuardRecord][time][timstamp]"
			}
		json_encode {
				source => "[GuardRecord][time][minOffsetFromGMT]"
				target => "[GuardRecord][time][minOffsetFromGMT]"
			}
		json_encode {
				source => "[GuardRecord][time][minDst]"
				target => "[GuardRecord][time][minDst]"
			}
		if [client_ip] == "local machine" or [client_ip] == "Unknown"{
			mutate { add_field => { "[GuardRecord][sessionLocator][clientIp]" => "0.0.0.0"}}
		}else{
			mutate { add_field => { "[GuardRecord][sessionLocator][clientIp]" => "%{client_ip}" }}
		}
		mutate { add_field => { "[GuardRecord][sessionLocator][clientPort]" => "-1" }}
		mutate { add_field => { "[GuardRecord][sessionLocator][serverIp]" => "0.0.0.0" }}
		mutate { add_field => { "[GuardRecord][sessionLocator][serverPort]" => "-1" }}
		mutate { add_field => { "[GuardRecord][sessionLocator][isIpv6]" => "false" }}
		ruby { code => 'event.set("[GuardRecord][sessionLocator][clientIpv6]", nil)' }
		ruby { code => 'event.set("[GuardRecord][sessionLocator][serverIpv6]", nil)' }
		json_encode {
				source => "[GuardRecord][sessionLocator][clientIp]"
				target => "[GuardRecord][sessionLocator][clientIp]"
			}
		json_encode {
				source => "[GuardRecord][sessionLocator][clientPort]"
				target => "[GuardRecord][sessionLocator][clientPort]"
			}
		json_encode {
				source => "[GuardRecord][sessionLocator][serverIp]"
				target => "[GuardRecord][sessionLocator][serverIp]"
			}
		json_encode {
				source => "[GuardRecord][sessionLocator][serverPort]"
				target => "[GuardRecord][sessionLocator][serverPort]"
			}
		json_encode {
				source => "[GuardRecord][sessionLocator][isIpv6]"
				target => "[GuardRecord][sessionLocator][isIpv6]"
			}
		json_encode {
				source => "[GuardRecord][sessionLocator][clientIpv6]"
				target => "[GuardRecord][sessionLocator][clientIpv6]"
			}
		json_encode {
				source => "[GuardRecord][sessionLocator][serverIpv6]"
				target => "[GuardRecord][sessionLocator][serverIpv6]"
			}

		if [server_principal_name]{
			mutate { add_field => { "[GuardRecord][accessor][dbUser]" => "%{server_principal_name}" }}
		}
		else{
			mutate { add_field => { "[GuardRecord][accessor][dbUser]" => "NA" }}
		}
		mutate { add_field => { "[GuardRecord][accessor][dataType]" => "TEXT" }}
		mutate { add_field => { "[GuardRecord][accessor][osUser]" => "" }}
		mutate { add_field => { "[GuardRecord][accessor][serverType]" => "MSSQL" }}
		mutate { add_field => { "[GuardRecord][accessor][commProtocol]" => "AwsApiCall" }}
		mutate { add_field => { "[GuardRecord][accessor][dbProtocol]" => "MS SQL SERVER" }}
		mutate { add_field => { "[GuardRecord][accessor][language]" => "MSSQL" }}  # MSSQL is a Guardium internal code for MSSQL
		mutate { add_field => { "[GuardRecord][accessor][serverOs]" => "" }}
		mutate { add_field => { "[GuardRecord][accessor][clientOs]" => "" }}

		if [server_instance_name]
		{
			mutate { add_field => { "[GuardRecord][accessor][serverHostName]" => "%{server_instance_name}" }}
		}
		else
		{
			mutate { add_field => { "[GuardRecord][accessor][serverHostName]" => "mssql" }}
		}

		mutate { add_field => { "[GuardRecord][accessor][clientHostName]" => "" }}
		mutate { add_field => { "[GuardRecord][accessor][dbProtocolVersion]" => "" }}
		mutate { add_field => { "[GuardRecord][accessor][clientMac]" => ""} }
		mutate { add_field => { "[GuardRecord][accessor][serverDescription]" => "" } }
		mutate { add_field => { "[GuardRecord][accessor][serviceName]" => ""} }

		if [application_name]{
			mutate { add_field => { "[GuardRecord][accessor][sourceProgram]" => "%{application_name}"} }
		}
		else{
			mutate { add_field => { "[GuardRecord][accessor][sourceProgram]" => "NA"} }
		}

		json_encode {
				source => "[GuardRecord][accessor][dataType]"
				target => "[GuardRecord][accessor][dataType]"
			}
		json_encode {
				source => "[GuardRecord][accessor][osUser]"
				target => "[GuardRecord][accessor][osUser]"
			}
		json_encode {
				source => "[GuardRecord][accessor][dbUser]"
				target => "[GuardRecord][accessor][dbUser]"
			}
		json_encode {
				source => "[GuardRecord][accessor][serverType]"
				target => "[GuardRecord][accessor][serverType]"
			}
		json_encode {
				source => "[GuardRecord][accessor][commProtocol]"
				target => "[GuardRecord][accessor][commProtocol]"
			}
		json_encode {
				source => "[GuardRecord][accessor][dbProtocol]"
				target => "[GuardRecord][accessor][dbProtocol]"
			}
		json_encode {
				source => "[GuardRecord][accessor][language]"
				target => "[GuardRecord][accessor][language]"
			}
		json_encode {
				source => "[GuardRecord][accessor][serverOs]"
				target => "[GuardRecord][accessor][serverOs]"
			}
		json_encode {
				source => "[GuardRecord][accessor][clientOs]"
				target => "[GuardRecord][accessor][clientOs]"
			}
		json_encode {
				source => "[GuardRecord][accessor][serverHostName]"
				target => "[GuardRecord][accessor][serverHostName]"
			}
		json_encode {
				source => "[GuardRecord][accessor][clientHostName]"
				target => "[GuardRecord][accessor][clientHostName]"
			}
		json_encode {
				source => "[GuardRecord][accessor][dbProtocolVersion]"
				target => "[GuardRecord][accessor][dbProtocolVersion]"
			}
		json_encode {
			source => "[GuardRecord][accessor][serverDescription]"
			target => "[GuardRecord][accessor][serverDescription]"
		}
		json_encode {
			source => "[GuardRecord][accessor][serviceName]"
			target => "[GuardRecord][accessor][serviceName]"
		}
		json_encode {
			source => "[GuardRecord][accessor][sourceProgram]"
			target => "[GuardRecord][accessor][sourceProgram]"
		}
		json_encode {
			source => "[GuardRecord][accessor][clientMac]"
			target => "[GuardRecord][accessor][clientMac]"
		}


		mutate {add_field => { "isSuccess" => "%{succeeded}" }}

		if [isSuccess] == "true" {
			ruby { code => 'event.set("[GuardRecord][data][construct]", nil)' }
			mutate { add_field => { "[GuardRecord][data][originalSqlCommand]" => "%{statement}" }}

			ruby { code => 'event.set("[GuardRecord][exception]", nil)' }

			json_encode {
				source => "[GuardRecord][data][construct]"
				target => "[GuardRecord][data][construct]"
			}
		json_encode {
				source => "[GuardRecord][data][originalSqlCommand]"
				target => "[GuardRecord][data][originalSqlCommand]"
			}

			json_encode {
				source => "[GuardRecord][exception]"
				target => "[GuardRecord][exception]"
			}

		}
		else {
			mutate { add_field => { "[GuardRecord][exception][exceptionTypeId]" => "LOGIN_FAILED" }}
			mutate { add_field => { "[GuardRecord][exception][description]" => "%{statement}" }}
			mutate { add_field => { "[GuardRecord][exception][sqlString]" => "NA" }}

			ruby { code => 'event.set("[GuardRecord][data]", nil)' }

			json_encode {
				source => "[GuardRecord][exception][exceptionTypeId]"
				target => "[GuardRecord][exception][exceptionTypeId]"
			}
		json_encode {
				source => "[GuardRecord][exception][description]"
				target => "[GuardRecord][exception][description]"
			}
		json_encode {
				source => "[GuardRecord][exception][sqlString]"
				target => "[GuardRecord][exception][sqlString]"
			}
		json_encode {
				source => "[GuardRecord][data]"
				target => "[GuardRecord][data]"
			}

		}
		mutate {
			convert => {"[GuardRecord][sessionLocator][clientPort]" => "integer"}
			convert => {"[GuardRecord][sessionLocator][serverPort]" => "integer"}
			convert => {"[GuardRecord][sessionLocator][isIpv6]" => "boolean"}
			convert => {"[GuardRecord][time][minOffsetFromGMT]" => "integer"}
			convert => {"[GuardRecord][time][minDst]" => "integer"}
		}
		# Mutate Remove:
		mutate { remove_field => ["class_type", "server_instance_name", "schema_name", "audit_file_offset", "database_principal_id", "permission_bitmask", "sequence_number", "duration_milliseconds", "target_database_principal_id", "object_id", "target_server_principal_sid", "sequence_group_id", "is_column_permission", "target_server_principal_id", "server_principal_id", "server_principal_sid", "affected_rows", "user_defined_event_id", "target_server_principal_name", "response_rows", "audit_schema_version", "target_database_principal_name", "session_server_principal_name", database_principal_name,"client_ip", "session_id", "application_name", "additional_information", "transaction_id", "succeeded", "user_defined_information", "database_name", "file_name", "object_name", "event_time", "server_principal_name", "statement", "action_id", "mssqlTimeStamp", "@timestamp", "@version", "time", "month", "year", "mssqlEventTime", "day", "data_sensitivity_information", "isSuccess", "connection_id", "host_name"] }
	}
}