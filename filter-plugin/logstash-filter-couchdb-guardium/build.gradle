import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a ***REMOVED***mple Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1.1/userguide/building_java_projects.html
 */
apply plugin: 'application' 
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'eclipse'
mainClassName= 'com.ibm.guardium.couchdb.CouchdbGuardiumFilter'
apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"


// ===========================================================================
// plugin info
// ===========================================================================
group                      'com.ibm.guardium.couchdb' // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "CouchDB-Guardium filter plugin"
pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
pluginInfo.longDescription = "This gem is a Logstash CouchDB filter plugin required to be installed as part of IBM Security Guardium, Guardium Univer***REMOVED***l connector configuration. This gem is not a stand-alone program."
pluginInfo.authors         = ['IBM']
pluginInfo.email           = ['']
pluginInfo.homepage        = "http://www.elastic.co/guide/en/logstash/current/index.html"
pluginInfo.pluginType      = "filter"
pluginInfo.pluginClass     = "CouchdbGuardiumFilter"
pluginInfo.pluginName      = "couchdb_guardium_filter" // must match the @LogstashPlugin annotation in the main plugin class
// ===========================================================================

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}


apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    classifier = null
}
dependencies {
    compile group: 'commons-validator', name: 'commons-validator', version: '1.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'com.google.code.gson:gson:2.8.9'
     // Use JUnit Jupiter for testing.
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'
    testCompile 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'org.jruby:jruby-complete:9.2.7.0'

    compile fileTree(dir: LOGSTASH_CORE_PATH, include: "build/libs/logstash-core-*.*.*.jar")
    compile fileTree(dir: GUARDIUM_UNIVERSALCONNECTOR_COMMONS_PATH, include: "common-*.*.*.jar")
    // This dependency is exported to consumers, that is to ***REMOVED***y found on their compile classpath.
   // api 'org.apache.commons:commons-math3:3.6.1'

 

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
     implementation 'com.google.guava:guava:30.1-jre'
     //testImplementation fileTree(dir: GUARDIUM_UNIVERSALCONNECTOR_COMMONS_PATH, include: "guardium-univer***REMOVED***lconnector-commons-master-?.?.?.jar")

 

}

test {
    useJUnitPlatform()
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

clean {
    delete "${projectDir}/Gemfile"
    delete "${projectDir}/" + pluginInfo.pluginFullName() + ".gemspec"
    delete "${projectDir}/lib/"
    delete "${projectDir}/vendor/"
    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-?.?.?.gem").each { filename ->
        delete filename
    }
}

tasks.register("vendor"){
    dependsOn shadowJar
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        validatePluginJar(projectJarFile, project.group)
    }
}


tasks.register("generateRubySupportFiles") {
    doLast {
        generateRubySupportFilesForPlugin(project.description, project.group, version)
    }
}

tasks.register("removeObsoleteJars") {
    doLast {
        new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
            delete f
        }
    }
}

tasks.register("gem"){
    dependsOn ([downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles])
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
jacocoTestReport {
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }
    
     afterEvaluate { // (optional) : to exclude classes / packages from coverage
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(
                dir: it,
                exclude: [''])
        })
    }
}
test.finalizedBy jacocoTestReport

