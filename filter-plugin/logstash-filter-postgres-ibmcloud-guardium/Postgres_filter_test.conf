input{
    generator {
        message => '{"data":{"tag":"platform.fd073c9576dd48778ca36548591e77b0.databases-for-postgresql","label":{"crn":"crn:v1:bluemix:public:databases-for-postgresql:us-south:a/fd073c9576dd48778ca36548591e77b0:9f36612d-89f2-4b54-b963-35a7d05db267::","database":"postgresql","ingester":"iclr-agent-fluent-bit","member":"m-0","region":"us-south"},"meta.cluster_name":"icd-prod-us-south-db-dphqf","stream":"stderr","message":{"saveServiceCopy":false,"message":"2025-03-28 04:06:16 UTC [DBeaver 23.3.1 - SQLEditor <Script-49.sql>] [00000] [421]: [5-1] user=admin,db=ibmclouddb,client=172.30.43.128 LOG:  AUDIT: SESSION,5,1,DDL,CREATE TABLE,,,create table pg_guardium (id int),<not logged>","logSourceCRN":"crn:v1:bluemix:public:databases-for-postgresql:us-south:a/fd073c9576dd48778ca36548591e77b0:9f36612d-89f2-4b54-b963-35a7d05db267::","serviceName":"databases-for-postgresql"},"logtag":"F","app":"databases-for-postgresql"},"labels":{"applicationname":"ibm-platform-logs","subsystemname":"databases-for-postgresql:9f36612d-89f2-4b54-b963-35a7d05db267","computername":"","threadid":"","ipaddress":""},"metadata":{"timestamp":"2025-03-28T04:06:16.315185","severity":"Info","logid":"64ebe46c-8021-4887-9048-1c3b4f31ee92","priorityclass":"high","branchid":"53041276-aa03-2c28-cfe5-01c7525cb3b9","ingressTimestamp":1743134779932000000}}'
        add_field => { "include_account_in_host" => "true" }
        # User can add one or more logSourceCRN to filter the event
        add_field => { "crnVal" => ["<CRN_VAL>"] } # i.e ["crn:v1:bluemix:public:databases-for-postgresql:{region}:a/{value1}:{value2}::","crn:v1:bluemix:public:databases-for-postgresql:{region}:a/{value1}:{value2}::"]
        count => 1
        type => "Postgress_UC"
    }
}

filter {
    if [type] == "Postgress_UC" {

        mutate {
            add_field => {
                "json_event" => "%{message}"
            }
        }

        json {
            source => "json_event"
            target => "parsed_json"
        }

        mutate {
            add_field => {
                "logSourceCRN" => "%{[parsed_json][data][message][logSourceCRN]}"
            }
        }

        # Define isCRNMatched
        mutate {
            add_field => { "isCRNMatched" => "false" }
        }

        # Check if crnVal is defined
        if [crnVal] {
            # Ensure crn_vals is an array
            ruby {
                code => '
                    isMatched = false
                    crn_vals = event.get("crnVal")
                    log_crn = event.get("logSourceCRN")

                    # If crn_vals is a string, convert it into an array
                    crn_vals = [crn_vals] unless crn_vals.is_a?(Array)

                    crn_vals.each { |val|
                        if val == log_crn
                            isMatched = true
                        end
                    }

                    event.set("isCRNMatched", isMatched.to_s)
                '
            }
        }

        # Check if parsed_json does not contain "databases-for-postgres" and contains either "INFO:" or "INFO"
        if !( [parsed_json] =~ /databases-for-postgres/ ) and
            ( [parsed_json] =~ /INFO:/ or [parsed_json] =~ /INFO/ ) {
            drop { }
        }

        # Apply filter if isCRNMatched is true or crnVal is not defined.
        if [isCRNMatched] == "true" or ![crnVal] {
            if [message] {
                icd_postgresql_guardium_filter {}
            }
        }
    }
}

output {
    stdout { codec => rubydebug }
}