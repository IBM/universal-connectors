input{
generator {
message =>
"{\"_account\":\"761200caa1\",\"_host\":\"ibm-cloud-databases-prod\",\"_label\":{\"database\":\"postgresql\",\"member\":\"m-0\",\"crn\":\"crn:v1:bluemix:public:databases-for-postgresql:us-south:a/2212c4a700f44505a917e8fcb952c4ce:f90dcc7d-68aa-4c85-8740-21929b237bfc::\",\"region\":\"us-south\"},\"_mac\":\"ca:27:3d:77:25:66\",\"_file\":\"crn:v1:bluemix:public:databases-for-postgresql:us-south:a/2212c4a700f44505a917e8fcb952c4ce:f90dcc7d-68aa-4c85-8740-21929b237bfc::\",\"_line\":\"{\"message\":\"2022-09-05T07:22:23.428548901Z stderr F 2022-09-05 07:22:23 UTC [psql] [00000] [2572]: [3-1] user=admin,db=ibmclouddb,client=172.30.44.128 LOG:  AUDIT: SESSION,2,1,DDL,CREATE TABLE,,,\"create table maths_report(Roll_No int,Name varchar(20),Marks int);\",<not logged>\",\"saveServiceCopy\":true,\"logSourceCRN\":\"crn:v1:bluemix:public:databases-for-postgresql:us-south:a/2212c4a700f44505a917e8fcb952c4ce:f90dcc7d-68aa-4c85-8740-21929b237bfc::\"}\",\"_rawline\":null,\"_ts\":1662362544394,\"_platform\":\"ibm-cloud-databases-prod\",\"_app\":\"crn:v1:bluemix:public:databases-for-postgresql:us-south:a/2212c4a700f44505a917e8fcb952c4ce:f90dcc7d-68aa-4c85-8740-21929b237bfc::\",\"_ipremote\":\"166.9.14.3\",\"message\":\"2022-09-05T07:22:23.428548901Z stderr F 2022-09-05 07:22:23 UTC [psql] [00000] [2572]: [3-1] user=admin,db=ibmclouddb,client=172.30.44.128 LOG:  AUDIT: SESSION,2,1,DDL,CREATE TABLE,,,\"create table maths_report(Roll_No int,Name varchar(20),Marks int);\",<not logged>\",\"saveServiceCopy\":true,\"logSourceCRN\":\"crn:v1:bluemix:public:databases-for-postgresql:us-south:a/2212c4a700f44505a917e8fcb952c4ce:f90dcc7d-68aa-4c85-8740-21929b237bfc::\"}"
count => 1
}
}

filter {
if [type] == "icd_postgresql" {
	if "multiline" in [tags][0]{ 
        ruby {
            code => '
                event.set("message", event.get("message").split("\n"))
            '
        }
	}
    mutate {
       gsub => [ "message", "([A-Za-z]+) \d+ - CONN:\d+", "psql" ]
	}
	mutate {
       gsub => [ "message", "(PostgreSQL\s+JDBC\s+Driver)", "psql" ]
	}
    if "LOG:" in [message] {
    grok {
    match => {"message" => ["%{GREEDYDATA:UNKNOWN}\s%{TIMESTAMP_ISO8601:timestamp}\s%{TZ:timezone}\s\[%{WORD:language}]\s\[(?<ID1>[^/s]*)]\s\[(?<ID2>[^:]*)]\:\s\[(?<ID3>[^/s]*)]\s(?<usertype>[^\s]*)=(?<user>[^\s]*),(?<dbtype>[^\s]*)=(?<dbname>[^\s]*),(?<type>[^\s]*)=(?<clientIP>[^\s]*)\s%{DATA:Log}\:%{DATA:LogType}\:(?<logDetail>[^\"]*)\,\,\,%{DATA:sqlquery},<not logged>(?<other>[^/]*)\/(?<accountId>[^:]*)%{GREEDYDATA:detail}\:\:%{GREEDYDATA:otherdetail}"]
    }
    }
    }
    if "STATEMENT:" in [message] {
    grok {
    match => {"message" => ["%{GREEDYDATA:UNKNOWN}\s%{TIMESTAMP_ISO8601:timestamp} %{TZ:timezone}\s\[%{WORD:language}]\s\[(?<ID1>[^/s]*)]\s\[(?<ID2>[^:]*)]\:\s\[(?<ID3>[^/s]*)]\s(?<usertype>[^\s]*)=(?<user>[^\s]*),(?<dbtype>[^\s]*)=(?<dbname>[^\s]*),(?<type>[^\s]*)=(?<clientIP>[^\s]*)\s%{DATA:statement}\:\s(?<status>[^/]*)\"\,(?<other>[^/]*)\/(?<accountId>[^:]*)%{GREEDYDATA:detail}\:\:%{GREEDYDATA:otherdetail}"]
    }
    }
    }
	if "FATAL:" in [message] {
    grok {
    match => {"message" => ["%{GREEDYDATA:UNKNOWN}\s%{TIMESTAMP_ISO8601:timestamp} %{TZ:timezone}\s\[\[%{WORD:language}]]\s\[(?<ID1>[^/s]*)]\s\[(?<ID2>[^:]*)]\:\s\[(?<ID3>[^/s]*)]\s(?<usertype>[^\s]*)=(?<user>[^\s]*),(?<dbtype>[^\s]*)=(?<dbname>[^\s]*),(?<type>[^\s]*)=(?<clientIP>[^\s]*)\s%{DATA:statement}\:\s(?<status>[^/]*)\"\,(?<other>[^/]*)\/(?<accountId>[^:]*)%{GREEDYDATA:detail}\:\:%{GREEDYDATA:otherdetail}"]
    }
    }
    }
    if "WARNING:" in [message] or "INFO:" in [message] or "ERROR:" in [message] or "CONTEXT:" in [message] or "DETAIL:" in [message] or "_grokparsefailure"  in [tags] or "icdpostgresql_json_parse_error"  in [tags] or "EXISTS dblink" in [message] or "HINT:" in [message] or "NOTICE:" in [message] or "SET DateStyle=ISO" in [message]
    {
      drop {}
    }

	mutate  
	{
		add_field => {"pre_fix" => "%{[message][0]}"}
	}
	if ("[00000]" in [pre_fix] and "STATEMENT" in [pre_fix]) or "statement" in [pre_fix]
	{
		drop {}
	}
	mutate
	{
		remove_field => [ "pre_fix"]
	}

	icd_postgresql_guardium_filter{}

}
}
output {
      stdout { codec => rubydebug }
}