input{
    generator {
        message => '{"_account":"86b66c1cfc","_host":"loc-a33432b4-cb0e-4681-8c5c-0ae7bc2c923b-0","_label":{"ingester":"iclr-agent-fluent-bit","region":"us-south","member":"m-1","database":"postgresql","crn":"crn:v1:bluemix:public:databases-for-postgresql:us-south:a/dffb515716044c4a8e8b77998b1b540e:fc665749-5844-4335-8096-3af41b3a190c::"},"_file":"databases-for-postgresql","_line":"{\"saveServiceCopy\": false, \"logSourceCRN\":\"crn:v1:bluemix:public:databases-for-postgresql:us-south:a/dffb515716044c4a8e8b77998b1b540e:fc665749-5844-4335-8096-3af41b3a190c::\",\"message\":\"2024-10-21 11:36:29 UTC [DBeaver 23.2.5 - SQLEditor <Script-21.sql>] [42P01] [30232]: [110-1] user=admin,db=ibmclouddb,client=172.30.166.192 STATEMENT:  drop table pratikshaSingleLine2110Final11\",\"serviceName\": \"databases-for-postgresql\"}","_rawline":null,"_ts":1729510589422,"_app":"databases-for-postgresql","_originating_user_agent":null,"saveServiceCopy":false,"logSourceCRN":"crn:v1:bluemix:public:databases-for-postgresql:us-south:a/dffb515716044c4a8e8b77998b1b540e:fc665749-5844-4335-8096-3af41b3a190c::","message":"2024-10-21 11:36:29 UTC [DBeaver 23.2.5 - SQLEditor <Script-21.sql>] [42P01] [30232]: [110-1] user=admin,db=ibmclouddb,client=172.30.166.192 STATEMENT:  drop table pratikshaSingleLine2110Final11","serviceName":"databases-for-postgresql","_mezmo_line_size":858}'
        add_field => { "include_account_in_host" => "true" }
        # User can add one or more logSourceCRN to filter the event
        add_field => { "crnVal" => ["<CRN_VAL>"] } # i.e ["crn:v1:bluemix:public:databases-for-postgresql:{region}:a/{value1}:{value2}::","crn:v1:bluemix:public:databases-for-postgresql:{region}:a/{value1}:{value2}::"]
        count => 1
        type => "Postgress_UC"
    }
}

filter {
    if [type] == "Postgress_UC" {

        mutate {
            add_field => {
                "json_event" => "%{message}"
            }
        }

        json {
            source => "json_event"
            target => "parsed_json"
        }

        # Define isCRNMatched
        mutate {
            add_field => { "isCRNMatched" => "false" }
        }

        # Check if crnVal is defined
        if [crnVal] {
            # Ensure crn_vals is an array
            ruby {
                code => '
                    isMatched = false
                    crn_vals = event.get("crnVal")
                    log_crn = event.get("parsed_json")["logSourceCRN"]

                    # If crn_vals is a string, convert it into an array
                    crn_vals = [crn_vals] unless crn_vals.is_a?(Array)

                    crn_vals.each { |val|
                        if val == log_crn
                            isMatched = true
                        end
                    }

                    event.set("isCRNMatched", isMatched.to_s)
                '
            }
        }

        # Check if parsed_json does not contain "databases-for-postgres" and contains either "INFO:" or "INFO"
        if !( [parsed_json] =~ /databases-for-postgres/ ) and
            ( [parsed_json] =~ /INFO:/ or [parsed_json] =~ /INFO/ ) {
            drop { }
        }

        # Apply filter if isCRNMatched is true or crnVal is not defined.
        if [isCRNMatched] == "true" or ![crnVal] {
            if [message] {
                icd_postgresql_guardium_filter {}
            }
        }
    }
}

output {
    stdout { codec => rubydebug }
}