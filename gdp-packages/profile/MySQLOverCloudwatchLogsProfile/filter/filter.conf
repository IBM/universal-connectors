filter {
   if [type] == "profile_name" {
     #QUERIES
     if "QUERY" in [message] {
       grok {
         match => {
           "message" => "(?<yy>\d{4})(?<mm>\d{2})(?<dd>\d{2})\s%{TIME:time}(,)(ip-\d{1,3}-\d{1,3}-\d{1,3}-\d{1,3},)%{USER:db_user}(,)%{IPV4:clientIp}(,)%{NUMBER}(,)%{NUMBER}(,)%{WORD:operation}(,)([']?)([`]?)(%{WORD:dbName})?([']?)([`]?)(,)(')*([']?)(?<originalSqlCommand>.*)([']+,[0-9]+)"
         }
       }
     }
     #CONNECT / DISCONNECT
     else if "DISCONNECT" in [message] or "CONNECT" in [message] {
       grok {
         match => {
           "message" => "([0-9]+\s)%{TIME}(,)(ip-\d{1,3}-\d{1,3}-\d{1,3}-\d{1,3},)(%{USER:db_user})?(,)%{IPV4:clientIp}(,)%{NUMBER}(,)%{NUMBER}(,)%{WORD:operation}(,)([']?)([`]?)(%{WORD:dbName})?([']?)([`]?)(,,0)(,)?([^,]*)"
         }
       }
     }
     # "Access denied"
     else {
       grok {
         match => {
           "message" => "%{TIMESTAMP_ISO8601}(\s)+(?<data>%{NUMBER}(\s)([^\s]+)(\s)+([^']*)(')%{WORD:db_user}%{GREEDYDATA})"
         }
       }
     }
     mutate {add_field => { "logGroup" => "%{[cloudwatch_logs][log_group]}" } }
     grok { match => { "logGroup" => 	"(?<data11>[^\/]*)\/(?<data12>[^\/]*)\/(?<data13>[^\/]*)\/(?<data14>[^\/]*)\/(?<instance>[^\/]*)\/(?<data15>[^\/]*)" } }
     mutate {
       add_field => {
         "sessionLocator" => {}
         "time" => {}
         "accessor" => {}
         "data" => {}
         "ExceptionRecord" => {}
         "GuardRecord" => {}
         "serverIp" => "0.0.0.0"
         "serverPort" => "-1"
         "clientPort" => "-1"
       }
     }
     mutate {
       rename => {
         "serverIp" => "[GuardRecord][sessionLocator][serverIp]"
         "serverPort" => "[GuardRecord][sessionLocator][serverPort]"
         "clientPort" => "[GuardRecord][sessionLocator][clientPort]"
         "clientIp" => "[GuardRecord][sessionLocator][clientIp]"
         "db_user" => "[GuardRecord][accessor][dbUser]"
       }
       add_field => {
         "[GuardRecord][sessionId]" => "%{[cloudwatch_logs][event_id]}"
         "[GuardRecord][accessor][dbProtocol]" => "MYSQL"
         "[GuardRecord][accessor][dataType]" => "TEXT"
         "[GuardRecord][accessor][language]" => "MYSQL"
         "[GuardRecord][accessor][serverType]" => "MySql"
         "[GuardRecord][accessor][serverOS]" => ""
         "[GuardRecord][accessor][clientOs]" => ""
         "[GuardRecord][accessor][clientHostName]" => ""
         "[GuardRecord][accessor][serverHostName]" => "%{account_id}_%{instance}"
         "[GuardRecord][accessor][commProtocol]" => ""
         "[GuardRecord][accessor][dbProtocolVersion]" => ""
         "[GuardRecord][accessor][osUser]" => ""
         "[GuardRecord][accessor][sourceProgram]" => ""
         "[GuardRecord][accessor][client_mac]" => ""
         "[GuardRecord][accessor][serverDescription]" => ""
         "[GuardRecord][accessor][serviceName]" => ""
         "[GuardRecord][time][minOffsetFromGMT]" => "0"
         "[GuardRecord][time][minDst]" => "0"
         "[GuardRecord][sessionLocator][isIpv6]" => "false"
       }
     }
 mutate { add_field => { "myTimestamp" => "%{yy}-%{mm}-%{dd}T%{time}Z" } }


         date{
                 match => ["myTimestamp", "ISO8601"]
                 target => "finalTime"
         }

         ruby { code => "event.set('[GuardRecord][time][timstamp]', event.get('finalTime').to_i * 1000)" }

   if [dbName] {
   			mutate {add_field => { "[GuardRecord][dbName]" => "%{account_id}:%{instance}:%{dbName}" } }
   		}
   		else {
   			mutate {add_field => { "[GuardRecord][dbName]" => "%{account_id}:%{instance}" } }
   		}
     #Exceptions
     if "Access denied" in [message] {
       mutate {
         add_field => {
           "[GuardRecord][exception][exceptionTypeId]" => "LOGIN_FAILED"
           "[GuardRecord][exception][sqlString]" => ""
           "[GuardRecord][exception][description]" => "%{data}"
         }
       }
     } else if "QUERY" in [message] {
       mutate {
         gsub => ["originalSqlCommand", "'", "\""]
         gsub => ["originalSqlCommand", "\\n", " "]
         gsub => ["originalSqlCommand", "\\t", ""]
         gsub => ["originalSqlCommand", "[\\]", ""]

         add_field => {
           "[GuardRecord][data][originalSqlCommand]" => "%{originalSqlCommand}"
         }
       }
     } else if "DISCONNECT" in [message] or "CONNECT" in [message] {
       mutate {
         add_field => {
           "[GuardRecord][data][originalSqlCommand]" => "%{operation}"
         }
       }
     }
     else {
       drop {}
     }
     if "_grokparsefailure" in [tags] {
       drop {}
     }
   mutate {
     remove_field => [ "message", "object", "@version", "cloudwatch_logs", "operation", "type", "data","account_id", "data13", "instance", "dbName", "data14", "logGroup", "data15", "data12", "yy", "mm", "dd" , "myTimestamp" , "finalTime" , "@timestamp" ]
    }
     json_encode {
      source => "[GuardRecord]"
      target => "[GuardRecord]"
      }
     }
}